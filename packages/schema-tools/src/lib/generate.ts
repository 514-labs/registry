import { compileFromFile } from 'json-schema-to-typescript'
import { glob } from 'glob'
import { mkdir, writeFile } from 'node:fs/promises'
import { dirname, join, relative } from 'node:path'

export async function generateTypesForWorkspace(opts: { root: string; outDir: string; mode: 'ts' | 'dts' }) {
  const schemaGlobs = [
    'connector-registry/**/schemas/**/*.schema.json',
    'pipeline-registry/**/schemas/**/*.schema.json',
  ]
  const files = (
    await Promise.all(
      schemaGlobs.map((g) => glob(g, { cwd: opts.root, ignore: ['**/node_modules/**'] }))
    )
  )
    .flat()
    .sort()

  for (const schemaPath of files) {
    const abs = join(opts.root, schemaPath)
    const rel = relative(opts.root, schemaPath)
    const outFile = join(
      opts.root,
      opts.outDir,
      rel.replace(/\.schema\.json$/, opts.mode === 'ts' ? '.ts' : '.d.ts')
    )
    const decl = await compileFromFile(abs, {
      bannerComment: '/* AUTO-GENERATED by @workspace/schema-tools. Do NOT edit by hand. */',
      additionalProperties: true,
      unknownAny: false,
    })
    await mkdir(dirname(outFile), { recursive: true })
    await writeFile(outFile, decl, 'utf8')
  }
}
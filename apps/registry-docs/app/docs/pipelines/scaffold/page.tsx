import { PipelineScaffoldTrees } from "@/components/scaffold-tree";

export default function PipelineScaffoldPage() {
  return (
    <div className="prose dark:prose-invert prose-neutral max-w-none">
      <h1>Pipeline Scaffold</h1>
      <p>
        Below is a visualization of the pipeline registry scaffolds. Each
        section shows the folder layout generated by the scaffold and the intent
        of the key folders.
      </p>
      <PipelineScaffoldTrees />

      <h2>What the folders mean</h2>

      <h3>{`{pipeline}/{version}/{author}/{language}/{implementation}/_meta`}</h3>
      <ul>
        <li>Holds all pipeline metadata at the implementation level.</li>
        <li>
          <strong>Files</strong>: `pipeline.json` (identifier, name, author,
          version, source/destination config, schedule, etc.), `README.md`,
          `CHANGELOG.md`, `LICENSE`, and `assets/` for logos and lineage
          diagrams.
        </li>
        <li>
          The `assets/` folder contains:
          <ul>
            <li>`from/` subdirectory for source system logos</li>
            <li>`to/` subdirectory for destination system logos</li>
            <li>Lineage diagrams (e.g., `lineage.mmd`, `lineage.svg`)</li>
          </ul>
        </li>
        <li>
          Each implementation has its own `_meta` folder, allowing different
          implementations to have different configurations and schedules.
        </li>
      </ul>

      <h3>
        Language implementations under{" "}
        {`{pipeline}/{version}/{author}/{language}/{implementation}`}
      </h3>
      <ul>
        <li>
          `python/{`{implementation}`}/` and `typescript/{`{implementation}`}/`
          contain helpers and runnable code.
        </li>
        <li>
          Prefer placing docs adjacent to the implementation:
          <ul>
            <li>
              `docs/` for human-facing guides (getting started, config, outputs)
            </li>
            <li>
              `schemas/` at the top level of the language directory for
              machine-readable datasets/index
            </li>
            <li>
              `src/` for code (with subfolders like `extract/`, `transform/`,
              `load/`)
            </li>
            <li>`tests/` for unit tests</li>
            <li>`scripts/` for automation like lineage generation</li>
            <li>`lineage/` for lineage-specific schemas and manifests</li>
          </ul>
        </li>
      </ul>

      <h2>Key Differences from Connectors</h2>
      <ul>
        <li>
          <strong>Lineage tracking</strong> - Pipelines include lineage diagrams
          and manifests
        </li>
        <li>
          <strong>Source/Destination config</strong> - Pipeline metadata
          includes source and destination specifications
        </li>
        <li>
          <strong>Transformation focus</strong> - More emphasis on
          transformation logic and data flow
        </li>
        <li>
          <strong>Scheduling</strong> - Built-in support for cron schedules and
          timezone configuration
        </li>
      </ul>

      <h2>Notes</h2>
      <ul>
        <li>
          The `_meta` folder is now at the implementation level, containing all
          metadata for that specific pipeline implementation.
        </li>
        <li>
          Documentation goes in the `docs/` folder within each implementation,
          not in the `_meta` folder.
        </li>
        <li>
          Place schemas at the top level of each language implementation in the
          `schemas/` folder (not under `src`).
        </li>
        <li>
          Lineage diagrams and definitions are stored within the implementation:
          <ul>
            <li>`lineage/` folder for lineage schemas and manifests</li>
            <li>`moose/` folder for Moose-specific lineage manifests</li>
            <li>
              `_meta/assets/` for generated lineage diagrams and system logos
            </li>
          </ul>
        </li>
      </ul>
    </div>
  );
}

import { ConnectorScaffoldTrees } from "@/components/scaffold-tree";

export default function ConnectorScaffoldPage() {
  return (
    <div className="prose dark:prose-invert prose-neutral max-w-none">
      <h1>Connector Scaffold</h1>
      <p>
        Below is a visualization of the connector registry scaffolds. Each
        section shows the folder layout generated by the scaffold and the intent
        of the key folders.
      </p>
      <ConnectorScaffoldTrees />

      <h2>What the folders mean</h2>

      <h3>{`{connector}/{version}/{author}/{language}/{implementation}/_meta`}</h3>
      <ul>
        <li>Holds all connector metadata at the implementation level.</li>
        <li>
          <strong>Files</strong>: `connector.json` (identifier, name, author,
          version, capabilities, etc.), `README.md`, `CHANGELOG.md`, `LICENSE`,
          and `assets/` for logos/images.
        </li>
        <li>
          Each implementation has its own `_meta` folder, allowing different
          implementations to have different metadata, maintainers, and assets.
        </li>
      </ul>

      <h3>
        Language implementations under{" "}
        {`{connector}/{version}/{author}/{language}/{implementation}`}
      </h3>
      <ul>
        <li>
          `typescript/{`{implementation}`}/` (and optionally `python/` if
          provided) contain the runnable implementation.
        </li>
        <li>
          Follow these conventions:
          <ul>
            <li>
              `docs/` for human-facing guides (getting started, configuration,
              limits, schema docs)
            </li>
            <li>
              `schemas/` at the top level of the language directory for
              machine-readable definitions and related Markdown
            </li>
            <li>
              `src/` for code with subfolders like `auth/`, `extract/`,
              `transform/`, `load/`
            </li>
            <li>`tests/` for unit tests</li>
            <li>`examples/` for usage samples</li>
          </ul>
        </li>
      </ul>

      <h2>Notes</h2>
      <ul>
        <li>
          The `_meta` folder is now at the implementation level, containing all
          metadata for that specific implementation.
        </li>
        <li>
          Documentation goes in the `docs/` folder within each implementation,
          not in the `_meta` folder.
        </li>
        <li>
          Schemas should live at the top level of each language implementation
          in the `schemas/` folder (not under `src`).
        </li>
      </ul>
    </div>
  );
}

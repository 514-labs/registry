/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/batch/lab-results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update Batch Lab Results
         * @description **Purpose:** Create or update comprehensive laboratory testing results for a specific batch to ensure compliance with cannabis regulations and provide quality assurance data.
         *
         *     **Request Requirements:**
         *     - "PackageWrite" role authorization required for lab data operations
         *     - `UpdateBatchLabResultsRequest` object in request body with lab result data
         *     - Content-Type: application/json
         *     - BatchName must exist and be accessible to your location
         *
         *     **Response Data:**
         *     - Returns success confirmation (HTTP 200) upon successful creation or update
         *     - No response body content (void return)
         *     - Lab results are validated and stored for compliance and quality tracking
         *     - Updates are reflected immediately in batch data and inventory systems
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When no lab results exist for the batch, new lab results will be created
         *     - **UPDATE**: When lab results already exist for the batch, existing results will be updated
         *     - **Validation**: Lab result data must pass validation requirements for regulatory compliance
         *     - **Batch Sharing**: All packages within the same batch share identical lab results
         *
         *     **Request Body Fields:**
         *     - BatchName: Name of the batch to update lab results for (required)
         *     - SampleWeight: Weight of the sample tested (optional, defaults to -1)
         *     - LabResults: Array of lab result objects with test data (required)
         *
         *     **Sparse Update Behavior:**
         *     - **Provided lab results**: Will overwrite existing test data with new values
         *     - **Omitted lab results**: Existing test data for those analytes will be preserved
         *     - **Special handling**: If multiple packages exist in the same batch, all will share the updated results
         *     - **Validation**: All provided lab data must meet regulatory testing standards
         *
         *     **Lab Result Data Types:**
         *     - **Cannabinoid Testing**: THC, THCA, CBD, CBDA, CBN, CBG concentrations
         *     - **Safety Testing**: Pesticides, heavy metals, microbials, mycotoxins results
         *     - **Quality Testing**: Moisture content, foreign matter, residual solvents
         *     - **Potency Testing**: Total THC/CBD calculations and verification
         *     - **Terpene Testing**: Terpene profiles and concentration data
         *
         *     **Common Use Cases:**
         *     - Submit initial lab results from testing laboratory for compliance reporting
         *     - Update lab results when retesting or additional testing is performed
         *     - Correct lab result data when errors are discovered
         *     - Add supplementary testing results (terpenes, additional cannabinoids)
         *     - Maintain accurate Certificate of Analysis (COA) data for regulatory compliance
         *
         *     **Performance & Limits:**
         *     - Single batch operation for targeted lab result updates
         *     - Immediate validation and compliance checking
         *     - Changes propagate to all packages within the batch immediately
         *     - Optimized for laboratory workflow integration
         *
         *     **Related Endpoints:**
         *     - `POST /package/lab-results` - Update lab results by package ID instead of batch name
         *     - `GET /inventory/labresults` - Retrieve lab results for display and verification
         *     - `GET /reference/lab-result-units` - Get valid units for lab result data
         *     - `GET /reference/lab-results-names` - Get valid analyte names for testing
         *
         *     **Important Notes:**
         *     - **Batch Sharing**: All packages in the same batch will share these lab results
         *     - **Compliance Critical**: Lab results are required for legal cannabis sales and regulatory reporting
         *     - **Data Integrity**: Validation ensures lab results meet regulatory standards
         *     - **Certificate Updates**: Changes update Certificate of Analysis (COA) documentation
         *     - **Alternative Access**: Use POST /package/lab-results if you prefer to work with package IDs
         */
        post: operations["BatchLab-resultsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Brands
         * @description **Purpose:** Retrieve comprehensive list of all active product brands available for the authenticated location.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of brand objects: `[{ Brand }, ...]`
         *     - Array typically contains 10-100 brands per location
         *     - Returns empty array `[]` if no brands configured for location
         *     - Brand ID, name, and optional external catalog identifiers
         *     - Only active, non-deleted brands are included in results
         *     - Results automatically filtered to authenticated location
         *
         *     **Common Use Cases:**
         *     - Populate brand dropdown lists in product creation and editing forms
         *     - Show available brands for product categorization and filtering on e-commerce sites
         *     - Group products by brand for inventory management and organization
         *     - Generate brand-specific reports for regulatory compliance requirements
         *     - Organize dispensary menus by brand for customer browsing
         *     - Synchronize brand data with external POS and e-commerce systems
         *
         *     **Performance & Limits:**
         *     - Lightweight data that is typically small and fast to retrieve
         *     - This endpoint is commonly called for form population and product management
         *     - No pagination needed due to typically small brand datasets
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Get products which include brand information in response
         *     - `POST /brand` - Create or update brand information
         *
         *     **Important Notes:**
         *     - Despite the singular endpoint name `/brand`, this method returns multiple brands (an array)
         *     - Brands are automatically scoped to the authenticated dispensary location
         *     - Only active brands are returned; deleted brands are excluded
         *     - Brands returned here can be used when creating or updating products
         */
        get: operations["BrandGet"];
        put?: never;
        /**
         * Create or Update Brand
         * @description **Purpose:** Creates a new brand or updates an existing brand with the provided brand information.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - `BrandEditRequest` object in request body with brand details
         *     - Content-Type: application/json
         *
         *     **Response Data:**
         *     - Returns brand object: `{ Brand }`
         *     - Includes assigned or updated brand ID and all brand properties
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When `BrandId` is null or omitted, a new brand will be created
         *     - **UPDATE**: When `BrandId` is provided with a valid brand ID, the existing brand will be updated
         *     - **Validation**: Brand name is required for both operations and must be unique within the location
         *
         *     **Sparse Update Behavior:**
         *     - **Provided fields**: Will overwrite existing brand values with provided data
         *     - **Omitted fields**: Will preserve existing brand values (no data loss)
         *     - **Required validation**: BrandName must be provided even for updates
         *
         *     **Common Use Cases:**
         *     - Add new product brands to the system for product categorization
         *     - Update existing brand information when details change
         *     - Maintain brand consistency across products and inventory
         *     - Synchronize brand data from external systems
         *
         *     **Performance & Limits:**
         *     - Single brand operation for targeted updates
         *     - Immediate validation and response
         *     - Changes are reflected immediately in brand listings
         *
         *     **Related Endpoints:**
         *     - `GET /brand` - Retrieve all brands to see current brand list
         *     - `GET /products` - View products that use specific brands
         *
         *     **Important Notes:**
         *     - Brand name must be unique within the authenticated location
         *     - All validation errors will be returned in a structured error response
         *     - This endpoint handles a single brand per request
         *     - Successful operations return the complete brand object
         */
        post: operations["BrandPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Customers
         * @description **Purpose:** Retrieves a list of customers with optional filtering by modification date, customer ID, or unique ID for customer management and data synchronization.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - Optional query parameters for filtering results
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of customer objects: `[{ Customer }, ...]`
         *     - Array may contain 0 to 10,000+ customers depending on location and filtering
         *     - Returns empty array `[]` if no customers match criteria (not null)
         *     - Includes loyalty status and qualifying conditions when available
         *     - Results automatically filtered by the authenticated user's location
         *     - Customer profiles with contact information and preferences
         *
         *     **Filtering Options:**
         *     - No parameters: Returns all customers for the location
         *     - fromLastModifiedDateUTC: Returns customers modified after this date for incremental sync
         *     - toLastModifiedDateUTC: Returns customers modified before this date for date range filtering
         *     - customerID: Returns a specific customer by internal ID
         *     - uniqueId: Returns a specific customer by unique identifier
         *     - includeAnonymous: Include/exclude anonymous customers (default: true)
         *
         *     **Common Use Cases:**
         *     - Call without parameters for initial sync to get all customers
         *     - Use fromLastModifiedDateUTC for incremental sync to get only recent changes
         *     - Use customerID or uniqueId for specific customer retrieval
         *     - Sync customer data for point-of-sale systems integration
         *     - Export customer data for external CRM or marketing systems
         *
         *     **Performance & Limits:**
         *     - Maximum date range is configurable per location (default: 90 days)
         *     - Use incremental sync for large datasets to avoid timeouts
         *     - Optimized for high-volume data synchronization
         *     - Consider using paginated endpoint for very large customer bases
         *
         *     **Related Endpoints:**
         *     - `GET /customer/customers-paginated` - Paginated version for large datasets
         *     - `POST /customer` - Create or update customer information
         *     - `POST /customerLookup` - Find existing customers by various search criteria
         *
         *     **Important Notes:**
         *     - Results filtered to authenticated user's location for data security
         *     - Date range limits help prevent timeouts with large customer databases
         *     - Anonymous customers can be included or excluded based on business needs
         *     - Loyalty status information included when available for customer insights
         */
        get: operations["CustomerCustomersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/customers-paginated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Customers (Paginated)
         * @description **Purpose:** Retrieves customers in paginated chunks for better performance with large customer datasets and efficient memory management.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - Optional query parameters for pagination and filtering
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ Customer }, { Customer }, ...]`
         *     - **No pagination metadata**: Response contains only data array without total counts or page information
         *     - Array contains up to PageSize customers (default 1000, max 10000)
         *     - Returns empty array `[]` if no customers found for page (not null)
         *     - Includes loyalty status and qualifying conditions when available
         *     - Results automatically filtered by the authenticated user's location
         *
         *     **Pagination Usage:**
         *     - **First Request**: Call with PageNumber=0 to get first page
         *     - **Subsequent Requests**: Increment PageNumber for each additional page
         *     - **End Detection**: Continue requesting pages until you receive an empty array `[]`
         *     - **Page Size Control**: Use PageSize parameter to control items per page (max 10,000)
         *     - **Example Flow**: Request PageNumber=0 → Process results → Increment PageNumber → Repeat until empty `[]` response
         *
         *     **Pagination Detection:**
         *     - **End of data detection**: Continue requesting pages until you receive an empty array `[]`
         *     - **No metadata provided**: Response does not include total counts, page counts, or hasNextPage indicators
         *     - **Sequential access**: Increment PageNumber from 0 until empty response indicates no more data
         *
         *     **Filtering Options:**
         *     - fromLastModifiedDateUTC: Returns customers modified after this date
         *     - toLastModifiedDateUTC: Returns customers modified before this date
         *     - includeAnonymous: Include/exclude anonymous customers (default: true)
         *
         *     **Common Use Cases:**
         *     - Process large customer databases efficiently for data export
         *     - Batch processing customers to avoid memory issues in applications
         *     - Large-scale customer data synchronization with external systems
         *     - Generate customer reports without overwhelming system resources
         *     - Support high-volume customer data operations with controlled memory usage
         *
         *     **Performance & Limits:**
         *     - Maximum 10,000 customers per page for optimal performance
         *     - Use consistent page size throughout pagination sequence for efficiency
         *     - Monitor response times and adjust page size for optimal performance
         *     - Cache results locally to minimize API calls and improve responsiveness
         *     - Recommended over non-paginated endpoint for datasets over 1000 customers
         *
         *     **Related Endpoints:**
         *     - `GET /customer/customers` - Non-paginated version for smaller datasets
         *     - `POST /customer` - Create or update customer information
         *     - `POST /customerLookup` - Find specific customers by search criteria
         *
         *     **Important Notes:**
         *     - Use this endpoint instead of /customers for better performance with large datasets
         *     - Results filtered to authenticated user's location for data security
         *     - Pagination state management required in client applications
         *     - Suitable for batch processing and large-scale data operations
         */
        get: operations["CustomerCustomers-paginatedGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/customer-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Customer Types
         * @description **Purpose:** Retrieve the complete list of customer types available for the authenticated location, used for customer categorization and compliance.
         *
         *     **Request Requirements:**
         *     - Valid API key authentication required (no specific role restrictions)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of `CustomerType` objects with customer type information
         *     - Response format: `[{ CustomerType }, ...]`
         *     - Array typically contains 2-10 customer types per location
         *     - Returns empty array `[]` if no customer types enabled for location (rare)
         *     - Each customer type includes: Id, Name, IsRetail, IsMedical flags
         *     - Display names include "Adult Use", "Medical", "Wholesale", etc.
         *     - Results automatically filtered to authenticated location's enabled types
         *
         *     **Customer Type Fields:**
         *     - Id: Unique identifier for the customer type
         *     - Name: Display name of the customer type
         *     - IsRetail: Boolean indicating if this type is for retail customers
         *     - IsMedical: Boolean indicating if this type is for medical patients
         *
         *     **Common Use Cases:**
         *     - Populate dropdown/selection lists for customer type in registration forms
         *     - Ensure customers are assigned to valid, location-specific types for compliance validation
         *     - Configure point-of-sale systems with available customer categories
         *     - Configure online ordering systems with proper customer types for e-commerce setup
         *     - Understand customer type structure for reporting classification and analytics
         *     - Validate customer type IDs before creating/updating customers
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Customer types rarely change; safe to cache for several hours
         *     - Small dataset suitable for client-side caching
         *     - Location-specific results based on API key access
         *
         *     **Integration Workflow:**
         *     1. Call this endpoint to get available customer types for your location
         *     2. Present options to users in registration/update forms
         *     3. Use selected Id in POST /customer requests as CustomerTypeId
         *     4. Implement validation to ensure selected type is valid for your location
         *
         *     **Related Endpoints:**
         *     - `POST /customer` - Create customers using these customer type IDs
         *     - `GET /customer/customers` - Get customers with their assigned types
         *     - `GET /customer/referral-sources` - Get referral source reference data
         *
         *     **Important Notes:**
         *     - Customer types are location-specific and may vary between dispensary locations
         *     - Only returns customer types enabled for your specific location
         *     - Results automatically filtered based on your API key's location access
         *     - Use Name field for user-facing displays, Id for API calls
         *     - Use IsRetail/IsMedical flags for business rule implementation and compliance logic
         */
        get: operations["CustomerCustomer-typesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/referral-sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Referral Sources
         * @description **Purpose:** Retrieve the complete list of referral sources available system-wide, used for tracking customer acquisition and marketing campaign effectiveness.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of string values representing available referral source options
         *     - Response format: `["string", "string", ...]`
         *     - Array typically contains 10-20 predefined referral sources
         *     - Returns empty array `[]` if no referral sources configured (rare)
         *     - Examples include: "Google", "Facebook", "Word of Mouth", "Print Ad", "Radio", "TV", "Yelp", "Instagram"
         *     - Standardized list ensures consistent marketing attribution across all locations
         *     - System-wide reference data for marketing tracking
         *
         *     **Common Use Cases:**
         *     - Populate "How did you hear about us?" dropdown fields in customer registration
         *     - Track which channels are driving customer acquisition for marketing attribution
         *     - Measure effectiveness of different marketing strategies for campaign analysis
         *     - Ensure valid referral source selection in customer profiles for form validation
         *     - Feed data into marketing analytics and reporting systems for analytics integration
         *     - Connect customer acquisition costs to specific marketing channels for ROI tracking
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Referral sources change infrequently; safe to cache for extended periods
         *     - Small static dataset suitable for client-side caching
         *     - Consistent across all organizations and locations
         *
         *     **Integration Workflow:**
         *     1. Call this endpoint to get available referral source options
         *     2. Present options in customer registration or profile update forms
         *     3. Include selected value when creating/updating customers (if supported)
         *     4. Use for reporting to analyze customer acquisition patterns
         *
         *     **Marketing Benefits:**
         *     - Attribution tracking to understand which marketing channels are most effective
         *     - Budget allocation optimization based on referral source performance
         *     - Campaign ROI measurement for different marketing campaigns
         *     - Customer insights to learn how customers discover your dispensary
         *
         *     **Related Endpoints:**
         *     - `POST /customer` - Create customers with referral source information
         *     - `GET /customer/customer-types` - Get customer type reference data
         *     - `GET /customer/customers` - Get customers with their referral source data
         *
         *     **Important Notes:**
         *     - Returns system-wide referral sources for consistent reporting across all locations
         *     - Consider adding "Other" or "Prefer not to say" options in your UI implementation
         *     - Use these values to populate selection lists in customer forms
         *     - Validate referral source values against this list before submitting customer data
         *     - Essential for marketing analytics and customer acquisition tracking
         */
        get: operations["CustomerReferral-sourcesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update Customer
         * @description **Purpose:** Create new customer profiles or update existing customer information for dispensary operations and e-commerce integration.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - `EcomCustomerEdit` object in request body with customer details
         *     - Content-Type: application/json
         *     - Optional query parameter to bypass deduplication
         *     - **Idempotency Support**: Requires `ConsumerKey` header and `IdempotencyKey` field for duplicate prevention (see [Idempotency Documentation](/pages/idempotency.html))
         *
         *     **Response Data:**
         *     - Returns single `Customer` object (not array) with assigned system ID
         *     - Response format: `{ Customer }`
         *     - Includes loyalty program enrollment and qualification status
         *     - Provides both internal and external system identifiers
         *     - Contains full customer profile with contact and address information
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When `CustomerId` is null, 0, or omitted, a new customer record will be created
         *     - **UPDATE**: When `CustomerId` is provided with a valid customer ID, the existing customer will be updated
         *     - **Validation**: FirstName, Address1, City, State, PostalCode, Status, and CustomerType are required
         *     - **Deduplication**: Create operations include smart duplicate detection unless bypassed with query parameter
         *
         *     **Request Body Format:**
         *     - For new customers: Leave `CustomerId` null or 0 (will be auto-generated)
         *     - For updates: Include the `CustomerId` in the request
         *     - FirstName is required (Name will be used as FirstName if FirstName is empty)
         *     - Address1, City, State, PostalCode are required for address information
         *     - Status and CustomerType are required for customer classification
         *
         *     **Optional Fields:**
         *     - DateOfBirth (must be between 1800-01-01 and current date)
         *     - LastName, MiddleName, NameSuffix, NamePrefix for name information
         *     - Address2 for additional address details
         *     - Phone, EmailAddress for contact information
         *     - EcomUserId for external e-commerce system identifier
         *     - UniqueId for external system integration
         *
         *     **Sparse Update Behavior:**
         *     - **Provided fields**: Will overwrite existing values with provided data
         *     - **Omitted fields**: Will preserve existing values (no data loss for updates)
         *     - **Special handling**: Name field will be used as FirstName if FirstName is omitted during updates
         *     - **Validation**: Required fields for updates are more relaxed than for new customer creation
         *
         *     **Smart Deduplication System:**
         *     - Default behavior automatically searches for existing customers with matching details
         *     - Helps prevent creating multiple records for the same person
         *     - Use `bypassDeduplication=true` to force creation of new customer record
         *
         *     **Common Use Cases:**
         *     - Sync customer profiles from online ordering platforms for e-commerce integration
         *     - Create new customer accounts during in-store visits and walk-in registration
         *     - Update existing customer contact and address information
         *     - Add customers to dispensary loyalty and rewards programs
         *     - Maintain customer records for regulatory compliance requirements
         *     - Synchronize customer data with external customer relationship management systems
         *
         *     **Performance & Limits:**
         *     - Rate limited to 1500 requests per minute (higher limit for high-volume customer operations)
         *     - Single customer operation for targeted updates
         *     - Immediate validation and duplicate detection
         *     - Changes are reflected immediately in customer listings
         *     - Smart matching algorithms optimize deduplication performance
         *
         *     **Related Endpoints:**
         *     - `POST /customerLookup` - Find existing customers by various search criteria
         *     - `POST /search` - Search customers by name, phone, or email for quick lookup
         *     - `GET /by-external-id` - Retrieve customers using external system identifiers
         *     - `GET /customers` - List all customers with optional filtering
         *
         *     **Important Notes:**
         *     - Date of birth must be realistic (between 1800 and current date) for age verification
         *     - Smart matching helps prevent multiple records for the same person
         *     - Some fields may be required based on location-specific compliance regulations
         *     - System validates contact information format and completeness for data quality
         */
        post: operations["CustomerCustomerPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/customerLookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CustomerCustomerLookupPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Customer Search (PREVIEW)
         * @description **NOTE - THIS ENDPOINT IS CURRENTLY IN PREVIEW - IT MAY UNDERGO BREAKING CHANGES IN UPCOMING RELEASES**
         *
         *
         *     **Purpose:** Search for customers using multiple criteria with flexible matching to support customer identification and lookup workflows.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - `CustomerSearchRequest` object in request body with search criteria
         *     - Content-Type: application/json
         *     - At least one search criterion must be provided
         *     - Rate limited to 360 requests per minute
         *
         *     **Response Data:**
         *     - Returns array of `CustomerSearchResult` objects with matching customer information
         *     - Response format: `[{ CustomerSearchResult }, ...]`
         *     - Array may contain 0 to 100+ customers depending on search criteria specificity
         *     - Returns empty array `[]` if no customers match search criteria (not null)
         *     - Same customer may appear multiple times with different match types
         *     - Includes match type information to identify which criteria matched
         *     - Results automatically filtered to authenticated location
         *
         *     **Search Criteria (Independent Matching):**
         *     - **MMJ ID**: Medical marijuana patient identification number
         *     - **Drivers License ID**: State-issued driver's license number
         *     - **Email Address**: Customer's email address (exact match)
         *     - **Phone Number**: Customer's phone number (normalized matching)
         *     - **LastName + DateOfBirth**: Combined name and birth date search (both required together)
         *
         *     **Search Behavior:**
         *     - **Independent Fields**: Most fields are searched independently
         *     - **Combined Fields**: LastName and DateOfBirth must be used together
         *     - **Multiple Matches**: Same customer may appear with different match types
         *     - **Location Scoped**: Results filtered to authenticated location only
         *     - **Case Sensitivity**: Email and name searches are case-insensitive
         *
         *     **Common Use Cases:**
         *     - Find customers during check-in process for identification verification
         *     - Locate existing customer records before creating new accounts
         *     - Search for customers using partial or alternative identification methods
         *     - Verify customer identity using multiple data points
         *     - Support customer service lookup workflows
         *
         *     **Performance & Limits:**
         *     - Rate limited to 360 requests per minute for system protection
         *     - Optimized for common customer lookup patterns
         *     - Results limited to reasonable set size for performance
         *     - Indexed searches for fast response times
         *
         *     **Related Endpoints:**
         *     - `POST /customer/customerLookup` - Single customer lookup with hierarchy
         *     - `GET /customer/customers` - List all customers with filtering
         *     - `POST /customer/customer` - Create or update customer records
         *
         *     **Important Notes:**
         *     - **PREVIEW STATUS**: This endpoint may undergo breaking changes in future releases
         *     - **Multiple Results**: Same customer can appear multiple times with different match types
         *     - **Location Filtering**: Results are automatically scoped to your authenticated location
         *     - **Rate Limiting**: 360 requests per minute limit applies for system stability
         *     - **Validation**: At least one search criterion must be provided in the request
         */
        post: operations["CustomerSearchPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/by-external-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CustomerBy-external-idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer-journal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Customer Journal Entries
         * @description **Purpose:** Retrieves all journal entries (notes/comments) associated with a specific customer for customer service and account management.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - Customer ID query parameter required
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of journal entry objects: `[{ JournalEntry }, ...]`
         *     - Array may contain 0 to 100+ entries depending on customer interaction history
         *     - Returns empty array `[]` if no journal entries exist for customer (not null)
         *     - Includes entry ID, subject, body, and date
         *     - Results filtered by customer accessibility to authenticated location
         *
         *     **Common Use Cases:**
         *     - View interaction history and notes about a customer for customer service
         *     - Review previous communications and issues for account management
         *     - Maintain audit trail of customer interactions for compliance
         *     - Track resolution history and follow-ups for support tickets
         *
         *     **Performance & Limits:**
         *     - Efficient retrieval for individual customer journal histories
         *     - Results scoped to specific customer and location
         *     - No pagination needed for typical journal entry volumes
         *
         *     **Related Endpoints:**
         *     - `POST /customer-journal/create` - Create new journal entries
         *     - `POST /customer-journal/update` - Update existing journal entries
         *
         *     **Important Notes:**
         *     - Customer ID must exist and be accessible to your location
         *     - Requires customer validation before retrieving entries
         *     - Entries are returned in database order (not explicitly sorted)
         */
        get: operations["Customer-journalGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer-journal/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Customer Journal Entry
         * @description **Purpose:** Updates an existing journal entry's date, subject, and/or body content for customer service record management.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - `UpdateJournalEntryRequest` object in request body
         *     - Content-Type: application/json
         *     - Journal entry must exist and be accessible to your location
         *
         *     **Response Data:**
         *     - Returns journal entry object: `{ JournalEntry }`
         *     - Includes entry ID, updated subject, body, and date
         *     - Confirms successful update with complete entry details
         *
         *     **Request Body Fields:**
         *     - JournalEntryId: The ID of the journal entry to update (required)
         *     - Subject: New title or summary for the entry (required)
         *     - Body: New detailed content for the entry (required)
         *     - Date: New date for the entry (required)
         *
         *     **Update Behavior:**
         *     - **All fields required**: JournalEntryId, Subject, Body, and Date must all be provided
         *     - **Complete replacement**: All entry fields will be updated with provided values
         *     - **Validation**: Entry must exist and be accessible to your location
         *
         *     **Common Use Cases:**
         *     - Fix typos or errors in previously created entries for correction
         *     - Add more details to existing notes for additional information
         *     - Update resolution status or follow-up information for status updates
         *     - Modify entries to meet regulatory requirements for compliance updates
         *
         *     **Performance & Limits:**
         *     - Single entry update operation for targeted modifications
         *     - Immediate validation and response
         *     - Changes reflected immediately in journal entry lists
         *
         *     **Related Endpoints:**
         *     - `GET /customer-journal` - Retrieve journal entries for a customer
         *     - `POST /customer-journal/create` - Create new journal entries
         *
         *     **Important Notes:**
         *     - Journal entry must exist and be accessible to your location
         *     - Validation performed before update to ensure data integrity
         *     - All request fields are required for successful update
         */
        post: operations["Customer-journalUpdatePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer-journal/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Customer Journal Entry
         * @description **Purpose:** Creates a new journal entry (note/comment) for a specific customer to maintain interaction records and customer service history.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for customer data operations
         *     - `CreateJournalEntryRequest` object in request body
         *     - Content-Type: application/json
         *     - Customer must exist and be accessible to your location
         *
         *     **Response Data:**
         *     - Returns journal entry object: `{ JournalEntry }`
         *     - Includes assigned entry ID, subject, body, and date
         *     - Confirms successful creation with complete entry details
         *
         *     **Request Body Fields:**
         *     - CustomerId: The customer to create the journal entry for (required)
         *     - Subject: Brief title or summary of the entry (required)
         *     - Body: Detailed content of the journal entry (required)
         *     - Date: When this entry should be dated (required)
         *
         *     **Common Use Cases:**
         *     - Record interaction details and resolutions for customer service notes
         *     - Document changes to customer information for account updates
         *     - Log problems and their resolution status for issue tracking
         *     - Maintain required interaction records for compliance documentation
         *     - Schedule future contact or actions for follow-up reminders
         *
         *     **Performance & Limits:**
         *     - Single entry creation operation for immediate record keeping
         *     - Immediate validation and creation
         *     - New entries appear immediately in journal entry lists
         *
         *     **Related Endpoints:**
         *     - `GET /customer-journal` - Retrieve journal entries for a customer
         *     - `POST /customer-journal/update` - Update existing journal entries
         *
         *     **Important Notes:**
         *     - Customer must exist and be accessible to your location
         *     - Validation performed before creation to ensure data integrity
         *     - All request fields are required for successful creation
         */
        post: operations["Customer-journalCreatePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Deliveries
         * @description **Purpose:** Retrieve delivery status information and order details for cannabis delivery operations and tracking.
         *
         *     **Request Requirements:**
         *     - "Deliveries" role authorization required for delivery data access
         *     - Optional query parameters for filtering and data inclusion
         *     - Rate limited to 100 requests per minute
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of delivery objects: `[{ DeliveryOrderStatus }, ...]`
         *     - Array may contain 0 to 100+ deliveries depending on filtering criteria
         *     - Returns empty array `[]` if no deliveries match criteria (not null)
         *     - Delivery status, timing, and location information included
         *     - Optional line item details when includeLineItems=true
         *     - Results automatically filtered to authenticated location
         *
         *     **Query Parameters:**
         *     - PreOrderId: Get delivery status for a specific pre-order (optional)
         *     - TransactionId: Get delivery status for a specific transaction (optional)
         *     - transactionIds: Get delivery status for multiple transactions (optional array)
         *     - deliveryStatus: Filter by delivery status (optional)
         *     - includeLineItems: Include detailed line item data (default: false)
         *
         *     **Parameter Rules:**
         *     - **Mutually Exclusive**: Use only ONE of PreOrderId, TransactionId, transactionIds, or deliveryStatus
         *     - **Default Behavior**: If no parameters provided, returns all open deliveries from last 14 days
         *     - **Open Definition**: Status of 'filled' or 'received' within the last 14 days
         *     - **Line Items**: Only available for packages assigned to orders, not unassigned pre-order items
         *
         *     **Delivery Status Values:**
         *     - **Placed**: Order has been placed but not yet processed
         *     - **Filled**: Order has been fulfilled and packaged for delivery
         *     - **Received**: Order has been received by delivery team
         *     - **In Transit**: Order is currently being delivered
         *     - **Delivered**: Order has been successfully delivered to customer
         *     - **Cancelled**: Order has been cancelled
         *
         *     **Common Use Cases:**
         *     - Monitor delivery status for customer service and tracking
         *     - Generate delivery reports for operational management
         *     - Track order fulfillment and delivery performance
         *     - Provide delivery updates to customers and delivery teams
         *     - Integrate with third-party delivery tracking systems
         *
         *     **Performance & Limits:**
         *     - Rate limited to 100 requests per minute for system protection
         *     - Optimized for delivery tracking and status monitoring
         *     - Line item data loading is conditional for performance
         *     - Results filtered to location scope for operational relevance
         *
         *     **Related Endpoints:**
         *     - `POST /deliveries/set-route-detail` - Update delivery route and driver information
         *     - `GET /drivers` - Get available drivers for delivery assignments
         *     - `GET /preorder` - Get pre-order information that may become deliveries
         *
         *     **Important Notes:**
         *     - **Exclusive Parameters**: Only use one filtering parameter at a time
         *     - **Line Item Limitation**: Line items only shown for assigned packages, not pre-order items
         *     - **Time Window**: Default query covers last 14 days of open deliveries
         *     - **Rate Limiting**: 100 requests per minute limit for delivery tracking operations
         *     - **Status Tracking**: Provides real-time delivery status for customer and operational visibility
         */
        get: operations["DeliveriesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Deliveries/set-route-detail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Delivery Route Detail
         * @description **Purpose:** Update delivery route information including vehicle, driver assignments, route details, and delivery status for operational management.
         *
         *     **Request Requirements:**
         *     - "Deliveries" role authorization required for delivery operations
         *     - `UpdateDeliveryRouteDetailRequest` object in request body with route details
         *     - Content-Type: application/json
         *     - Rate limited to 100 requests per minute
         *     - Valid delivery ID must exist and be accessible to your location
         *
         *     **Response Data:**
         *     - Returns success confirmation (HTTP 200) upon successful update
         *     - No response body content (void return)
         *     - Route details are validated and stored for delivery operations
         *
         *
         *     **Request Body Fields:**
         *     - TransactionId: The delivery transaction to update (required)
         *     - DriverId: Primary driver assignment for the delivery (optional)
         *     - DriverId2: Secondary driver assignment for the delivery (optional)
         *     - VehicleId: Vehicle assigned to the delivery (optional)
         *     - Route: Route information or notes (optional)
         *     - Status: Delivery status update (optional)
         *
         *     **Route Detail Updates:**
         *     - **Vehicle Assignment**: Set vehicle ID for the delivery
         *     - **Driver Assignment**: Assign primary and optional secondary drivers
         *     - **Route Information**: Update route notes or details
         *     - **Status Updates**: Modify delivery status
         *
         *     **Common Use Cases:**
         *     - Assign delivery vehicles and drivers to pending orders
         *     - Update delivery routes for optimal efficiency and timing
         *     - Modify delivery status as orders progress through fulfillment
         *     - Reassign deliveries to different drivers or vehicles
         *     - Update delivery information for customer tracking and notifications
         *
         *     **Performance & Limits:**
         *     - Rate limited to 100 requests per minute for system protection
         *     - Single delivery operation for targeted route updates
         *     - Immediate validation and storage of route information
         *     - Changes propagate to delivery tracking systems immediately
         *
         *     **Related Endpoints:**
         *     - `GET /deliveries` - Retrieve current delivery status and information
         *     - `GET /drivers` - Get available drivers for delivery assignments
         *     - `GET /preorder` - Access pre-order information for delivery preparation
         *
         *     **Important Notes:**
         *     - **Driver and Vehicle IDs**: Must reference valid drivers and vehicles in the system
         *     - **Validation**: Request fields are validated before processing updates
         *     - **Status Tracking**: Updates enable delivery tracking for operations
         *     - **Rate Limiting**: 100 requests per minute limit for delivery management operations
         */
        post: operations["DeliveriesSet-route-detailPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Discounts (Legacy)
         * @description **Purpose:** Retrieves basic discount information using the legacy data structure with limited configuration details.
         *
         *     **LEGACY WARNING:** This endpoint is deprecated. Migrate to `GET /discounts/v2/list` for complete functionality.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for discount data access
         *     - Optional query parameters for filtering
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of `PublishedDiscount` objects with basic discount information
         *     - Array typically contains 5-50 discounts per location depending on active promotions
         *     - Returns empty array `[]` if no discounts are active or configured
         *     - Validity dates are converted from Eastern Time to UTC in response
         *     - Automatically excludes "Loyalty Multiplier" discount types
         *     - Results are filtered by the authenticated location
         *
         *     **Key Limitations vs V2:**
         *     - Basic response model with limited discount information
         *     - Missing detailed reward and constraint configuration
         *     - Does not support advanced discount capabilities
         *     - Simple inclusion/exclusion data structure only
         *
         *     **Common Use Cases:**
         *     - Legacy system integrations that cannot be updated immediately
         *     - Basic discount display when minimal information is sufficient
         *     - Temporary implementations before V2 migration
         *
         *     **Performance & Limits:**
         *     - Lightweight response for basic discount listing
         *     - Filtered results improve response time
         *     - Consider V2 endpoint for comprehensive discount data
         *
         *     **Related Endpoints:**
         *     - `GET /discounts/v2/list` - Recommended enhanced endpoint with complete configuration
         *
         *     **Important Notes:**
         *     - This endpoint is deprecated and may be removed in future versions
         *     - New integrations should use the V2 endpoint
         *     - Date conversion assumes Eastern Time input, converts to UTC output
         */
        get: operations["DiscountsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/v2/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Discounts V2 (Recommended)
         * @description **Purpose:** Retrieves comprehensive discount information including detailed reward configuration, payment restrictions, and advanced bundling logic.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for discount data access
         *     - Optional query parameters for enhanced data inclusion
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of `DiscountApiResponse` objects with complete discount configuration
         *     - Array typically contains 5-50 discounts per location depending on active promotions
         *     - Returns empty array `[]` if no discounts are active or configured
         *     - Validity dates are converted from Eastern Time to UTC in response
         *     - Includes detailed reward structure and constraint details
         *     - Results are filtered by the authenticated location
         *
         *     **Enhanced Features vs Legacy:**
         *     - Complete response model with detailed discount configuration
         *     - Full discount reward structure and constraint details
         *     - Payment method restrictions (credit card, cash, etc.)
         *     - Advanced bundle discount logic and stacking configuration
         *     - E-commerce menu display configuration and ranking
         *     - Optimized data retrieval and processing
         *
         *     **Common Use Cases:**
         *     - New discount integrations requiring complete configuration data
         *     - E-commerce systems needing full discount logic implementation
         *     - Point-of-sale systems requiring comprehensive discount rules
         *     - Advanced analytics and discount performance analysis
         *     - Payment processing systems validating payment method restrictions
         *
         *     **Performance & Limits:**
         *     - Single request retrieves all discount data efficiently
         *     - Optimized processing for large discount configurations
         *     - Consider parameter filtering to reduce response size when needed
         *
         *     **Related Endpoints:**
         *     - `GET /discounts` - Legacy endpoint with basic discount information (deprecated)
         *
         *     **Important Notes:**
         *     - This is the recommended endpoint for all new integrations
         *     - Includes latest discount capabilities and improvements
         *     - Date conversion assumes Eastern Time input, converts to UTC output
         */
        get: operations["DiscountsV2ListGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/drivers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Drivers
         * @description **Purpose:** Retrieves the complete list of drivers for the authenticated location for delivery operations and transportation management.
         *
         *     **Request Requirements:**
         *     - "Reporting" or "Deliveries" role authorization required for driver data access
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ DriverDetail }, { DriverDetail }, ...]`
         *     - Array typically contains 2-20 drivers per location
         *     - Returns empty array `[]` if no drivers configured for location
         *     - Includes driver ID, name, state ID, and driver's license number
         *     - Location-specific driver roster for delivery and transportation operations
         *
         *     **Common Use Cases:**
         *     - Populate driver dropdown lists in delivery assignment systems
         *     - Support delivery operations and route management workflows
         *     - Validate driver assignments in delivery and transportation systems
         *     - Access basic driver information for compliance and operational purposes
         *
         *     **Performance & Limits:**
         *     - Location-specific driver data filtered to authenticated location
         *     - No pagination needed for typical location driver counts
         *     - Optimized for delivery operations and transportation management
         *
         *     **Related Endpoints:**
         *     - `POST /drivers` - Create or update driver information
         *     - `GET /deliveries` - Get deliveries that may be assigned to these drivers
         *     - Delivery and transportation endpoints that utilize driver assignments
         *
         *     **Important Notes:**
         *     - Drivers are scoped to location level for operational relevance
         *     - Requires Reporting or Deliveries role for access to driver information
         *     - Essential for delivery operations and transportation compliance
         *     - Driver information includes basic licensing information
         *     - Used for delivery assignment and route management
         */
        get: operations["DriversGet"];
        put?: never;
        /**
         * Create or Update Driver
         * @description **Purpose:** Creates a new driver or updates existing driver information for delivery operations and transportation management.
         *
         *     **Request Requirements:**
         *     - "Reporting" or "Deliveries" role authorization required for driver data operations
         *     - `DriverDetail` object in request body with driver information
         *     - Content-Type: application/json
         *     - Driver data must pass validation requirements
         *
         *     **Response Data:**
         *     - Response format: `200 OK` (no response body)
         *     - Returns success confirmation upon successful creation or update
         *     - Driver information is validated and stored for operational use
         *     - Updates reflected immediately in driver listings and assignments
         *
         *     **Request Body Fields:**
         *     - DriverId: Driver identifier for updates (0 for new drivers)
         *     - Name: Driver's full name (required)
         *     - StateId: State identifier for licensing (optional)
         *     - DriversLicense: Driver's license number (required)
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When DriverId is 0 or omitted, creates a new driver record
         *     - **UPDATE**: When DriverId is provided with valid driver ID, updates existing driver
         *     - **Validation**: All provided data must pass driver validation requirements
         *
         *     **Common Use Cases:**
         *     - Add new drivers to the delivery team for expanding operations
         *     - Update existing driver information when licenses or details change
         *     - Maintain accurate driver records for compliance and operational purposes
         *     - Support driver onboarding and management workflows
         *
         *     **Performance & Limits:**
         *     - Single driver operation for targeted updates
         *     - Immediate validation and storage
         *     - Changes reflected immediately in driver listings
         *     - Location-scoped driver management for operational relevance
         *
         *     **Related Endpoints:**
         *     - `GET /drivers` - Retrieve current driver information
         *     - `GET /deliveries` - Get deliveries that may be assigned to drivers
         *     - Delivery management endpoints that utilize driver assignments
         *
         *     **Important Notes:**
         *     - Driver information must pass validation before storage
         *     - Drivers are scoped to location level for operational management
         *     - Essential for delivery operations and transportation compliance
         *     - Basic licensing information required for compliance
         *     - Changes immediately available for delivery assignment and scheduling
         */
        post: operations["DriversPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Employees
         * @description **Purpose:** Retrieves the complete list of employees for the authenticated organization for staff management and operational workflows.
         *
         *     **Request Requirements:**
         *     - "Employee" role authorization required for employee data access
         *     - No query parameters or request body needed
         *     - Rate limited to 300 requests per minute
         *
         *     **Response Data:**
         *     - Returns array of employee objects: `[{ Employee }, ...]`
         *     - Array typically contains 5-100 employees per organization
         *     - Returns empty array `[]` if no employees configured (rare)
         *     - Includes employee ID, name, location assignments, and permission details
         *     - Organization-level employee directory filtered to authenticated organization
         *     - Staff information for operational and management purposes
         *
         *     **Common Use Cases:**
         *     - Populate employee dropdown lists in scheduling and assignment systems
         *     - Support staff management and operational workflow assignments
         *     - Generate employee directories and contact lists for internal use
         *     - Validate employee assignments in transaction and operational systems
         *     - Enable staff-based reporting and analytics for management
         *     - Support payroll and HR integration systems
         *
         *     **Performance & Limits:**
         *     - Rate limited to 300 requests per minute for optimal performance
         *     - Organization-level employee data filtered to authenticated organization
         *     - No pagination needed for typical organization employee counts
         *     - Optimized for internal operational and management use cases
         *
         *     **Related Endpoints:**
         *     - Transaction endpoints that may reference employee assignments
         *     - Operational endpoints that utilize employee information
         *     - Reporting endpoints that include employee-based analytics
         *
         *     **Important Notes:**
         *     - Employees are scoped to organization level (LSP) for data security
         *     - Requires Employee role authorization for access to sensitive staff information
         *     - Rate limiting enforced to protect employee data and system performance
         *     - Essential for staff management and operational workflow support
         *     - Employee information may be used for transaction tracking and audit trails
         *     - Supports internal operational systems and management workflows
         */
        get: operations["EmployeesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/guestlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Guest List (Active Check-ins)
         * @description **Purpose:** Retrieves a real-time list of customers currently checked into the dispensary location for queue management and customer service.
         *
         *     **Request Requirements:**
         *     - "Customer" role authorization required for guest management functions
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of guest objects: `[{ GuestListEntry }, ...]`
         *     - Array typically contains 0-50 active guests depending on current business volume
         *     - Returns empty array `[]` if no customers are currently checked in
         *     - Customer details including name, customer ID, customer type, and contact information
         *     - Check-in status with current status and check-in timestamp in UTC
         *     - Transaction data with associated transaction ID and reference number
         *     - Terminal information showing POS terminal name where check-in occurred
         *     - Pre-order source indicating origin of the order (online, walk-in, etc.)
         *     - Returns only guests checked into the authenticated location
         *
         *     **Data Filtering:**
         *     - Real-time data showing only currently active check-ins
         *     - Guests who have completed their visit and checked out will not appear
         *     - Automatically excludes guests in hidden rooms (administrative areas)
         *     - Automatically excludes guests in on-hold rooms (temporary holding areas)
         *     - Results filtered to show only the most recent check-in per customer
         *
         *     **Common Use Cases:**
         *     - Monitor current guest queue and wait times for queue management
         *     - Display active customers for budtender assignment on staff dashboards
         *     - Maintain records of dispensary occupancy for compliance tracking
         *     - Identify guests and their order status for customer service
         *     - Track check-in patterns and peak hours for analytics
         *
         *     **Performance & Limits:**
         *     - Data optimized for real-time display applications
         *     - Consider implementing appropriate polling intervals for your use case
         *     - Live data reflects current check-in status immediately
         *     - Efficient filtering for large guest lists
         *
         *     **Related Endpoints:**
         *     - `POST /transaction/create-anonymous` - Create anonymous customer check-ins
         *
         *     **Important Notes:**
         *     - All timestamps are returned in UTC format for consistent processing across time zones
         *     - Only shows currently active check-ins; completed visits are excluded
         *     - Location-specific data filtered to authenticated dispensary location
         *     - Requires customer role authorization for access to guest management functions
         */
        get: operations["GuestlistGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Harvests
         * @description **Purpose:** Retrieve harvest records for cannabis cultivation operations including tracking, compliance, and operational management.
         *
         *     **Request Requirements:**
         *     - Either "Inventory" or "Cultivation" role required for harvest data access
         *     - Optional query parameters for filtering and date range selection
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of `Harvest` objects with comprehensive harvest information
         *     - Array may contain 0 to 1,000+ harvests depending on cultivation scale and filtering
         *     - Returns empty array `[]` if no harvests match criteria (not null)
         *     - Results ordered by last modified date (most recent first)
         *     - Harvest details include timing, quantities, strain information, and compliance data
         *     - Results automatically filtered to authenticated location
         *
         *     **Filtering Options:**
         *     - fromLastModifiedDateUTC: Returns harvests modified after this date for incremental sync
         *     - toLastModifiedDateUTC: Returns harvests modified before this date for date range filtering
         *     - activeHarvests: Filter by harvest status (true=active, false=completed, null=completed only)
         *
         *     **Harvest Status Definitions:**
         *     - **Active Harvests**: Currently in progress, not yet completed or processed
         *     - **Completed Harvests**: Finished harvest operations, ready for processing or completed
         *     - **Default Behavior**: Returns completed harvests only when activeHarvests parameter is null
         *
         *     **Common Use Cases:**
         *     - Monitor harvest progress and completion status for cultivation management
         *     - Generate harvest reports for compliance and regulatory reporting
         *     - Track harvest yields and timing for operational optimization
         *     - Synchronize harvest data with cultivation management systems
         *     - Support inventory management and product traceability requirements
         *
         *     **Performance & Limits:**
         *     - Optimized for cultivation tracking and harvest management workflows
         *     - Date range filtering recommended for large cultivation operations
         *     - Results sorted by modification date for chronological tracking
         *     - Location-scoped results for operational relevance and security
         *
         *     **Related Endpoints:**
         *     - `POST /harvest` - Create or update individual harvest records
         *     - `POST /harvest/bulk` - Create or update multiple harvests efficiently
         *     - `GET /inventory` - View products created from harvest operations
         *     - Plant and cultivation tracking endpoints for complete workflow
         *
         *     **Important Notes:**
         *     - **Default Filter**: Returns completed harvests only unless activeHarvests parameter is specified
         *     - **Date Filtering**: Use date parameters for incremental sync and performance optimization
         *     - **Compliance Tracking**: Harvest records support cannabis regulatory compliance requirements
         *     - **Cultivation Integration**: Links with plant tracking and inventory management systems
         *     - **Yield Tracking**: Provides harvest quantity and quality data for operational analytics
         */
        get: operations["HarvestGet"];
        put?: never;
        /**
         * Create or Update Harvest
         * @description **Purpose:** Create a new harvest record or update an existing harvest with comprehensive cultivation data for compliance tracking and operational management.
         *
         *     **Request Requirements:**
         *     - "CultivationWrite" role authorization required for harvest data operations
         *     - `CreateOrUpdateHarvest` object in request body with harvest details
         *     - Content-Type: application/json
         *     - Plant and strain information must be valid and accessible to your location
         *
         *     **Response Data:**
         *     - Returns single integer harvest ID (not array) for the created or updated harvest
         *     - New harvests receive newly assigned harvest ID
         *     - Updated harvests return the existing harvest ID
         *     - ID can be used for subsequent harvest operations and tracking
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When HarvestId is null or omitted, a new harvest record will be created
         *     - **UPDATE**: When HarvestId is provided with a valid harvest ID, the existing harvest will be updated
         *     - **Validation**: Plant and strain data must be valid for both create and update operations
         *     - **Compliance**: All harvest data must meet cannabis regulatory requirements
         *
         *     **Request Body Fields:**
         *     - HarvestId: ID for updates (null for new harvests)
         *     - Plant identification and tracking information
         *     - Harvest timing and scheduling details
         *     - Yield quantities and measurement data
         *     - Strain and genetic information
         *     - Compliance and regulatory tracking data
         *
         *     **Sparse Update Behavior:**
         *     - **Provided fields**: Will overwrite existing values with provided data
         *     - **Omitted fields**: Will preserve existing values (no data loss for updates)
         *     - **Special handling**: Plant and strain associations require valid references
         *     - **Validation**: All provided data must meet cultivation and compliance standards
         *
         *     **Common Use Cases:**
         *     - Record new harvest operations as plants are processed
         *     - Update harvest records with final yield and quality data
         *     - Maintain compliance with cannabis cultivation tracking requirements
         *     - Track harvest timing and efficiency for operational optimization
         *     - Link harvests to plant tracking and inventory management systems
         *
         *     **Performance & Limits:**
         *     - Single harvest operation for targeted tracking
         *     - Immediate validation and compliance checking
         *     - Changes reflected immediately in harvest listings and reporting
         *     - Optimized for cultivation workflow integration
         *
         *     **Related Endpoints:**
         *     - `GET /harvest` - Retrieve harvest records for review and tracking
         *     - `POST /harvest/bulk` - Create or update multiple harvests efficiently
         *     - Plant tracking endpoints for complete cultivation workflow
         *     - `GET /inventory` - View products created from harvest operations
         *
         *     **Important Notes:**
         *     - **Compliance Critical**: Harvest records are required for cannabis regulatory compliance
         *     - **Plant Tracking**: Must link to valid plant records for traceability
         *     - **Yield Accuracy**: Accurate yield data is essential for inventory and compliance
         *     - **Timing Tracking**: Harvest dates and timing support compliance reporting
         *     - **Bulk Alternative**: Use POST /harvest/bulk for multiple harvest operations
         */
        post: operations["HarvestPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvest/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk Create or Update Harvests
         * @description **Purpose:** Create or update multiple harvest records in a single operation for efficient cultivation data management and compliance tracking.
         *
         *     **Request Requirements:**
         *     - "CultivationWrite" role authorization required for harvest data operations
         *     - `BulkCreateOrUpdateHarvest` object in request body with array of harvest details
         *     - Content-Type: application/json
         *     - All plant and strain information must be valid and accessible to your location
         *     - Request validation performed before any operations are executed
         *
         *     **Response Data:**
         *     - Returns single `BulkCreateOrUpdateHarvestResponse` object (not array) with operation results
         *     - CreatedHarvestIds: Array of newly created harvest IDs
         *     - UpdatedHarvestIds: Array of updated harvest IDs
         *     - Success message confirming completion of operations
         *     - All operations are atomic - either all succeed or all fail
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When HarvestId is null or omitted in harvest objects, new harvest records will be created
         *     - **UPDATE**: When HarvestId is provided with valid harvest IDs, existing harvests will be updated
         *     - **Mixed Operations**: Single request can include both create and update operations
         *     - **Validation**: All harvest data must pass validation before any operations are executed
         *     - **Atomic Processing**: All operations succeed together or all operations fail together
         *
         *     **Request Body Structure:**
         *     - Harvests: Array of CreateOrUpdateHarvest objects
         *     - Each harvest object contains the same fields as individual harvest operations
         *     - Plant identification, timing, yield, strain, and compliance data for each harvest
         *     - Mixed create (HarvestId=null) and update (HarvestId=provided) operations supported
         *
         *     **Bulk Processing Benefits:**
         *     - **Efficiency**: Process multiple harvests in single API call
         *     - **Performance**: Optimized database operations for large cultivation operations
         *     - **Consistency**: Atomic operations ensure data integrity
         *     - **Compliance**: Batch compliance checking and validation
         *     - **Convenience**: Simplifies integration for cultivation management systems
         *
         *     **Common Use Cases:**
         *     - Process multiple harvest operations from cultivation management systems
         *     - Synchronize harvest data between external systems and LeafLogix
         *     - Update multiple harvest records with final yield and quality data
         *     - Import harvest data from spreadsheets or external cultivation tracking
         *     - Maintain compliance with cannabis cultivation tracking requirements
         *
         *     **Performance & Limits:**
         *     - Optimized for bulk cultivation data processing
         *     - Atomic transaction processing ensures data consistency
         *     - All validation performed before any operations are executed
         *     - Efficient for large-scale cultivation operations
         *     - Changes reflected immediately in harvest listings and reporting
         *
         *     **Related Endpoints:**
         *     - `GET /harvest` - Retrieve harvest records for review and tracking
         *     - `POST /harvest` - Create or update individual harvest records
         *     - Plant tracking endpoints for complete cultivation workflow
         *     - `GET /inventory` - View products created from harvest operations
         *
         *     **Important Notes:**
         *     - **Atomic Operations**: All harvests in the request succeed or fail together
         *     - **Validation Required**: Complete validation performed before any processing
         *     - **Compliance Critical**: All harvest records must meet cannabis regulatory requirements
         *     - **Plant Tracking**: All harvests must link to valid plant records for traceability
         *     - **Efficiency**: Preferred method for multiple harvest operations
         */
        post: operations["HarvestBulkPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/okcomputer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check Endpoint
         * @description **Purpose:** Provides a simple health check endpoint to verify the API service is running and responsive.
         *
         *     **Request Requirements:**
         *     - No authentication or API key required for infrastructure access
         *     - AllowAnonymous endpoint for monitoring systems
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns health status object: `{ SuccessResult }`
         *     - HTTP 200 status when the service is healthy
         *     - Lightweight JSON response for fast monitoring
         *
         *     **Common Use Cases:**
         *     - Load balancer health checks to route traffic only to healthy instances
         *     - External monitoring services (Pingdom, DataDog) for uptime alerting
         *     - Infrastructure monitoring by DevOps teams for service availability
         *     - Service verification before making other API calls
         *     - Automated health monitoring in deployment pipelines
         *
         *     **Performance & Limits:**
         *     - Designed to respond quickly with minimal system requirements
         *     - No rate limiting applied to health checks
         *     - Minimal dependencies to ensure reliable health indication
         *     - Optimized for frequent polling by monitoring systems
         *
         *     **Related Endpoints:**
         *     - No related endpoints - this is a standalone health check
         *
         *     **Important Notes:**
         *     - This endpoint bypasses normal authentication for infrastructure access
         *     - Designed for automated monitoring and load balancer health checks
         *     - Simple response format optimized for parsing by monitoring tools
         *     - Available on both `/health-check` and `/okcomputer` routes
         */
        get: operations["OkcomputerGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/integration-recon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Inventory Integration Reconciliation
         * @description **Purpose:** Retrieve inventory reconciliation data between LeafLogix and external state tracking systems for compliance and integration monitoring.
         *
         *     **Request Requirements:**
         *     - "Integrations" role authorization required for integration data access
         *     - No query parameters or request body needed
         *     - Integration management permissions for system reconciliation
         *
         *     **Response Data:**
         *     - Returns single `InventoryIntegrationReconResponse` object (not array) with reconciliation results
         *     - Includes inventory discrepancies and integration status information
         *     - State system synchronization details and compliance tracking data
         *     - Integration health and data consistency information
         *
         *     **Reconciliation Information Included:**
         *     - **Inventory Discrepancies**: Items with differences between systems
         *     - **Integration Status**: Current state of external system synchronization
         *     - **Compliance Data**: Regulatory tracking and audit trail information
         *     - **Sync Health**: Integration system connectivity and data flow status
         *
         *     **Common Use Cases:**
         *     - Monitor inventory synchronization between LeafLogix and state tracking systems
         *     - Identify and resolve inventory discrepancies for compliance
         *     - Support compliance audits and regulatory reporting requirements
         *     - Troubleshoot integration issues and data synchronization problems
         *     - Maintain accurate inventory records across integrated systems
         *
         *     **Performance & Limits:**
         *     - Real-time reconciliation data for immediate integration monitoring
         *     - Comprehensive reconciliation across integrated state tracking systems
         *     - Optimized for compliance monitoring and integration management workflows
         *     - Results include comprehensive integration status and discrepancy details
         *
         *     **Related Endpoints:**
         *     - `GET /inventory` - View current inventory status for comparison
         *     - `GET /plant` - Check plant inventory integration status
         *     - `GET /harvest` - Monitor harvest integration synchronization
         *
         *     **Important Notes:**
         *     - **Compliance Critical**: Essential for regulatory compliance and audit requirements
         *     - **Integration Monitoring**: Real-time visibility into external system synchronization
         *     - **Complete Data Access**: Provides comprehensive reconciliation across all integrated systems
         *     - **State System Integration**: Specific to external state tracking system connectivity
         *     - **Audit Ready**: Data formatted for compliance reporting and audit requirements
         */
        get: operations["IntegrationIntegration-reconGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Inventory
         * @description **Purpose:** Retrieve current inventory levels and product details for API-enabled products with available stock.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for inventory data access
         *     - Optional query parameters for enhanced data inclusion
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of `InventoryItem` objects with current stock and product information
         *     - Response format: `[{ InventoryItem }, { InventoryItem }, ...]`
         *     - Array may contain 0 to 5,000+ inventory items depending on location inventory size
         *     - Returns empty array `[]` if no inventory items have stock or meet criteria
         *     - Stock levels including available quantities, unit weights, flower equivalent amounts
         *     - Product details with SKU, name, description, category, brand, pricing (retail/medical)
         *     - Package data including package ID, batch name, package status, expiration dates
         *     - Lab results with potency testing, cannabinoid profiles, test dates (when includeLabResults=true)
         *     - Room breakdown showing quantities by storage location (when includeRoomQuantities=true)
         *     - Compliance data including external package IDs (METRC/BioTrack), strain information, producer details
         *
         *     **Filtering Options:**
         *     - includeLabResults: Include detailed lab testing data and cannabinoid profiles (default: false)
         *     - includeRoomQuantities: Include quantity breakdown by storage room/location (default: false)
         *
         *     **Common Use Cases:**
         *     - Update online store inventory levels and product availability for e-commerce sync
         *     - Perform real-time stock checks during sales transactions for POS integration
         *     - Monitor stock levels across multiple storage locations for inventory management
         *     - Track package-level inventory for regulatory compliance reporting
         *     - Show potency and testing information to customers for lab data display
         *
         *     **Performance & Limits:**
         *     - Response times optimized for high-volume integrations
         *     - Use minimal parameters for fastest response times
         *     - Standard rate limits apply for high-volume integrations
         *     - Data reflects current system state with real-time accuracy
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Complete product catalog regardless of stock levels (use for menu/catalog display)
         *
         *     **Important Notes:**
         *     - Only products enabled for API access are returned for access control
         *     - Products with zero inventory are automatically excluded
         *     - Results automatically filtered to authenticated user's location only
         *     - Inventory data reflects current stock levels with real-time accuracy
         */
        get: operations["InventoryGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/labresults": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InventoryLabresultsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InventorySnapshotGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/receivedinventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InventoryReceivedinventoryGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/inventorytransaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InventoryInventorytransactionGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inventory/receiveinventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Receive Inventory Order
         * @description **Purpose:** Create a new inventory receive order for incoming transfers, purchase orders, or direct inventory additions.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for inventory operations
         *     - `ReceiveInventorySave` object in request body with vendor and item details
         *     - Content-Type: application/json
         *     - UserId or UserName required when ReceiveIntoInventory=true
         *
         *     **Response Data:**
         *     - Response format: `{ SavedReceive }`
         *     - Returns transaction ID and processing status information
         *
         *     **Processing Options:**
         *     - **Draft Mode (ReceiveIntoInventory=false):** Creates a saved receive order that can be opened/edited in LeafLogix
         *     - **Direct Processing (ReceiveIntoInventory=true):** Immediately processes items into inventory (requires UserId or UserName)
         *
         *     **Required Information:**
         *     - **Items Array:** Product details, quantities, costs, room assignments, batch information
         *     - **Vendor Information:** VendorId, delivery details, licensing information
         *     - **User Context:** UserId or UserName (required when ReceiveIntoInventory=true)
         *
         *     **Item Details Required:**
         *     - **Product Identification:** ProductId or SKU, product name
         *     - **Quantities:** Receive quantity, unit of measure
         *     - **Costs:** Unit cost, total cost (for cost tracking)
         *     - **Storage:** Room assignment, expiration dates
         *     - **Compliance:** Package tags, batch names, lab testing status
         *
         *     **Common Use Cases:**
         *     - **Transfer Processing:** Receive inventory from other licensed locations
         *     - **Purchase Orders:** Process incoming vendor deliveries
         *     - **Direct Additions:** Add inventory directly to stock levels
         *     - **Compliance Tracking:** Maintain chain of custody for regulatory reporting
         *     - **Batch Processing:** Handle multiple items in a single receive transaction
         *
         *     **Validation Features:**
         *     - **Vendor Verification:** Validates vendor exists and is active
         *     - **Room Validation:** Confirms room assignments are valid for location
         *     - **Potency Indicators:** Validates required compliance fields
         *     - **Duplicate Prevention:** ExternalId checking prevents duplicate receives
         *     - **User Authorization:** Verifies user permissions for inventory operations
         *
         *     **Important Notes:**
         *     - **User Requirement:** UserId or UserName required when ReceiveIntoInventory=true (cannot specify both)
         *     - **External ID Uniqueness:** ExternalId must be unique or omitted to prevent duplicates
         *     - **Vendor License Support:** Supports vendor license code mapping for compliance requirements
         *     - **Location Scoped:** All operations scoped to authenticated user's location
         *     - **Enhanced Validation:** Additional validation rules may apply based on location settings
         *
         *     **Request Format:**
         *     Provide a `ReceiveInventorySave` object containing vendor details, delivery information, and an array of items to receive.
         */
        post: operations["InventoryReceiveinventoryPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lineages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Lineages
         * @description **Purpose:** Retrieves the complete list of genetic lineages available for the authenticated organization for product classification and cannabis genetic tracking.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of lineage objects: `[{ Lineage }, ...]`
         *     - Array typically contains 10-50 genetic lineages per organization
         *     - Returns empty array `[]` if no lineages configured (rare)
         *     - Includes lineage ID, name, and genetic classification details
         *     - Cannabis genetic lineages and hereditary information for product categorization
         *     - Results filtered to authenticated organization level
         *
         *     **Common Use Cases:**
         *     - Track genetic lineage and hereditary information for cannabis products
         *     - Support compliance reporting with genetic background documentation
         *     - Populate lineage dropdown lists in product creation and strain management forms
         *     - Validate genetic lineage assignments in product and cultivation systems
         *     - Generate lineage-specific reports for cultivation and breeding programs
         *     - Enable genetic tracking for quality control and consistency
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small dataset suitable for client-side caching
         *     - No pagination needed due to manageable number of genetic lineages
         *     - Results consistent across all locations within organization
         *
         *     **Related Endpoints:**
         *     - `GET /strains` - Get strains that may be associated with these lineages
         *     - `GET /products` - Get products with lineage genetic information
         *     - Cultivation and breeding endpoints that utilize genetic lineage data
         *
         *     **Important Notes:**
         *     - Lineages are defined at organization level (LSP) for consistency
         *     - Essential for cannabis genetic tracking and breeding program documentation
         *     - Used for compliance reporting and genetic background verification
         *     - Supports cultivation operations with genetic lineage documentation
         *     - May be required for certain cannabis regulations and track-and-trace systems
         *     - Helps maintain genetic consistency and quality control in cultivation
         */
        get: operations["LineagesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/package/set-tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Package Tags
         * @description **Purpose:** Set inventory tags for packages, completely replacing any existing tags with the new tag set for organization and tracking.
         *
         *     **Request Requirements:**
         *     - "PackageWrite" role authorization required for package tag operations
         *     - `UpdatePackageTagsRequest` object in request body with package identifiers and tags
         *     - Content-Type: application/json
         *     - Must specify either InventoryIds OR PackageIds, but not both
         *     - All specified packages must be accessible to your location
         *
         *     **Response Data:**
         *     - Returns success confirmation (HTTP 200) upon successful tag assignment
         *     - No response body content (void return)
         *     - Tags are validated and applied immediately to specified packages
         *     - Changes are reflected immediately in inventory listings and package data
         *
         *     **Package Identification Options:**
         *     - **InventoryIds**: Target specific inventory records directly (one-to-one relationship)
         *     - **PackageIds**: Target packages by serial numbers (may affect multiple inventory records)
         *     - **Mutually Exclusive**: Specify either InventoryIds OR PackageIds, never both
         *     - **Validation**: Using both types will result in 400 Bad Request error
         *
         *     **Tag Operation Behavior:**
         *     - **Complete Replacement**: All existing tags are removed and replaced with new tags
         *     - **Tag Validation**: All tags must be valid and available in the system
         *     - **Immediate Effect**: Changes apply immediately to all specified packages
         *     - **Bulk Operation**: Can target multiple packages in a single request
         *
         *     **Request Body Fields:**
         *     - InventoryIds: Array of inventory record IDs (optional, mutually exclusive with PackageIds)
         *     - PackageIds: Array of package serial numbers (optional, mutually exclusive with InventoryIds)
         *     - Tags: Array of tag names to apply to the specified packages (required)
         *
         *     **Common Use Cases:**
         *     - Standardize tag sets across multiple packages for consistency
         *     - Replace outdated or incorrect tags with current classification
         *     - Implement new tagging schema by completely updating existing tags
         *     - Clean up tag sets by removing unwanted tags and setting only desired ones
         *     - Maintain organized inventory classification for operational efficiency
         *
         *     **Performance & Limits:**
         *     - Bulk operation optimized for multiple package updates
         *     - Immediate validation and tag assignment
         *     - Changes propagate to inventory systems immediately
         *     - Efficient for large-scale tag management operations
         *
         *     **Related Endpoints:**
         *     - `POST /package/add-tags` - Add tags while preserving existing tags
         *     - `POST /package/remove-tags` - Remove specific tags while preserving others
         *     - `GET /tags` - Retrieve available tag options for validation
         *     - `GET /inventory` - View packages with their current tag assignments
         *
         *     **Important Notes:**
         *     - **Complete Replacement**: This operation removes ALL existing tags and replaces them
         *     - **Tag Validation**: All tags must exist in the system and be valid
         *     - **Package Access**: All specified packages must be accessible to your authenticated location
         *     - **Mutual Exclusion**: Cannot use both InventoryIds and PackageIds in the same request
         *     - **Alternative Operations**: Use add-tags or remove-tags for partial tag modifications
         */
        post: operations["PackageSet-tagsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/package/add-tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Package Tags
         * @description **Purpose:** Add new inventory tags to packages while preserving all existing tags for enhanced organization and classification.
         *
         *     **Request Requirements:**
         *     - "PackageWrite" role authorization required for package tag operations
         *     - `UpdatePackageTagsRequest` object in request body with package identifiers and tags
         *     - Content-Type: application/json
         *     - Must specify either InventoryIds OR PackageIds, but not both
         *     - All specified packages must be accessible to your location
         *
         *     **Response Data:**
         *     - Returns success confirmation (HTTP 200) upon successful tag addition
         *     - No response body content (void return)
         *     - New tags are validated and added immediately to specified packages
         *     - Changes are reflected immediately in inventory listings and package data
         *
         *     **Package Identification Options:**
         *     - **InventoryIds**: Target specific inventory records directly (one-to-one relationship)
         *     - **PackageIds**: Target packages by serial numbers (may affect multiple inventory records)
         *     - **Mutually Exclusive**: Specify either InventoryIds OR PackageIds, never both
         *     - **Validation**: Using both types will result in 400 Bad Request error
         *
         *     **Tag Operation Behavior:**
         *     - **Additive Operation**: New tags are added while preserving all existing tags
         *     - **Duplicate Handling**: Duplicate tags are automatically ignored (no error)
         *     - **Tag Validation**: All new tags must be valid and available in the system
         *     - **Immediate Effect**: Changes apply immediately to all specified packages
         *     - **Bulk Operation**: Can target multiple packages in a single request
         *
         *     **Request Body Fields:**
         *     - InventoryIds: Array of inventory record IDs (optional, mutually exclusive with PackageIds)
         *     - PackageIds: Array of package serial numbers (optional, mutually exclusive with InventoryIds)
         *     - Tags: Array of tag names to add to the specified packages (required)
         *
         *     **Common Use Cases:**
         *     - Add seasonal or promotional tags to existing products without losing current classification
         *     - Enhance product categorization by adding supplementary organizational tags
         *     - Apply new quality control or testing tags while maintaining existing product tags
         *     - Add compliance or regulatory tags for audit trails without disrupting inventory organization
         *     - Implement progressive tagging workflows where tags are added over time
         *
         *     **Performance & Limits:**
         *     - Bulk operation optimized for multiple package updates
         *     - Immediate validation and tag addition
         *     - Changes propagate to inventory systems immediately
         *     - Efficient for incremental tag management operations
         *
         *     **Related Endpoints:**
         *     - `POST /package/set-tags` - Replace all existing tags with new tag set
         *     - `POST /package/remove-tags` - Remove specific tags while preserving others
         *     - `GET /tags` - Retrieve available tag options for validation
         *     - `GET /inventory` - View packages with their current tag assignments
         *
         *     **Important Notes:**
         *     - **Preserves Existing**: This operation keeps ALL existing tags and adds new ones
         *     - **Duplicate Safe**: Adding tags that already exist will not cause errors
         *     - **Tag Validation**: All new tags must exist in the system and be valid
         *     - **Package Access**: All specified packages must be accessible to your authenticated location
         *     - **Mutual Exclusion**: Cannot use both InventoryIds and PackageIds in the same request
         */
        post: operations["PackageAdd-tagsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/package/remove-tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove Package Tags
         * @description **Purpose:** Remove specific inventory tags from packages while preserving all other existing tags for selective tag management.
         *
         *     **Request Requirements:**
         *     - "PackageWrite" role authorization required for package tag operations
         *     - `UpdatePackageTagsRequest` object in request body with package identifiers and tags to remove
         *     - Content-Type: application/json
         *     - Must specify either InventoryIds OR PackageIds, but not both
         *     - All specified packages must be accessible to your location
         *
         *     **Response Data:**
         *     - Returns success confirmation (HTTP 200) upon successful tag removal
         *     - No response body content (void return)
         *     - Specified tags are removed immediately from specified packages
         *     - Changes are reflected immediately in inventory listings and package data
         *
         *     **Package Identification Options:**
         *     - **InventoryIds**: Target specific inventory records directly (one-to-one relationship)
         *     - **PackageIds**: Target packages by serial numbers (may affect multiple inventory records)
         *     - **Mutually Exclusive**: Specify either InventoryIds OR PackageIds, never both
         *     - **Validation**: Using both types will result in 400 Bad Request error
         *
         *     **Tag Operation Behavior:**
         *     - **Selective Removal**: Only specified tags are removed, all others are preserved
         *     - **Missing Tag Handling**: Removing tags that don't exist is silently ignored (no error)
         *     - **Immediate Effect**: Changes apply immediately to all specified packages
         *     - **Bulk Operation**: Can target multiple packages in a single request
         *     - **Preservation**: All non-specified tags remain unchanged
         *
         *     **Request Body Fields:**
         *     - InventoryIds: Array of inventory record IDs (optional, mutually exclusive with PackageIds)
         *     - PackageIds: Array of package serial numbers (optional, mutually exclusive with InventoryIds)
         *     - Tags: Array of tag names to remove from the specified packages (required)
         *
         *     **Common Use Cases:**
         *     - Remove outdated seasonal or promotional tags while keeping product classification
         *     - Clean up temporary testing or quality control tags after completion
         *     - Remove incorrect or duplicate tags while preserving accurate classification
         *     - Implement tag lifecycle management by removing obsolete organizational tags
         *     - Support compliance workflows by removing temporary audit or review tags
         *
         *     **Performance & Limits:**
         *     - Bulk operation optimized for multiple package updates
         *     - Immediate tag removal processing
         *     - Changes propagate to inventory systems immediately
         *     - Efficient for selective tag cleanup operations
         *
         *     **Related Endpoints:**
         *     - `POST /package/set-tags` - Replace all existing tags with new tag set
         *     - `POST /package/add-tags` - Add new tags while preserving existing tags
         *     - `GET /tags` - Retrieve available tag options for validation
         *     - `GET /inventory` - View packages with their current tag assignments
         *
         *     **Important Notes:**
         *     - **Preserves Others**: This operation keeps ALL non-specified tags unchanged
         *     - **Missing Tag Safe**: Removing tags that don't exist will not cause errors
         *     - **Package Access**: All specified packages must be accessible to your authenticated location
         *     - **Mutual Exclusion**: Cannot use both InventoryIds and PackageIds in the same request
         *     - **Selective Operation**: Use for precise tag management without affecting other classification
         */
        post: operations["PackageRemove-tagsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Plants
         * @description **Purpose:** Retrieve cannabis plant records for cultivation tracking, compliance monitoring, and operational management.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant data access
         *     - Optional query parameters for filtering by plant attributes and date ranges
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ Plant }, { Plant }, ...]`
         *     - Returns array of `Plant` objects with comprehensive plant information
         *     - Array may contain 0 to 10,000+ plants depending on cultivation scale and filtering
         *     - Returns empty array `[]` if no plants match criteria (not null)
         *     - Plant details include identification, growth status, cultivation tracking, and compliance data
         *     - Results automatically filtered to authenticated location
         *
         *     **Filtering Options:**
         *     - plantId: Filter by specific LeafLogix internal plant ID for individual plant lookup
         *     - serialNumber: Filter by plant serial number for tracking system integration
         *     - status: Filter by plant status (Active, Harvesting, Harvested, Retired)
         *     - lastModifiedDateStart: Returns plants modified after this date for incremental sync
         *     - lastModifiedDateEnd: Returns plants modified before this date for date range filtering
         *
         *     **Plant Status Definitions:**
         *     - **Active**: Plants currently growing and under cultivation
         *     - **Harvesting**: Plants currently being harvested or in harvest process
         *     - **Harvested**: Plants that have completed harvest operations
         *     - **Retired**: Plants that have been retired from cultivation (destroyed, failed, etc.)
         *
         *     **Common Use Cases:**
         *     - Monitor plant growth progress and cultivation status for operational management
         *     - Generate compliance reports for regulatory tracking and auditing
         *     - Synchronize plant data with cultivation management and tracking systems
         *     - Track plant lifecycle from cultivation through harvest completion
         *     - Support inventory management and product traceability requirements
         *
         *     **Performance & Limits:**
         *     - Optimized for cultivation tracking and plant management workflows
         *     - Date range filtering recommended for large cultivation operations
         *     - Plant status filtering efficient for operational dashboards
         *     - Location-scoped results for operational relevance and security
         *
         *     **Related Endpoints:**
         *     - `POST /plant/harvest` - Move plants into harvest status
         *     - `POST /harvest` - Create harvest records for harvested plants
         *     - `GET /inventory` - View products created from harvested plants
         *     - Plant lifecycle and cultivation management endpoints
         *
         *     **Important Notes:**
         *     - **Compliance Tracking**: Plant records support cannabis regulatory compliance requirements
         *     - **Lifecycle Management**: Tracks complete plant lifecycle from cultivation to harvest
         *     - **Date Filtering**: Use date parameters for incremental sync and performance optimization
         *     - **Status Filtering**: Essential for operational workflows and cultivation management
         *     - **Traceability**: Links with harvest and inventory systems for complete product tracking
         */
        get: operations["PlantGet"];
        put?: never;
        /**
         * Add Plant
         * @description **Purpose:** Create a new cannabis plant record in the cultivation system with unique identification and tracking for compliance monitoring and operational management.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant creation operations
         *     - `CreatePlantRequest` object in request body with plant identification and group details
         *     - Content-Type: application/json
         *     - Serial number must be unique within the facility
         *     - Plant group must exist or strain must be provided for new group creation
         *
         *     **Response Data:**
         *     - Response format: `int` (Plant ID)
         *     - Returns the newly created plant's unique LeafLogix plant ID
         *     - Plant ID can be used in subsequent plant management operations
         *     - Immediate plant creation with tracking system integration
         *
         *     **Request Body Fields:**
         *     - `PlantGroupName`: Name of plant group for batch tracking (required)
         *     - `SerialNumber`: Unique plant identifier for compliance tracking (required, must be unique)
         *     - `Strain`: Strain name for new plant groups (required when creating new plant group)
         *     - `Room`: Cultivation room name for plant location (required when using state integrations)
         *     - `BypassStateIntegration`: Skip external system integration (optional, default: false)
         *     - `DateCreated`: Plant creation date (optional, defaults to current UTC time)
         *     - `PhaseStartDate`: Initial growth phase start date (optional, defaults to current UTC time)
         *
         *     **Plant Group Behavior:**
         *     - **Existing Groups**: If plant group exists, strain information is inherited
         *     - **New Groups**: If plant group doesn't exist, strain must be provided for group creation
         *     - **Batch Tracking**: Plant groups enable batch-based cultivation tracking and compliance
         *     - **Strain Assignment**: All plants in a group share the same strain genetics
         *
         *     **Validation Rules:**
         *     - **Serial Number**: Must be unique across the facility for compliance tracking
         *     - **Plant Group**: Required for batch organization and cultivation management
         *     - **Strain Requirement**: Must provide strain when creating new plant groups
         *     - **Room Validation**: Room name must exist and be accessible when using integrations
         *     - **State Integration**: Room required unless bypassing external system integration
         *
         *     **Common Use Cases:**
         *     - Register new clones or seedlings entering the cultivation facility
         *     - Create plant records for compliance tracking and regulatory reporting
         *     - Initialize plant tracking for cultivation workflow management
         *     - Support batch-based cultivation and harvest planning
         *     - Integrate with external cultivation and compliance systems
         *
         *     **Performance & Limits:**
         *     - Single plant creation for precise record management
         *     - Immediate validation and unique identifier assignment
         *     - Optional integration with external cultivation systems
         *     - Efficient for individual plant registration workflows
         *
         *     **Related Endpoints:**
         *     - `GET /plant` - Retrieve created plant information and status
         *     - `POST /plant/assign-plants-to-group` - Assign existing plants to groups
         *     - `POST /plant/move` - Move plants between cultivation rooms
         *     - Plant lifecycle management endpoints for complete workflow
         *
         *     **Important Notes:**
         *     - **Unique Tracking**: Serial numbers must be unique for compliance and tracking
         *     - **Compliance Critical**: Plant registration is required for cannabis regulatory compliance
         *     - **Group Management**: Plant groups support batch-based cultivation workflows
         *     - **Integration**: External system integration supports cultivation management platforms
         *     - **Immediate Processing**: Plant creation is immediate with tracking system updates
         */
        post: operations["PlantPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/harvest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Harvest Plants
         * @description **Purpose:** Move plants from cultivation into harvest status with optional weight tracking for cannabis cultivation compliance and operational management.
         *
         *     **Request Requirements:**
         *     - "CultivationWrite" role authorization required for plant harvest operations
         *     - `HarvestPlantRequest` object in request body with plant identifiers and harvest details
         *     - Content-Type: application/json
         *     - Rate limited to 300 requests per minute
         *     - All specified plants must be accessible to your location and in valid status for harvesting
         *
         *     **Response Data:**
         *     - Response format: No response body (void)
         *     - Returns success confirmation (HTTP 200) upon successful harvest initiation
         *     - No response body content (void return)
         *     - Plants are moved to harvesting status immediately
         *     - Changes are reflected immediately in plant listings and cultivation tracking
         *
         *     **Request Body Fields:**
         *     - Plant identifiers for the plants to be harvested
         *     - Optional wet weight measurements for harvest tracking
         *     - Harvest timing and operational details
         *     - Compliance and tracking information required for regulatory reporting
         *
         *     **Harvest Operation Behavior:**
         *     - **Status Change**: Plants are moved from Active to Harvesting status
         *     - **Weight Tracking**: Optional wet weight can be recorded for yield tracking
         *     - **Bulk Processing**: Multiple plants can be harvested in a single operation
         *     - **Compliance**: All operations logged for regulatory compliance requirements
         *     - **Immediate Effect**: Status changes apply immediately to all specified plants
         *
         *     **Common Use Cases:**
         *     - Initiate harvest operations for mature cannabis plants ready for processing
         *     - Record harvest timing and initial weight measurements for yield tracking
         *     - Maintain compliance with cannabis cultivation and harvest regulations
         *     - Support cultivation workflow transitions from growing to processing phases
         *     - Track harvest operations for operational efficiency and planning
         *
         *     **Performance & Limits:**
         *     - Rate limited to 300 requests per minute for cultivation workflow protection
         *     - Bulk operation optimized for multiple plant processing
         *     - Immediate status updates and tracking system integration
         *     - Efficient for large-scale cultivation harvest operations
         *
         *     **Related Endpoints:**
         *     - `GET /plant` - Retrieve plant records and current status
         *     - `POST /harvest` - Create harvest records for tracking and compliance
         *     - `GET /harvest` - Monitor harvest progress and completion status
         *     - Cultivation and inventory management endpoints for complete workflow
         *
         *     **Important Notes:**
         *     - **Status Requirements**: Plants must be in Active status to be harvested
         *     - **Compliance Critical**: Harvest operations are required for cannabis regulatory compliance
         *     - **Weight Tracking**: Wet weight measurements support yield tracking and compliance
         *     - **Rate Limiting**: 300 requests per minute limit for cultivation workflow stability
         *     - **Immediate Processing**: Status changes are immediate and irreversible through this endpoint
         */
        post: operations["PlantHarvestPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move Plants
         * @description **Purpose:** Move cannabis plants to a different room or cultivation area within the same facility for cultivation workflow management and compliance tracking.
         *
         *     **Request Requirements:**
         *     - "CultivationWrite" role authorization required for plant movement operations
         *     - `MovePlantRequest` object in request body with plant IDs and target room information
         *     - Content-Type: application/json
         *     - All specified plants must be accessible to your location and in moveable status
         *     - Target room must be within the same facility (location)
         *
         *     **Response Data:**
         *     - Response format: No response body (void)
         *     - Returns success confirmation (HTTP 200) upon successful plant movement
         *     - No response body content (void return)
         *     - Plants are moved to new room immediately
         *     - Changes are reflected immediately in plant location tracking
         *
         *     **Request Body Fields:**
         *     - `PlantIds`: Array of LeafLogix plant IDs to move (required)
         *     - `RoomId`: Target room ID within the same facility (required)
         *     - `TableId`: Optional table assignment within the target room
         *
         *     **Movement Operation Behavior:**
         *     - **Location Validation**: Target room must belong to the same facility
         *     - **Bulk Processing**: Multiple plants can be moved in a single operation
         *     - **Stage Updates**: If target room has cultivation stage, plants automatically update to that stage
         *     - **Compliance**: All movement operations logged for regulatory compliance requirements
         *     - **Integration**: Movement synchronized with external cultivation systems when configured
         *
         *     **Common Use Cases:**
         *     - Move plants between cultivation rooms as they progress through growth stages
         *     - Relocate plants for environmental optimization and cultivation management
         *     - Transfer plants to harvest preparation areas when ready for processing
         *     - Support cultivation workflow automation and plant lifecycle management
         *     - Maintain compliance with cannabis cultivation and tracking regulations
         *
         *     **Performance & Limits:**
         *     - Bulk operation optimized for multiple plant processing
         *     - Immediate location updates and tracking system integration
         *     - Efficient for large-scale cultivation facility operations
         *     - Location validation prevents cross-facility security violations
         *
         *     **Related Endpoints:**
         *     - `GET /plant` - Retrieve current plant locations and status
         *     - `POST /plant/change-phase` - Update growth phases when moving between rooms
         *     - `GET /room` - List available rooms for plant movement planning
         *     - Cultivation management endpoints for complete workflow
         *
         *     **Important Notes:**
         *     - **Facility Restriction**: Plants cannot be moved to rooms in different facilities
         *     - **Compliance Critical**: Plant movements are required for cannabis regulatory compliance
         *     - **Stage Automation**: Room-specific cultivation stages applied automatically when configured
         *     - **Immediate Processing**: Location changes are immediate and tracked for audit purposes
         *     - **Integration**: Movement synchronized with external cultivation and compliance systems
         */
        post: operations["PlantMovePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/change-phase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Plants Growth Phase
         * @description **Purpose:** Update the cultivation growth phase of cannabis plants to track their development stage and optimize cultivation management.
         *
         *     **Request Requirements:**
         *     - "CultivationWrite" role authorization required for plant growth phase operations
         *     - `ChangeGrowthPhaseRequest` object in request body with plant IDs and growth phase information
         *     - Content-Type: application/json
         *     - All specified plants must be accessible to your location and in valid status for phase changes
         *     - Growth phase must be one of the valid phase values
         *
         *     **Response Data:**
         *     - Response format: No response body (void)
         *     - Returns success confirmation (HTTP 200) upon successful phase change
         *     - No response body content (void return)
         *     - Plants are updated to new growth phase immediately
         *     - Changes are reflected immediately in plant cultivation tracking
         *
         *     **Request Body Fields:**
         *     - `PlantIds`: Array of LeafLogix plant IDs to update (required)
         *     - `GrowthPhase`: Target cultivation phase - must be one of: `Vegetative`, `Propagation`, `Flowering` (required)
         *     - `PhaseStartDate`: Date when new phase begins - defaults to current UTC time if omitted (optional)
         *
         *     **Growth Phase Values:**
         *     - **Propagation**: Initial plant development and cloning phase
         *     - **Vegetative**: Active vegetative growth before flowering initiation
         *     - **Flowering**: Reproductive growth phase leading to harvest
         *
         *     **Phase Change Operation Behavior:**
         *     - **Phase Validation**: Growth phase value validated against allowed phases
         *     - **Bulk Processing**: Multiple plants can be updated in a single operation
         *     - **Date Management**: Phase start date defaults to current time if not specified
         *     - **Compliance**: All phase changes logged for regulatory compliance requirements
         *     - **Integration**: Phase updates synchronized with external cultivation systems when configured
         *
         *     **Common Use Cases:**
         *     - Transition plants from vegetative to flowering phase for harvest timing
         *     - Update plant phases during cultivation workflow automation
         *     - Maintain accurate cultivation records for compliance reporting
         *     - Support cultivation planning and scheduling optimization
         *     - Synchronize growth phases with environmental control systems
         *
         *     **Performance & Limits:**
         *     - Bulk operation optimized for multiple plant processing
         *     - Immediate phase updates and tracking system integration
         *     - Efficient for large-scale cultivation facility operations
         *     - Phase validation prevents invalid cultivation state transitions
         *
         *     **Related Endpoints:**
         *     - `GET /plant` - Retrieve current plant phases and cultivation status
         *     - `POST /plant/move` - Move plants between rooms optimized for different phases
         *     - `POST /plant/harvest` - Harvest plants when flowering phase is complete
         *     - Cultivation management endpoints for complete workflow
         *
         *     **Important Notes:**
         *     - **Phase Validation**: Only `Vegetative`, `Propagation`, and `Flowering` phases are accepted
         *     - **Compliance Critical**: Phase tracking is required for cannabis regulatory compliance
         *     - **Date Tracking**: Phase start dates support cultivation timeline management
         *     - **Immediate Processing**: Phase changes are immediate and tracked for audit purposes
         *     - **Integration**: Phase updates synchronized with external cultivation and compliance systems
         */
        post: operations["PlantChange-phasePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/retire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retire Plants
         * @description **Purpose:** Permanently retire cannabis plants from cultivation due to various reasons such as disease, damage, or end-of-life for compliance tracking and waste management.
         *
         *     **Request Requirements:**
         *     - "CultivationWrite" role authorization required for plant retirement operations
         *     - `RetirePlantRequest` object in request body with plant IDs and retirement details
         *     - Content-Type: application/json
         *     - Rate limited to 300 requests per minute
         *     - All specified plants must be accessible to your location and in retirable status
         *     - Either `ReasonId` or `ReasonCode` must be provided for retirement justification
         *
         *     **Response Data:**
         *     - Response format: No response body (void)
         *     - Returns success confirmation (HTTP 200) upon successful plant retirement
         *     - No response body content (void return)
         *     - Plants are permanently retired from cultivation immediately
         *     - Changes are reflected immediately in plant status and compliance tracking
         *
         *     **Request Body Fields:**
         *     - `PlantIds`: Array of LeafLogix plant IDs to retire (required)
         *     - `ReasonId`: Numeric reason ID for retirement - use if known (optional if ReasonCode provided)
         *     - `ReasonCode`: String reason code for retirement - use if ReasonId unknown (optional if ReasonId provided)
         *     - `RoomId`: Room where retirement occurs for waste tracking (required)
         *     - `WasteType`: Type of waste generated from retirement (optional)
         *     - `WasteWeight`: Weight of waste material in specified units (optional)
         *     - `PlantWeight`: Weight of plant material being retired (optional)
         *     - `WasteDate`: Date of waste generation for compliance tracking (optional)
         *     - Additional waste tracking and compliance fields
         *
         *     **Reason Code Management:**
         *     - **ReasonId Priority**: If both ReasonId and ReasonCode provided, ReasonId takes precedence
         *     - **Code Lookup**: ReasonCode automatically looked up to find corresponding ReasonId
         *     - **Validation**: Invalid ReasonId or ReasonCode will result in 400 Bad Request response
         *     - **Flexibility**: Use ReasonCode when integrating without pre-knowledge of reason IDs
         *
         *     **Retirement Operation Behavior:**
         *     - **Permanent Action**: Plant retirement is irreversible once completed
         *     - **Bulk Processing**: Multiple plants can be retired in a single operation
         *     - **Waste Tracking**: Optional waste weight and material tracking for compliance
         *     - **Compliance**: All retirement operations logged for regulatory compliance requirements
         *     - **Integration**: Retirement synchronized with external cultivation and waste tracking systems
         *
         *     **Common Use Cases:**
         *     - Retire diseased or damaged plants to prevent contamination spread
         *     - Remove plants that have reached end-of-life or failed quality standards
         *     - Comply with regulatory requirements for plant destruction documentation
         *     - Manage cultivation space by removing non-productive plants
         *     - Support waste tracking and disposal compliance reporting
         *
         *     **Performance & Limits:**
         *     - Rate limited to 300 requests per minute for cultivation workflow protection
         *     - Bulk operation optimized for multiple plant processing
         *     - Immediate retirement status updates and tracking system integration
         *     - Efficient for large-scale cultivation facility operations
         *
         *     **Related Endpoints:**
         *     - `GET /plant` - Retrieve current plant status before retirement
         *     - `GET /plant/get-reason-codes` - List available retirement reason codes
         *     - `POST /waste` - Create waste records for retired plant material
         *     - Cultivation and compliance management endpoints
         *
         *     **Important Notes:**
         *     - **Irreversible Action**: Plant retirement cannot be undone once completed
         *     - **Reason Required**: Either ReasonId or ReasonCode must be provided for compliance
         *     - **Compliance Critical**: Retirement tracking is required for cannabis regulatory compliance
         *     - **Rate Limiting**: 300 requests per minute limit for cultivation workflow stability
         *     - **Waste Integration**: Retirement can generate waste records for disposal tracking
         */
        post: operations["PlantRetirePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/get-reason-codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Plant Reason Codes
         * @description **Purpose:** Retrieve the list of valid reason codes for cannabis plant retirement operations to support compliance documentation and proper retirement categorization.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant data access
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Response format: `[string, string, ...]`
         *     - Returns array of string reason codes for plant retirement
         *     - Array typically contains 5-20 reason codes depending on organization configuration
         *     - Returns empty array `[]` if no reason codes configured (rare)
         *     - Reason codes are organization-specific and configurable by administrators
         *     - Results automatically filtered to authenticated organization
         *
         *     **Common Reason Code Examples:**
         *     - Disease or pest infestation requiring plant destruction
         *     - Physical damage or environmental stress failures
         *     - Quality control failures or contamination issues
         *     - End-of-life or harvest completion scenarios
         *     - Regulatory compliance or audit requirements
         *
         *     **Common Use Cases:**
         *     - Populate reason code dropdown lists in plant retirement forms
         *     - Validate reason codes before submitting plant retirement requests
         *     - Generate compliance reports showing retirement reasons and frequencies
         *     - Support cultivation management workflows with proper retirement categorization
         *     - Maintain audit trails for regulatory compliance and operational analysis
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small dataset suitable for client-side caching
         *     - No pagination needed due to manageable reason code catalog sizes
         *     - Results filtered to organization-specific reason configurations
         *
         *     **Related Endpoints:**
         *     - `POST /plant/retire` - Retire plants using these reason codes for compliance
         *     - `GET /plant` - Retrieve plant status before determining retirement reasons
         *     - Plant lifecycle and cultivation management endpoints
         *
         *     **Important Notes:**
         *     - **Organization-Specific**: Reason codes vary by organization and compliance requirements
         *     - **Compliance Required**: Proper reason codes are essential for cannabis regulatory compliance
         *     - **Validation**: Use these codes to validate retirement requests before submission
         *     - **Reference Data**: Cache locally for performance in plant retirement workflows
         *     - **Administrative**: Reason codes are configured by system administrators
         */
        get: operations["PlantGet-reason-codesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/assign-plants-to-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Plants to Group
         * @description **Purpose:** Assign existing cannabis plants to a specific plant group for batch management and cultivation workflow organization using plant serial numbers.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant group management operations
         *     - `AssignPlantsToGroupRequest` object in request body with group name and plant serial numbers
         *     - Content-Type: application/json
         *     - All specified plant serial numbers must exist and be accessible to your location
         *     - Target plant group must exist within the facility
         *
         *     **Response Data:**
         *     - Response format: No response body (void)
         *     - Returns success confirmation (HTTP 200) upon successful plant assignment
         *     - No response body content (void return)
         *     - Plants are assigned to target group immediately
         *     - Changes are reflected immediately in plant group organization and batch tracking
         *
         *     **Request Body Fields:**
         *     - `PlantGroupName`: Name of target plant group for batch organization (required)
         *     - `PlantSerialNumbers`: Array of plant serial numbers to assign to the group (required)
         *
         *     **Plant Group Assignment Behavior:**
         *     - **Batch Organization**: Plants assigned to groups for batch-based cultivation tracking
         *     - **Serial Number Lookup**: Plants identified by serial numbers for precise assignment
         *     - **Group Validation**: Target plant group must exist before assignment
         *     - **Bulk Processing**: Multiple plants can be assigned to the same group in a single operation
         *     - **Immediate Processing**: Group assignments are immediate and tracked for compliance
         *
         *     **Validation Rules:**
         *     - **Plant Existence**: All serial numbers must correspond to existing plants
         *     - **Location Access**: Plants must be accessible to the authenticated location
         *     - **Group Existence**: Target plant group must exist within the facility
         *     - **Serial Number Format**: Serial numbers must match existing plant tracking identifiers
         *
         *     **Common Use Cases:**
         *     - Reorganize plants into batch groups for cultivation workflow management
         *     - Assign newly created plants to existing cultivation batches
         *     - Support batch-based harvest planning and cultivation scheduling
         *     - Maintain proper plant group organization for compliance reporting
         *     - Facilitate cultivation management and operational efficiency
         *
         *     **Performance & Limits:**
         *     - Bulk operation optimized for multiple plant assignment
         *     - Immediate group assignment and tracking system integration
         *     - Efficient for cultivation workflow organization and batch management
         *     - Serial number validation ensures accurate plant identification
         *
         *     **Related Endpoints:**
         *     - `GET /plant` - Retrieve current plant group assignments and status
         *     - `POST /plant` - Create new plants that can be assigned to groups
         *     - Plant group and cultivation management endpoints for complete workflow
         *
         *     **Important Notes:**
         *     - **Batch Management**: Plant groups enable batch-based cultivation tracking and compliance
         *     - **Serial Number Precision**: Use exact serial numbers for accurate plant identification
         *     - **Compliance Support**: Proper group organization supports regulatory compliance requirements
         *     - **Immediate Processing**: Group assignments are immediate and tracked for audit purposes
         *     - **Workflow Integration**: Supports cultivation management and harvest planning workflows
         */
        post: operations["PlantAssign-plants-to-groupPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Existing Plants (Non-State Tracking)
         * @description **Purpose:** Update existing plant records with cultivation data without reporting to state traceability systems for internal plant management.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant data modification
         *     - `UpdatePlantsRequest` object in request body with plant update details
         *     - Content-Type: application/json
         *     - Valid PlantId required for each plant to be updated
         *     - Feature flag "rollout.trym-integration" must be enabled
         *
         *     **Response Data:**
         *     - Returns single `SuccessResult` object (not array) with operation confirmation
         *     - Includes success message confirming plants were updated
         *     - Operation status and any relevant update information
         *
         *     **Sparse Update Behavior:**
         *     - **Null/Empty/Omitted Fields**: Will NOT have their data updated (preserves existing values)
         *     - **Provided Fields**: Only fields with values in the request will be updated
         *     - **Field Independence**: Each field can be updated independently without affecting others
         *     - **Safe Updates**: Omitted fields maintain their current database values
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Updates are for internal cultivation tracking only
         *     - **No External Reporting**: Changes are NOT reported to state traceability systems
         *     - **Cultivation Focus**: Designed for internal plant management and cultivation workflows
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Common Use Cases:**
         *     - Update internal plant cultivation notes and observations
         *     - Modify plant growth stage information for internal tracking
         *     - Update plant location within cultivation facility
         *     - Record internal plant health and development data
         *     - Maintain cultivation workflow information without state system updates
         *
         *     **Performance & Limits:**
         *     - Batch plant updates for efficient cultivation management
         *     - Validation performed before any changes to ensure data integrity
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility management workflows
         *
         *     **Related Endpoints:**
         *     - `GET /plant` - Retrieve current plant data before updates
         *     - `POST /plant/nonsts` - Create new plants for internal tracking
         *     - `POST /plant/harvest` - Official plant harvest operations (state tracked)
         *
         *     **Important Notes:**
         *     - **Feature Gated**: Requires "rollout.trym-integration" feature flag to be enabled
         *     - **Internal Tracking**: Updates are for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Validation Required**: Plant IDs must exist and be valid for the location
         *     - **Cultivation Focus**: Designed specifically for cultivation facility workflows
         */
        post: operations["PlantNonstsUpdatePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/batch/immatureplants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Immature Plant Batch (Non-State Tracking)
         * @description **Purpose:** Create a batch of immature plants for internal cultivation tracking without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant creation
         *     - `PostImmatureBatchRequest` object in request body with batch details
         *     - Content-Type: application/json
         *     - Valid plant data for each immature plant in the batch
         *     - Feature flag "rollout.trym-integration" must be enabled
         *
         *     **Response Data:**
         *     - Returns single `ApiResult<CreateImmatureBatchResponse>` object (not array) with creation results
         *     - Includes array of created plant IDs for tracking and reference
         *     - Batch creation status and success confirmation
         *     - Plant ID assignments for newly created immature plants
         *
         *     **Batch Creation Process:**
         *     - **Multiple Plants**: Creates multiple immature plants in a single operation
         *     - **ID Assignment**: Each plant receives a unique PlantId for future operations
         *     - **Validation**: All plant data validated before batch creation
         *     - **Atomic Operation**: Batch succeeds or fails as a complete unit
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Plant creation for internal cultivation tracking only
         *     - **No External Reporting**: Plant creation NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal plant management and cultivation workflows
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Immature Plant Characteristics:**
         *     - **Growth Stage**: Plants in early vegetative or seedling stage
         *     - **Tracking Ready**: Created with unique identifiers for cultivation tracking
         *     - **Development Phase**: Pre-flowering plants requiring cultivation management
         *     - **Internal Records**: Maintained in internal cultivation systems only
         *
         *     **Common Use Cases:**
         *     - Create batches of seedlings for internal cultivation tracking
         *     - Initialize plant records for new cultivation cycles
         *     - Set up immature plant inventory for facility management
         *     - Start cultivation workflows without state system integration
         *     - Manage internal plant genetics and breeding programs
         *
         *     **Performance & Limits:**
         *     - Batch processing for efficient plant creation workflows
         *     - Validation performed before any plant creation
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility startup and expansion workflows
         *
         *     **Related Endpoints:**
         *     - `POST /plant/nonsts/update` - Update created plants with cultivation data
         *     - `GET /plant` - Retrieve created plant information
         *     - `POST /plant/harvest` - Official plant harvest operations (state tracked)
         *
         *     **Important Notes:**
         *     - **Feature Gated**: Requires "rollout.trym-integration" feature flag to be enabled
         *     - **Plant IDs Returned**: Save returned plant IDs for future plant management operations
         *     - **Internal Tracking**: Plants created for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Batch Efficiency**: Creates multiple plants efficiently in single operation
         */
        post: operations["PlantNonstsBatchImmatureplantsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/batch/convert/immatureplants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert Immature Plant Batch to Mature (Non-State Tracking)
         * @description **Purpose:** Convert immature plant batches to mature plant status for internal cultivation tracking without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant conversion
         *     - `ConvertImmatureBatchRequest` object in request body with conversion details
         *     - Content-Type: application/json
         *     - Valid immature batch data for conversion to mature plants
         *     - Feature flag "rollout.trym-integration" must be enabled
         *
         *     **Response Data:**
         *     - Returns single `ApiResult<ConvertImmaturePlantResponse>` object (not array) with conversion results
         *     - Includes array of converted plant IDs for tracking and reference
         *     - Plant conversion status and success confirmation
         *     - Mature plant ID assignments for newly converted plants
         *
         *     **Plant Conversion Process:**
         *     - **Status Transition**: Converts immature plants to mature plant status
         *     - **ID Retention**: Existing plant IDs maintained through conversion process
         *     - **Validation**: All conversion data validated before processing
         *     - **Batch Processing**: Multiple immature plants converted in single operation
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Plant creation for internal cultivation tracking only
         *     - **No External Reporting**: Plant conversion NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal plant management and cultivation workflows
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Maturity Transition:**
         *     - **Growth Stage**: Immature to mature plant status transition
         *     - **Cultivation Ready**: Mature plants ready for flowering phase management
         *     - **Tracking Continuity**: Maintains plant tracking through maturity transition
         *     - **Workflow Integration**: Supports cultivation facility growth phase workflows
         *
         *     **Common Use Cases:**
         *     - Convert vegetative plants to mature flowering status
         *     - Transition immature batches to mature cultivation phases
         *     - Progress plants through cultivation development stages
         *     - Support internal cultivation workflow maturity management
         *     - Manage plant lifecycle transitions without state system integration
         *
         *     **Performance & Limits:**
         *     - Efficient plant conversion for cultivation management
         *     - Validation performed before any plant conversion
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility maturity workflows
         *
         *     **Related Endpoints:**
         *     - `POST /plant/nonsts/update` - Update converted plants with cultivation data
         *     - `GET /plant` - Retrieve converted plant information
         *     - `POST /plant/harvest` - Official plant harvest operations (state tracked)
         *
         *     **Important Notes:**
         *     - **Feature Gated**: Requires "rollout.trym-integration" feature flag to be enabled
         *     - **Plant IDs Returned**: Save returned plant IDs for future plant management operations
         *     - **Internal Tracking**: Plants converted for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Cultivation Ready**: Mature plants ready for internal cultivation tracking workflows
         */
        post: operations["PlantNonstsBatchConvertImmatureplantsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/batch/matureplants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Mature Plant Batch (Non-State Tracking)
         * @description **Purpose:** Create a batch of mature plants ready for flowering phase cultivation tracking without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for mature plant creation
         *     - `CreateMatureBatchRequest` object in request body with mature plant batch details
         *     - Content-Type: application/json
         *     - Valid mature plant data for each plant in the batch
         *     - Feature flag "rollout.trym-integration" must be enabled
         *
         *     **Response Data:**
         *     - Returns single `ApiResult<CreateMaturePlantsResponse>` object (not array) with creation results
         *     - Includes array of created plant IDs for tracking and reference
         *     - Batch creation status and success confirmation
         *     - Plant ID assignments for newly created mature plants
         *
         *     **Mature Plant Batch Creation:**
         *     - **Multiple Plants**: Creates multiple mature plants in a single operation
         *     - **Flowering Ready**: Plants created at mature stage ready for flowering phase
         *     - **ID Assignment**: Each plant receives a unique PlantId for future operations
         *     - **Validation**: All plant data validated before batch creation
         *     - **Atomic Operation**: Batch succeeds or fails as a complete unit
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Plant creation for internal cultivation tracking only
         *     - **No External Reporting**: Plant creation NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal mature plant management and flowering workflows
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Mature Plant Characteristics:**
         *     - **Growth Stage**: Plants ready for flowering phase cultivation
         *     - **Cultivation Ready**: Created with unique identifiers for flowering management
         *     - **Production Phase**: Mature plants prepared for harvest cultivation workflows
         *     - **Internal Records**: Maintained in internal cultivation systems only
         *
         *     **Common Use Cases:**
         *     - Create batches of mature plants for flowering room management
         *     - Initialize mature plant inventory for production cycles
         *     - Set up flowering phase plant tracking for facility management
         *     - Start mature cultivation workflows without state system integration
         *     - Manage internal mature plant genetics and production programs
         *
         *     **Performance & Limits:**
         *     - Batch processing for efficient mature plant creation workflows
         *     - Validation performed before any plant creation
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility flowering phase workflows
         *
         *     **Related Endpoints:**
         *     - `POST /plant/nonsts/update` - Update created mature plants with cultivation data
         *     - `POST /plant/nonsts/batch/immatureplants` - Create immature plant batches
         *     - `POST /plant/nonsts/batch/convert/immatureplants` - Convert immature to mature plants
         *     - `GET /plant` - Retrieve created mature plant information
         *     - `POST /plant/harvest` - Official plant harvest operations (state tracked)
         *
         *     **Important Notes:**
         *     - **Feature Gated**: Requires "rollout.trym-integration" feature flag to be enabled
         *     - **Plant IDs Returned**: Save returned plant IDs for future mature plant management operations
         *     - **Internal Tracking**: Plants created for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Flowering Ready**: Mature plants ready for flowering phase cultivation workflows
         *     - **Batch Efficiency**: Creates multiple mature plants efficiently in single operation
         */
        post: operations["PlantNonstsBatchMatureplantsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/retag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retag Plant or Clone (Non-State Tracking)
         * @description **Purpose:** Update plant or clone tag identification for internal cultivation tracking without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant retagging
         *     - `RetagPlantRequest` object in request body with retagging details
         *     - Content-Type: application/json
         *     - Valid existing plant identification and new tag information
         *     - Feature flag "rollout.trym-integration" must be enabled
         *
         *     **Response Data:**
         *     - Returns HTTP 200 with no response body on success
         *     - No data returned - operation confirmation only
         *     - Operation status confirms successful retagging completion
         *
         *     **Retagging Process:**
         *     - **Tag Replacement**: Updates existing plant tag with new identification
         *     - **Plant Identification**: Maintains plant record while updating tag reference
         *     - **Validation**: Ensures new tag is unique and valid for the facility
         *     - **Immediate Update**: Tag change reflected immediately in cultivation systems
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Tag updates for internal cultivation tracking only
         *     - **No External Reporting**: Retagging NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal plant management and tag organization
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Retagging Applications:**
         *     - **Tag Damage**: Replace damaged or unreadable plant tags
         *     - **Organization**: Update tag numbering for facility organization
         *     - **Growth Stage**: Retag plants when moving between cultivation areas
         *     - **Clone Management**: Update clone tags for genetic tracking
         *
         *     **Common Use Cases:**
         *     - Replace damaged plant tags for continued tracking
         *     - Update plant identification for facility reorganization
         *     - Retag clones for genetic lineage management
         *     - Maintain plant tag consistency across cultivation areas
         *     - Support internal cultivation workflow tag requirements
         *
         *     **Performance & Limits:**
         *     - Single plant retagging operation for targeted tag management
         *     - Validation performed before any tag changes
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility tag management workflows
         *
         *     **Related Endpoints:**
         *     - `POST /plant/nonsts/update` - Update other plant data beyond tags
         *     - `GET /plant` - Retrieve plant information with current tags
         *     - `POST /plant/nonsts` - Create new plants with initial tags
         *
         *     **Important Notes:**
         *     - **Feature Gated**: Requires "rollout.trym-integration" feature flag to be enabled
         *     - **Tag Uniqueness**: New tag must be unique within the cultivation facility
         *     - **Internal Tracking**: Tag changes for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Cultivation Continuity**: Maintains plant tracking continuity with updated identification
         */
        post: operations["PlantNonstsRetagPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/batch/retire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retire Immature Plant Batch (Non-State Tracking)
         * @description **Purpose:** Retire batches of immature plants or clones from active cultivation for internal tracking without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for plant retirement
         *     - `RetireImmaturePlantsRequest` object in request body with retirement details
         *     - Content-Type: application/json
         *     - Valid immature plant or clone identification for retirement
         *     - Plants must be in immature stage for this operation
         *
         *     **Response Data:**
         *     - Returns HTTP 200 with no response body on success
         *     - No data returned - operation confirmation only
         *     - Status confirmation indicates successful plant retirement completion
         *
         *     **Plant Retirement Process:**
         *     - **Batch Retirement**: Retires multiple immature plants or clones in single operation
         *     - **Status Change**: Updates plant status to retired/inactive in cultivation systems
         *     - **Validation**: Ensures plants are valid and in immature stage before retirement
         *     - **Immediate Effect**: Retirement status applied immediately to cultivation records
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Plant retirement for internal cultivation tracking only
         *     - **No External Reporting**: Retirement actions NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal plant lifecycle management
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Immature Plant Retirement Reasons:**
         *     - **Quality Control**: Remove plants that don't meet cultivation standards
         *     - **Space Management**: Retire excess plants for cultivation area optimization
         *     - **Health Issues**: Remove unhealthy or diseased plants from active cultivation
         *     - **Selection Process**: Retire plants not selected for continued cultivation
         *     - **Facility Management**: Clear immature plants for cultivation workflow changes
         *
         *     **Common Use Cases:**
         *     - Retire poor-performing immature plants or clones
         *     - Remove excess immature plants to optimize cultivation space
         *     - Clear unhealthy plants from cultivation areas
         *     - Support cultivation selection and quality control processes
         *     - Manage immature plant inventory for facility efficiency
         *
         *     **Performance & Limits:**
         *     - Batch processing for efficient plant retirement workflows
         *     - Validation performed before any retirement actions
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility plant lifecycle management
         *
         *     **Related Endpoints:**
         *     - `POST /plant/nonsts/batch/immatureplants` - Create immature plant batches
         *     - `POST /plant/nonsts/update` - Update immature plants before retirement
         *     - `GET /plant` - Retrieve plant information including retirement status
         *     - `POST /plant/nonsts/batch/convert/immatureplants` - Convert immature to mature plants
         *
         *     **Important Notes:**
         *     - **Immature Only**: This endpoint specifically handles immature plants and clones
         *     - **Batch Operation**: Can retire multiple plants efficiently in single request
         *     - **Internal Tracking**: Retirement for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Irreversible**: Plant retirement action cannot be easily undone
         *     - **Validation Required**: Plants must exist and be in immature stage for retirement
         */
        post: operations["PlantNonstsBatchRetirePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/batch/finish-harvest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finish or Unfinish Harvest Batch (Non-State Tracking)
         * @description **Purpose:** Mark harvest batches as finished or unfinished for internal cultivation tracking without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for harvest status management
         *     - `FinishHarvestBatchRequest` object in request body with harvest batch details
         *     - Content-Type: application/json
         *     - Valid harvest batch identification and finish/unfinish action
         *     - Feature flag "rollout.trym-integration" must be enabled
         *
         *     **Response Data:**
         *     - Returns HTTP 200 with no response body on success
         *     - No data returned - operation confirmation only
         *     - Status confirmation indicates successful harvest batch update
         *
         *     **Finish/Unfinish Operations:**
         *     - **FINISH**: Marks harvest batch as completed and ready for processing
         *     - **UNFINISH**: Reverts harvest batch to in-progress status for continued work
         *     - **Status Toggle**: Can switch between finished and unfinished states as needed
         *     - **Batch Management**: Affects entire harvest batch status uniformly
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Harvest status updates for internal cultivation tracking only
         *     - **No External Reporting**: Status changes NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal harvest workflow management
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Harvest Batch Status Management:**
         *     - **Workflow Control**: Controls harvest batch progression through processing stages
         *     - **Quality Gates**: Finish status indicates batch readiness for next processing steps
         *     - **Reversible Actions**: Unfinish allows returning to active harvest work
         *     - **Batch Integrity**: Maintains harvest batch data consistency
         *
         *     **Common Use Cases:**
         *     - Mark harvest batches as complete when cultivation work is finished
         *     - Unfinish harvest batches to allow additional cultivation work
         *     - Control harvest workflow progression through processing stages
         *     - Manage harvest batch status for internal tracking and reporting
         *     - Support cultivation facility harvest workflow requirements
         *
         *     **Performance & Limits:**
         *     - Single batch operation for targeted harvest status management
         *     - Immediate status update reflected in cultivation systems
         *     - Optimized for harvest workflow management and status tracking
         *     - Validation performed before any status changes
         *
         *     **Related Endpoints:**
         *     - `GET /harvest` - Retrieve harvest batch information and current status
         *     - `POST /plant/harvest` - Official plant harvest operations (state tracked)
         *     - `POST /plant/nonsts/update` - Update plant data related to harvest
         *
         *     **Important Notes:**
         *     - **Feature Gated**: Requires "rollout.trym-integration" feature flag to be enabled
         *     - **Reversible Operation**: Finish and unfinish actions can be toggled as needed
         *     - **Internal Tracking**: Status changes for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Workflow Control**: Critical for managing internal harvest processing workflows
         */
        post: operations["PlantNonstsBatchFinish-harvestPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/split": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Split Immature Plant Batch (Non-State Tracking)
         * @description **Purpose:** Split immature plant or clone batches into two separate batches for internal cultivation management without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for batch splitting
         *     - `SplitImmaturePlantsRequest` object in request body with split details
         *     - Content-Type: application/json
         *     - Valid immature batch identification and split configuration
         *     - Source batch must contain multiple plants to enable splitting
         *
         *     **Response Data:**
         *     - Returns single `ApiResult<SplitImmaturePlantResult>` object (not array) with split results
         *     - Includes details of both resulting batches after split operation
         *     - Batch split status and success confirmation
         *     - Plant distribution information for the two new batches
         *
         *     **Batch Splitting Process:**
         *     - **Source Division**: Divides single immature batch into two separate batches
         *     - **Plant Distribution**: Distributes plants between original and new batch
         *     - **Batch Integrity**: Maintains plant tracking continuity through split operation
         *     - **Validation**: Ensures source batch is valid and contains sufficient plants for splitting
         *     - **Atomic Operation**: Split succeeds or fails as complete operation
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Batch splitting for internal cultivation tracking only
         *     - **No External Reporting**: Split operations NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal batch management and cultivation workflows
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Immature Batch Splitting Applications:**
         *     - **Facility Management**: Split large batches for different cultivation areas
         *     - **Growth Phase Management**: Separate plants based on development stage
         *     - **Quality Control**: Isolate high-performing plants from standard batches
         *     - **Genetic Management**: Separate clones for different breeding programs
         *     - **Space Optimization**: Distribute plants across multiple cultivation rooms
         *
         *     **Common Use Cases:**
         *     - Split large immature plant batches for better facility management
         *     - Separate high-quality clones from standard cultivation batches
         *     - Distribute plants across different cultivation rooms or areas
         *     - Create specialized batches for different cultivation treatments
         *     - Support cultivation workflow organization and plant management
         *
         *     **Performance & Limits:**
         *     - Single batch operation creating two resulting batches
         *     - Validation performed before any batch splitting
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility batch management workflows
         *
         *     **Related Endpoints:**
         *     - `POST /plant/nonsts/batch/immatureplants` - Create original immature plant batches
         *     - `POST /plant/nonsts/update` - Update plants within split batches
         *     - `GET /plant` - Retrieve plant information for both resulting batches
         *     - `POST /plant/nonsts/batch/convert/immatureplants` - Convert split batches to mature
         *
         *     **Important Notes:**
         *     - **Immature Only**: This endpoint specifically handles immature plant and clone batches
         *     - **Two-Batch Result**: Split operation always creates exactly two batches
         *     - **Plant Continuity**: All plants maintain their tracking through the split process
         *     - **Internal Tracking**: Split operations for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Batch Requirements**: Source batch must contain multiple plants to enable splitting
         */
        post: operations["PlantNonstsSplitPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plant/nonsts/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Plant Batch (Non-State Tracking)
         * @description **Purpose:** Update plant batch information such as strain or location for internal cultivation tracking without reporting to state traceability systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" or "Cultivation" role authorization required for batch data modification
         *     - `UpdateBatchRequest` object in request body with batch update details
         *     - Content-Type: application/json
         *     - Valid batch identification and field updates
         *     - Feature flag "rollout.trym-integration" must be enabled
         *
         *     **Response Data:**
         *     - Returns HTTP 200 with no response body on success
         *     - No data returned - operation confirmation only
         *     - Status confirmation indicates successful batch update completion
         *
         *     **Batch Update Capabilities:**
         *     - **Strain Updates**: Modify strain information for entire plant batch
         *     - **Location Updates**: Change cultivation location or room assignment for batch
         *     - **Batch Properties**: Update other batch-level cultivation characteristics
         *     - **Bulk Changes**: Apply updates to all plants within the specified batch
         *
         *     **Sparse Update Behavior:**
         *     - **Selective Updates**: Only provided fields in the request will be updated
         *     - **Field Independence**: Each batch property can be updated independently
         *     - **Preservation**: Omitted fields maintain their current values
         *     - **Validation**: All provided updates validated before application
         *
         *     **Non-State Tracking (NONSTS) Behavior:**
         *     - **Internal Only**: Batch updates for internal cultivation tracking only
         *     - **No External Reporting**: Changes NOT transmitted to state traceability systems
         *     - **Cultivation Focus**: Designed for internal batch management and cultivation workflows
         *     - **Compliance Safe**: Does not interfere with official state tracking requirements
         *
         *     **Common Use Cases:**
         *     - Update strain information when batch genetics are reclassified
         *     - Move plant batches to different cultivation rooms or areas
         *     - Modify batch properties for improved cultivation tracking
         *     - Correct batch information for accurate facility management
         *     - Support cultivation workflow batch organization requirements
         *
         *     **Performance & Limits:**
         *     - Single batch operation affecting all plants in the specified batch
         *     - Validation performed before any batch changes
         *     - Changes reflected immediately in internal cultivation systems
         *     - Optimized for cultivation facility batch management workflows
         *
         *     **Related Endpoints:**
         *     - `POST /plant/nonsts/update` - Update individual plant data within batches
         *     - `GET /plant` - Retrieve current plant and batch information
         *     - `POST /plant/nonsts` - Create new plant batches with initial properties
         *
         *     **Important Notes:**
         *     - **Feature Gated**: Requires "rollout.trym-integration" feature flag to be enabled
         *     - **Batch-Wide Impact**: Updates affect all plants within the specified batch
         *     - **Internal Tracking**: Changes for internal cultivation management only
         *     - **State Compliance**: Does not affect official state traceability system records
         *     - **Cultivation Efficiency**: Streamlines batch-level cultivation management operations
         */
        post: operations["PlantNonstsBatchPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preorder/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create PreOrder
         * @description **Purpose:** Create a new customer pre-order by submitting cart items with customer information and fulfillment details.
         *
         *     **Request Requirements:**
         *     - "PreOrder" role authorization required for order creation
         *     - `CreatePreOrderRequest` object in request body with complete order details
         *     - Content-Type: application/json
         *     - Valid customer ID that exists in the system
         *     - **Idempotency Support**: Requires `ConsumerKey` header and `IdempotencyKey` field for duplicate prevention (see [Idempotency Documentation](/pages/idempotency.html))
         *
         *     **Response Data:**
         *     - Returns `PreOrderResponse` object with assigned order ID and transaction ID
         *     - Order ID can be used for tracking and future order operations
         *     - Transaction ID links to the transaction for fulfillment tracking
         *
         *     **Required Request Information:**
         *     - Valid CustomerId for the order recipient
         *     - Array of cart items with products, quantities, and any special instructions
         *     - Order source for tracking and reporting (Web, In-Store, Express)
         *     - Fulfillment details with pickup or delivery information and timing
         *
         *     **Order Sources Available:**
         *     - Web: Online orders from e-commerce platforms
         *     - In-Store: Orders placed directly at dispensary location
         *     - Express: Expedited or curbside pickup orders
         *     - Note: Order Source is deprecated and will be replaced with more comprehensive tracking values
         *
         *     **Delivery Time Windows:**
         *     - TimeWindowXXXDateUtc fields express desired delivery time windows
         *     - May be expanded to pickup orders in the future
         *     - Data exposed to locations with "Delivery Management" feature enabled
         *
         *     **Redemptions Support:**
         *     - Third-party loyalty redemptions and LeafLogix discount codes supported
         *     - Valid types: SpringBig Rewards/Offers, Alpine IQ, LeafLogix Codes, Fyllo
         *     - Redemption ID should be discount code, reward ID, offer ID, or template ID
         *
         *     **Common Use Cases:**
         *     - Process e-commerce orders from online platforms
         *     - Create pickup orders for customer convenience
         *     - Handle delivery orders with specified time windows
         *     - Apply loyalty rewards and promotional discounts
         *     - Enable customers to secure products before visiting store
         *
         *     **Performance & Limits:**
         *     - Uses idempotency key to prevent duplicate order creation
         *     - Product validation ensures availability and purchase limits
         *     - Customer verification confirms validity for location
         *     - Compliance checking for local regulations and restrictions
         *
         *     **Related Endpoints:**
         *     - `POST /preorder/price-cart` - Calculate pricing before order submission
         *     - `POST /transaction/create-anonymous` - Anonymous customers without full profiles
         *
         *
         *     **Important Notes:**
         *     - Payment occurs later at pickup/delivery, not during order creation
         *     - System validates product availability and customer purchase limits
         *     - Customer must exist and be valid for the authenticated location
         *     - Orders must comply with local regulations and purchase restrictions
         *     - Use IdempotencyKey to prevent duplicate order creation
         */
        post: operations["PreorderSubmitPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preorder/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update PreOrder
         * @description **✏️ Purpose:** Modify an existing pre-order's items, delivery information, notes, or redemptions.
         *
         *     **🔄 Updatable Fields:**
         *     - **Cart Items:** Add, remove, or modify product quantities and special instructions
         *     - **Order Notes:** Update customer notes or special handling instructions
         *     - **Delivery Information:** Change delivery address or timing preferences
         *     - **Loyalty Redemptions:** Add, remove, or modify applied discounts and rewards
         *     - **Order Source:** Update tracking source information
         *
         *     **🚫 Non-Updatable Fields:**
         *     - **Customer ID:** Cannot transfer order to different customer
         *     - **Idempotency Key:** Cannot modify unique transaction identifier
         *     - **Order ID:** Core order identifier remains fixed
         *
         *     **📋 Update Behavior:**
         *     - **Redemptions:** If redemptions field is omitted, existing redemptions are preserved
         *     - **Items:** Complete replacement of cart items with provided array
         *     - **Delivery:** Updates only if delivery information is provided
         *     - **Incremental Changes:** Only provided fields are modified
         *
         *     **⏰ Update Restrictions:**
         *     Orders can only be updated while in specific states:
         *     - ✅ **Submitted/Pending:** Full updates allowed
         *     - ✅ **Processing:** Limited updates may be available
         *     - ❌ **Filled/Complete:** No updates permitted
         *     - ❌ **Checked Out:** Payment completed, updates blocked
         *
         *     **🎯 Common Use Cases:**
         *     - **Cart Modifications:** Customer wants to add/remove items before fulfillment
         *     - **Address Changes:** Update delivery location for customer convenience
         *     - **Special Instructions:** Add preparation notes or customer preferences
         *     - **Discount Updates:** Apply newly available promotions or loyalty rewards
         *     - **Fulfillment Changes:** Switch between pickup and delivery options
         *
         *     **🔧 Request Format:**
         *     Provide an `UpdatePreOrderRequest` object with OrderId and the fields to be updated.
         *
         *     **⚠️ Important Notes:**
         *     - **Status Check:** Use the status endpoint to verify order is still updateable
         *     - **Inventory Impact:** Item changes may affect product availability
         *     - **Pricing Recalculation:** Updates may change order totals and taxes
         *     - **Delivery Validation:** Address changes subject to delivery zone verification
         */
        post: operations["PreorderUpdatePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preorder/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel PreOrder
         * @description **❌ Purpose:** Cancel an existing pre-order and release any reserved inventory.
         *
         *     **🔍 Cancellation Requirements:**
         *     Order must be in a cancellable state - use the status endpoint to verify before attempting cancellation.
         *
         *     **✅ Cancellable States:**
         *     - **Submitted/Pending:** Order not yet started by staff
         *     - **Processing:** Order in early preparation stages (may vary by location)
         *
         *     **🚫 Non-Cancellable States:**
         *     - **Checked Out:** Payment has been processed
         *     - **Filled/Complete:** Order fulfillment finished
         *     - **Partially Filled:** Some items already prepared/dispensed
         *     - **In Transit:** Delivery orders already out for delivery
         *
         *     **🔄 Cancellation Effects:**
         *     - **Inventory Release:** Reserved items returned to available inventory
         *     - **Payment Handling:** Refunds processed according to payment method
         *     - **Loyalty Redemptions:** Applied rewards/discounts are restored to customer account
         *     - **Order Status:** Permanently marked as cancelled
         *     - **Customer Notification:** Automated notifications sent if configured
         *
         *     **🎯 Common Cancellation Reasons:**
         *     - **Customer Request:** Customer no longer wants the order
         *     - **Inventory Issues:** Items became unavailable after order placement
         *     - **Payment Problems:** Payment processing failed or was declined
         *     - **Delivery Issues:** Address problems or delivery zone restrictions
         *     - **Business Operations:** Store closure or emergency situations
         *
         *     **🔧 Request Format:**
         *     Provide a `CancelPreOrderRequest` object with the OrderId to cancel.
         *
         *     **Performance & Limits:**
         *     - Rate limited to 240 requests per minute for order management protection
         *     - Single order cancellation operation for targeted processing
         *     - Immediate inventory and payment processing upon successful cancellation
         *
         *     **⚠️ Important Notes:**
         *     - **Irreversible Action:** Cancelled orders cannot be restored or reactivated
         *     - **Status Verification:** Always check cancellable status before attempting cancellation
         *     - **Refund Processing:** Payment refunds may take time depending on payment method
         *     - **Inventory Impact:** Cancellation immediately releases reserved inventory
         *     - **Customer Communication:** Consider notifying customer of cancellation reason
         */
        post: operations["PreorderCancelPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preorder/Status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get PreOrder Status
         * @description **📊 Purpose:** Retrieve current status and details for pre-orders to track fulfillment progress.
         *
         *     **🔍 Query Options:**
         *     - **Specific Order:** Provide PreOrderId to get detailed status for a single order
         *     - **All Open Orders:** Omit PreOrderId to retrieve all recent active orders (last 14 days)
         *     - **Line Item Details:** Set includeLineItems=true for detailed product information (requires PreOrderId)
         *
         *     **📋 Status Information Returned:**
         *     - **Order Details:** Order ID, transaction ID, customer information, timestamps
         *     - **Current Status:** Order state (Submitted, Processing, Filled, Complete, Cancelled)
         *     - **Fulfillment Info:** Pickup/delivery details, estimated completion times
         *     - **Update Permissions:** Whether order can still be modified or cancelled
         *     - **Payment Status:** Payment processing state and totals
         *     - **Line Items:** Product details, quantities, allocated inventory (when requested)
         *
         *     **📦 Order Status States:**
         *     - **Submitted:** Order received and queued for processing
         *     - **Processing:** Staff actively preparing order items
         *     - **Filled:** All items prepared and ready for customer
         *     - **Complete:** Customer has received order (pickup/delivery completed)
         *     - **Cancelled:** Order cancelled and inventory released
         *
         *     **⚡ Performance Features:**
         *     - **Optimized for Real-Time:** Designed for frequent status checking and monitoring
         *     - **Batch Queries:** Retrieve multiple order statuses efficiently without PreOrderId
         *     - **Selective Detail:** Choose level of detail needed with includeLineItems parameter
         *
         *     **🎯 Common Use Cases:**
         *     - **Customer Updates:** Provide real-time order progress to customers
         *     - **Operations Dashboard:** Monitor all active orders across fulfillment workflow
         *     - **Integration Sync:** Keep external systems updated with current order states
         *     - **Customer Service:** Quick lookup of order status for support inquiries
         *     - **Automated Notifications:** Trigger customer alerts based on status changes
         *
         *     **⚠️ Important Notes:**
         *     - **Line Item Restriction:** includeLineItems requires a specific PreOrderId
         *     - **Recent Orders Filter:** Bulk queries return orders from last 14 days only
         *     - **Location Scoped:** Results filtered to authenticated user's location
         *     - **Real-Time Data:** Status reflects current state, may change during fulfillment
         */
        get: operations["PreorderStatusGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preorder/price-cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate Cart Pricing
         * @description **💰 Purpose:** Calculate accurate pricing for a cart before order submission, including taxes, discounts, and final totals.
         *
         *     **📋 Required Information:**
         *     - **Customer Identity:** Either CustomerId (existing customer) OR CustomerTypeId (customer category)
         *     - **Cart Items:** Array of products with quantities to be priced
         *     - **Fulfillment Type:** Specify if delivery pricing applies (affects taxes/fees)
         *
         *     **💵 Pricing Components Calculated:**
         *     - **Subtotal:** Base product prices multiplied by quantities
         *     - **Taxes:** Location-specific tax rates applied to taxable items
         *     - **Discounts:** Customer-specific pricing, loyalty discounts, promotional offers
         *     - **Delivery Fees:** Additional charges for delivery service (if applicable)
         *     - **Final Total:** Complete order amount including all fees and adjustments
         *
         *     **🎯 Customer Pricing Options:**
         *     - **Existing Customer:** Use CustomerId for personalized pricing and loyalty benefits
         *     - **Customer Type:** Use CustomerTypeId for category-based pricing (Medical, Recreational, etc.)
         *     - **Delivery Context:** Set IsDelivery=true to include delivery-specific pricing
         *
         *     **🔍 Pricing Accuracy:**
         *     - **Real-Time Calculations:** Pricing reflects current product costs and tax rates
         *     - **Location-Specific:** Taxes and fees calculated based on dispensary location
         *     - **Customer-Specific:** Applies individual discounts, loyalty rewards, and membership benefits
         *     - **Delivery Zones:** Delivery fees calculated based on customer address when provided
         *
         *     **🎯 Common Use Cases:**
         *     - **Cart Preview:** Show customers accurate totals before checkout
         *     - **Price Comparison:** Compare costs across different customer types or delivery options
         *     - **Integration Sync:** Keep external e-commerce platforms synchronized with current pricing
         *     - **Customer Service:** Provide accurate quotes for customer inquiries
         *     - **Mobile Apps:** Real-time cart totals for mobile ordering experiences
         *
         *     **🔧 Request Format:**
         *     Provide a `PriceCartRequest` object with customer information, cart items, and delivery preferences.
         *
         *     **Performance & Limits:**
         *     - Rate limited to 240 requests per minute for pricing calculation protection
         *     - Real-time pricing calculations optimized for responsive user experience
         *     - Single cart operation for immediate pricing feedback
         *
         *     **⚠️ Important Notes:**
         *     - **Unique Products:** Each product should only appear once in the cart array
         *     - **Customer Requirement:** Must specify either CustomerId OR CustomerTypeId (not both)
         *     - **Pricing Volatility:** Prices may change between calculation and order submission
         *     - **Location Dependency:** Pricing is specific to the authenticated dispensary location
         *     - **Address Impact:** Delivery address affects tax calculations and delivery fees
         */
        post: operations["PreorderPrice-cartPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-tiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pricing Tiers
         * @description **Purpose:** Retrieves the complete list of pricing tiers available for the authenticated organization for product pricing strategy and customer segmentation.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of pricing tier objects: `[{ PricingTier }, ...]`
         *     - Array typically contains 2-8 pricing tiers per organization
         *     - Returns empty array `[]` if no pricing tiers configured (rare)
         *     - Includes tier ID, name, and configuration details
         *     - Organization-level pricing tiers for customer segmentation (e.g., "Retail", "Wholesale", "Medical", "VIP")
         *     - Results filtered to authenticated organization level
         *
         *     **Common Use Cases:**
         *     - Configure product pricing based on customer tier assignments
         *     - Support tiered pricing strategies for different customer segments
         *     - Populate pricing tier dropdown lists in customer management forms
         *     - Validate pricing tier assignments in product and order management systems
         *     - Generate tier-specific pricing reports and analytics
         *     - Enable dynamic pricing based on customer classifications
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small dataset suitable for client-side caching
         *     - No pagination needed due to limited number of pricing tiers
         *     - Results consistent across all locations within organization
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Get products with tier-based pricing
         *     - `GET /customer/customer-types` - Get customer types that may use pricing tiers
         *     - Pricing calculation endpoints that utilize these tiers
         *
         *     **Important Notes:**
         *     - Pricing tiers are defined at organization level (LSP) not location level
         *     - Essential for implementing tiered pricing strategies and customer segmentation
         *     - Used for dynamic pricing calculations based on customer classifications
         *     - Supports business models with wholesale, retail, and VIP pricing structures
         *     - May be used in conjunction with customer types for comprehensive pricing strategies
         */
        get: operations["Pricing-tiersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/producers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Producers
         * @description **Purpose:** Retrieve basic producer identification information for product attribution and reference data needs.
         *
         *     **Request Requirements:**
         *     - Valid authentication required for producer data access
         *     - No request body needed
         *     - No query parameters required
         *
         *     **Response Data:**
         *     - Returns array of producer objects: `[{ Producer }, ...]`
         *     - Array typically contains 1-50 producers per organization
         *     - Returns empty array `[]` if no producers configured (rare)
         *     - Producer details include basic identification information only
         *     - Results automatically filtered to authenticated organization and exclude deleted records
         *
         *     **Producer Information:**
         *     - **Producer ID**: Unique identifier for the producer
         *     - **Producer Name**: Display name of the producer
         *
         *     **Common Use Cases:**
         *     - Populate producer dropdown lists in product management forms
         *     - Display producer names for product attribution and branding
         *     - Support basic producer identification in product catalogs
         *     - Enable producer-based filtering and organization in product displays
         *     - Provide producer reference data for product creation workflows
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Organization-scoped results for operational relevance and security
         *     - Small dataset suitable for client-side caching
         *     - Essential reference data for basic producer identification
         *
         *     **Related Endpoints:**
         *     - `GET /products` - View products that include producer information
         *     - `GET /brands` - Related brand information for product attribution
         *     - `GET /vendors` - Related vendor information and business relationships
         *
         *     **Important Notes:**
         *     - **Basic Reference Data**: Provides minimal producer identification information
         *     - **Organization Scoped**: Results filtered to authenticated organization level and exclude deleted records
         *     - **Limited Data**: Only includes producer ID and name - no licensing, contact, or compliance details
         *     - **Product Attribution**: Enables basic producer attribution for product displays
         */
        get: operations["ProducersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/location-overrides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Location Product Overrides
         * @description **Purpose:** Retrieve all location-specific product overrides for pricing, availability, and display customization at the current location.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for product override data access
         *     - No query parameters required
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of `LocationProductOverride` objects with location-specific settings
         *     - Array typically contains 50-5,000+ overrides depending on location customization
         *     - Returns empty array `[]` if no overrides exist for the location (not null)
         *     - If a field is `null`, then the product master version of that field applies
         *     - Includes pricing overrides, availability settings, and display configurations
         *     - Results automatically filtered to authenticated location
         *
         *     **Override Behavior:**
         *     - **Null Fields**: When override field is null, the product master value is used
         *     - **Set Fields**: When override field has a value, it replaces the master value
         *     - **Location Specific**: Overrides only apply to the authenticated location
         *     - **Inheritance**: Non-overridden fields inherit from product master data
         *
         *     **Common Use Cases:**
         *     - Retrieve location-specific pricing for multi-location businesses
         *     - Get availability overrides for location inventory management
         *     - Access display customizations for location-specific product presentation
         *     - Synchronize location overrides with external point-of-sale systems
         *     - Generate location-specific product catalogs and pricing sheets
         *
         *     **Performance & Limits:**
         *     - Optimized for location-specific product management workflows
         *     - Results filtered automatically to current location scope
         *     - Efficient for multi-location businesses with location-specific pricing
         *     - Consider caching for frequent access to override data
         *
         *     **Related Endpoints:**
         *     - `POST /products/location-overrides` - Create or update location overrides
         *     - `GET /products` - Get product master data with default values
         *     - `GET /inventory` - Get current inventory levels for overridden products
         *
         *     **Important Notes:**
         *     - **Inheritance Model**: Null override fields inherit from product master data
         *     - **Location Scoped**: Results automatically filtered to authenticated location
         *     - **Override Priority**: Location overrides take precedence over master product data
         *     - **Multi-Location**: Essential for businesses operating multiple dispensary locations
         *     - **Pricing Control**: Enables location-specific pricing strategies and market adaptation
         */
        get: operations["ProductsLocation-overridesGet"];
        put?: never;
        /**
         * Create or Update Location Product Overrides
         * @description **Purpose:** Create or update location-specific product overrides for pricing, availability, and display customization to support multi-location business operations.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for product override modification
         *     - Array of `LocationProductOverrideRequest` objects in request body
         *     - Content-Type: application/json
         *     - Valid ProductId required for each override
         *
         *     **Response Data:**
         *     - Returns HTTP 200 with no response body on success
         *     - No data returned - operation confirmation only
         *     - Returns HTTP 400 with validation errors if request data is invalid
         *     - Partial success possible: some overrides may save even if others fail
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When no existing override exists for the ProductId at this location, a new override is created
         *     - **UPDATE**: When an override already exists for the ProductId at this location, it is updated
         *     - **Identification**: Override existence determined by ProductId and authenticated location
         *     - **Automatic Detection**: System automatically determines create vs update based on existing data
         *
         *     **Sparse Update Behavior:**
         *     - **Omitted Fields**: Retain their current override value (no change)
         *     - **Null Values**: Remove the override for that field (product master value will apply)
         *     - **Set Values**: Update the override with the provided value
         *     - **Field Independence**: Each field can be updated independently without affecting others
         *
         *     **Override Management:**
         *     - **Removal**: Set fields to null to remove overrides and revert to product master values
         *     - **Addition**: Set fields to specific values to create new overrides
         *     - **Location Scoped**: All overrides apply only to the authenticated location
         *     - **Dual Pricing**: Automatically handles recreational price sync when dual pricing is disabled
         *
         *     **Common Use Cases:**
         *     - Set location-specific pricing for multi-location businesses
         *     - Override product availability for location inventory management
         *     - Customize product display settings for location-specific presentation
         *     - Manage location-based pricing strategies and market adaptation
         *     - Synchronize pricing changes from external systems to specific locations
         *
         *     **Performance & Limits:**
         *     - Batch processing for efficient multi-product override updates
         *     - Validation performed before any changes to ensure data integrity
         *     - Partial success handling: some overrides may succeed even if others fail
         *     - Optimized for location-specific product management workflows
         *
         *     **Related Endpoints:**
         *     - `GET /products/location-overrides` - Retrieve current location overrides
         *     - `GET /products` - Get product master data for comparison
         *     - `GET /inventory` - Check inventory levels for overridden products
         *
         *     **Important Notes:**
         *     - **Partial Success**: Some overrides may save successfully even if others fail validation
         *     - **Null Behavior**: Setting fields to null removes overrides and reverts to master data
         *     - **Location Isolation**: Overrides only affect the authenticated location
         *     - **Validation Required**: All ProductIds must exist and be valid for the location
         *     - **Dual Pricing Sync**: Recreational prices automatically sync with medical when dual pricing disabled
         */
        post: operations["ProductsLocation-overridesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Products
         * @description **Purpose:** Retrieve comprehensive product catalog information for API-enabled products, regardless of current inventory levels.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for product data access
         *     - Optional query parameters for filtering results
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of product objects: `[{ ProductDetail }, ...]`
         *     - Array may contain 0 to 10,000+ products depending on location inventory size
         *     - Returns empty array `[]` if no products match criteria (not null)
         *     - Product details including SKU, name, description, category, brand, strain information
         *     - Pricing data with retail and medical pricing, tax rates, discount eligibility
         *     - Classification data including product types, categories, regulatory classifications
         *     - Lab results with potency data, cannabinoid profiles, test results when available
         *     - Inventory data showing stock levels and availability status
         *     - Media assets including product images and visual content
         *     - Compliance data with external IDs, producer information, regulatory data
         *
         *     **Filtering Options:**
         *     - No parameters: Returns all API-enabled products for the location
         *     - fromLastModifiedDateUTC: Returns products modified after this date for incremental sync
         *     - isActive: Filter by active status (true/false/null for all)
         *
         *     **Product Filtering Logic:**
         *     - Only products specifically enabled for API access are returned
         *     - Only includes products with online availability enabled (onlyOnlineAvailable = true)
         *     - Products returned even if currently out of stock
         *     - Results automatically filtered to authenticated user's location only
         *
         *     **Common Use Cases:**
         *     - Get complete product catalog for first-time integration setup
         *     - Use incremental updates with fromLastModifiedDateUTC to sync only recent changes
         *     - Populate e-commerce online store with complete product information
         *     - Maintain up-to-date product database for point-of-sale systems
         *     - Build dispensary menus with detailed product information
         *     - Analyze product catalog for purchasing and inventory planning decisions
         *
         *     **Performance & Limits:**
         *     - Use incremental sync with fromLastModifiedDateUTC for regular updates to minimize data transfer
         *     - Filter by isActive=true to exclude discontinued products for better performance
         *     - Run full catalog sync during off-peak hours for optimal performance
         *     - Large product catalogs may require pagination in future versions
         *
         *     **Related Endpoints:**
         *     - `GET /inventory` - Current stock levels for products with available inventory
         *     - `GET /products/strains` - Strain-specific information and genetics data
         *     - `GET /products/external-categories` - Product categorization and classification data
         *
         *     **Important Notes:**
         *     - This endpoint respects the "API access" setting on products for access control
         *     - Returns only online-available products (excludes products not enabled for online sales)
         *     - Response includes comprehensive product information for full integration capabilities
         *     - Products are automatically filtered to the authenticated location
         */
        get: operations["ProductsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update Product
         * @description **Purpose:** Creates a new product or updates an existing product with comprehensive product information for inventory management.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for product data access
         *     - `ProductDetailUpload` object in request body with product details
         *     - Content-Type: application/json
         *     - SKU and ProductName required for new products
         *
         *     **Response Data:**
         *     - Returns single `ProductDetail` object (not array) with updated product information
         *     - Response format: `{ ProductDetail }`
         *     - Includes assigned product ID for new products or updated ID for existing products
         *     - Complete product information with all fields populated
         *
         *     **CRITICAL DATA LOSS WARNING:**
         *     Most fields will be overwritten with null/zero values if not provided in the request.
         *     RECOMMENDED APPROACH: First GET the existing product, modify only the fields you want to change, then POST the complete object back.
         *
         *     **Required Fields:**
         *     - For CREATE: SKU and ProductName are required
         *     - For UPDATE: Only ProductId is required (SKU and ProductName can be omitted to preserve existing values)
         *
         *     **Field Behavior:**
         *     - Optional<T> Fields: Can be explicitly set to null or omitted to preserve existing values
         *     - Regular Fields: Will be set to null/zero if omitted, potentially causing data loss
         *     - Exception: Fields like SKU and ProductName preserve existing values when omitted during updates
         *
         *     **Common Use Cases:**
         *     - Add new products to the catalog for inventory management
         *     - Update existing product information when details change
         *     - Synchronize product data from external inventory systems
         *     - Bulk product updates for pricing or categorization changes
         *     - Maintain accurate product information for compliance and sales
         *
         *     **Performance & Limits:**
         *     - Single product operation for targeted updates
         *     - Immediate validation and response
         *     - Changes reflected immediately in product catalogs
         *     - Consider using GET before POST to avoid data loss
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Retrieve existing product data before updates
         *     - `GET /brand` - Get valid brand IDs for product association
         *     - `GET /strains` - Get valid strain IDs for product classification
         *
         *     **Important Notes:**
         *     - Data loss risk: Always retrieve existing product data before updates
         *     - Product ID assignment for successful new product creation
         *     - Validation performed before creation/update to ensure data integrity
         *     - Changes propagate to inventory and sales systems immediately
         */
        post: operations["ProductsProductPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk Create or Update Products
         * @description **Purpose:** Create or update multiple products in a single operation for efficient catalog management and bulk data synchronization.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for product data operations
         *     - Array of `ProductDetailUpload` objects in request body with product details
         *     - Content-Type: application/json
         *     - Each product requires SKU and ProductName for creation, ProductId for updates
         *
         *     **Response Data:**
         *     - Returns mixed array: `[{ ProductDetail }, { SaveProductError }, ...]`
         *     - Successful operations return complete `ProductDetail` objects with updated product information
         *     - Failed operations return `SaveProductError` objects with ProductId, SKU, ProductName, and ErrorMessage
         *     - HTTP 200 for successful processing - check individual items in response array for success/error status
         *     - HTTP 400 for validation errors that prevent processing
         *     - Mixed array allows partial success - some products may succeed while others fail
         *
         *     **CRITICAL DATA LOSS WARNING:**
         *     Most fields will be overwritten with null/zero values if not provided in the request.
         *     **RECOMMENDED APPROACH:** First GET existing products, modify only desired fields, then POST complete objects back.
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When ProductId is null or omitted, new product records will be created
         *     - **UPDATE**: When ProductId is provided with valid product IDs, existing products will be updated
         *     - **Mixed Operations**: Single request can include both create and update operations
         *     - **Validation**: SKU and ProductName required for creates, ProductId required for updates
         *     - **Individual Processing**: Each product processed independently - some may succeed while others fail
         *
         *     **Field Preservation Behavior:**
         *     - **Optional<T> Fields**: Can be explicitly set to null or omitted to preserve existing values
         *     - **Regular Fields**: Will be set to null/zero if omitted, potentially causing data loss
         *     - **Preserved Fields**: SKU and ProductName preserve existing values when omitted during updates
         *     - **Best Practice**: Always provide complete product objects to avoid unintended data loss
         *
         *     **Error Handling:**
         *     - **Partial Success**: Some products may succeed while others fail within the same request
         *     - **Error Identification**: Failed products include ErrorMessage, ProductId, SKU, and ProductName
         *     - **Validation Errors**: Returns HTTP 400 for validation errors that prevent processing
         *     - **Processing Errors**: Returns HTTP 200 with mixed results for individual product errors
         *     - **Rollback Behavior**: No automatic rollback - successful operations persist even if others fail
         *
         *     **Common Use Cases:**
         *     - Import large product catalogs from external systems efficiently
         *     - Synchronize product changes across multiple products simultaneously
         *     - Bulk update pricing, categorization, or product attributes
         *     - Migrate product data between systems with batch processing
         *     - Update multiple products after inventory or regulatory changes
         *
         *     **Performance & Limits:**
         *     - Optimized for bulk product operations and catalog management
         *     - Individual product validation and processing for data integrity
         *     - No automatic external system broadcasting for performance
         *     - Efficient for large-scale product catalog updates
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Retrieve existing product data before bulk updates
         *     - `POST /products/product` - Create or update individual products with external sync
         *     - `GET /brand` - Get valid brand IDs for product associations
         *     - `GET /strains` - Get valid strain IDs for product classifications
         *
         *     **Important Notes:**
         *     - **Individual Processing**: Each product processed independently with separate success/failure results
         *     - **No External Broadcast**: Traceability system broadcasting not supported on this endpoint
         *     - **Data Loss Risk**: Always retrieve existing product data before bulk updates
         *     - **Error Checking Required**: Always check response for individual product errors
         *     - **Performance Optimized**: Designed for efficient bulk operations without external system overhead
         */
        post: operations["ProductsProductsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/set-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Product Image
         * @description **Purpose:** Add or update a single image for a product to enhance product presentation and visual merchandising.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for product image management
         *     - `SetImageRequest` object in request body with ProductId and image data
         *     - Content-Type: application/json
         *     - Valid ProductId and base64-encoded image data required
         *
         *     **Response Data:**
         *     - Returns single image response object: `{ SetImageResponse }`
         *     - Includes unique image ID for future image management operations
         *     - Provides image URL for immediate access to uploaded image
         *     - Contains ImageId (integer) and ImageUrl (string) fields only
         *
         *     **Image Processing:**
         *     - **Single Image**: Adds one image per request to the specified product
         *     - **Image ID Assignment**: Returns unique DPOS product image ID for tracking
         *     - **Format Support**: Supports standard image formats via base64 encoding
         *     - **Validation**: Validates image data and product existence before processing
         *
         *     **Integration Behavior:**
         *     - **Metrc Integration**: If using Metrc with upload product images enabled, the image will automatically upload to Metrc on next product save
         *     - **Automatic Sync**: Integration occurs when `Save Product` is called for this ProductId
         *     - **Compliance**: Supports regulatory compliance through integrated system image sync
         *     - **External Systems**: Compatible with cultivation and compliance system requirements
         *
         *     **Common Use Cases:**
         *     - Add product photos for e-commerce and point-of-sale display
         *     - Update existing product images for marketing and merchandising
         *     - Comply with regulatory requirements for product visual documentation
         *     - Enhance customer experience with high-quality product imagery
         *     - Support integrated systems with automated image synchronization
         *
         *     **Performance & Limits:**
         *     - Single image processing for targeted product updates
         *     - Base64 encoding for secure image data transmission
         *     - Validation performed before processing to ensure data integrity
         *     - Optimized for product visual merchandising workflows
         *
         *     **Related Endpoints:**
         *     - `POST /products/remove-image` - Remove product images using the returned image ID
         *     - `POST /products/product` - Save product data and trigger Metrc image sync
         *     - `GET /products` - Retrieve products with associated image information
         *
         *     **Important Notes:**
         *     - **Image ID Required**: Save the returned image ID for future image management operations
         *     - **Metrc Auto-Upload**: Images automatically sync to Metrc on next product save when enabled
         *     - **Single Operation**: One image per request - use multiple requests for multiple images
         *     - **Validation Required**: ProductId must exist and image data must be valid
         *     - **Integration Ready**: Supports automated compliance system synchronization
         */
        post: operations["ProductsSet-imagePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/remove-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Product Image
         * @description **Purpose:** Remove a specific image from a product using the image ID to maintain clean product presentation and manage visual merchandising.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for product image management
         *     - `DeleteImageRequest` object in request body with ProductId and ImageId
         *     - Content-Type: application/json
         *     - Valid ProductId and ImageId required (ImageId obtained from set-image response)
         *
         *     **Response Data:**
         *     - Returns success confirmation object: `{ SuccessResult }`
         *     - Simple success confirmation with HTTP 200 status
         *     - No additional data fields returned beyond success indicator
         *
         *     **Image Removal Process:**
         *     - **Targeted Deletion**: Removes specific image identified by ImageId
         *     - **Product Association**: Verifies image belongs to the specified ProductId
         *     - **Validation**: Ensures both ProductId and ImageId exist and are valid
         *     - **Clean Removal**: Permanently removes image from product and storage systems
         *
         *     **Safety & Validation:**
         *     - **Existence Check**: Validates ProductId and ImageId before deletion
         *     - **Ownership Verification**: Ensures image belongs to the specified product
         *     - **Authorization**: Confirms user has permission to modify product images
         *     - **Error Handling**: Returns appropriate errors for invalid requests
         *
         *     **Common Use Cases:**
         *     - Remove outdated or incorrect product images from visual merchandising
         *     - Clean up product galleries by deleting unwanted or duplicate images
         *     - Manage product image lifecycle for marketing and compliance requirements
         *     - Maintain accurate product representation in e-commerce and point-of-sale systems
         *     - Support product image management workflows and content updates
         *
         *     **Performance & Limits:**
         *     - Single image deletion for targeted image management
         *     - Immediate removal from product and storage systems
         *     - Validation performed before deletion to ensure data integrity
         *     - Optimized for product visual merchandising and content management workflows
         *
         *     **Related Endpoints:**
         *     - `POST /products/set-image` - Add images and obtain ImageId for future deletion
         *     - `GET /products` - Retrieve products with current image information
         *     - `POST /products/product` - Update product data and manage overall product information
         *
         *     **Important Notes:**
         *     - **ImageId Required**: Use ImageId returned from set-image endpoint for deletion
         *     - **Permanent Operation**: Image deletion is permanent and cannot be undone
         *     - **Validation Critical**: Both ProductId and ImageId must be valid and associated
         *     - **Single Target**: One image per request - use multiple requests for multiple deletions
         *     - **Clean Management**: Essential for maintaining organized product image galleries
         */
        post: operations["ProductsRemove-imagePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/strains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product Strains
         * @description **Purpose:** Retrieve all available cannabis strains for product classification and inventory management in compliance with industry standards.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for strain data access
         *     - No query parameters required
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of strain objects: `[{ StrainDetail }, ...]`
         *     - Array typically contains 50-1,000+ strains depending on dispensary catalog
         *     - Returns empty array `[]` if no strains are configured (not null)
         *     - Basic strain information including ID, name, description, type, and external ID
         *     - Results automatically filtered to authenticated location strain catalog
         *
         *     **Strain Information:**
         *     - **Strain ID**: Unique identifier for the strain
         *     - **Strain Name**: Display name of the strain
         *     - **Strain Description**: Basic text description of the strain
         *     - **Strain Abbreviation**: Short code or abbreviation for the strain
         *     - **Strain Type**: Basic type classification (e.g., Indica, Sativa, Hybrid)
         *     - **External ID**: External system identifier for integration
         *
         *     **Common Use Cases:**
         *     - Populate strain dropdown lists in product creation and management forms
         *     - Display basic strain information for product attribution
         *     - Support strain-based product categorization and filtering
         *     - Enable strain identification in inventory management systems
         *     - Provide strain reference data for product classification workflows
         *
         *     **Performance & Limits:**
         *     - Optimized for product classification and strain selection workflows
         *     - Comprehensive strain database for complete cannabis product categorization
         *     - Results filtered to location-specific strain catalog
         *     - Efficient for strain-based product search and filtering operations
         *
         *     **Related Endpoints:**
         *     - `GET /products` - View products with assigned strain classifications
         *     - `POST /products/product` - Assign strains to products during creation/update
         *     - `GET /strains` - Manage strain master data and configurations
         *
         *     **Important Notes:**
         *     - **Basic Reference Data**: Provides essential strain identification information only
         *     - **Limited Data**: Only includes basic strain details - no cannabinoid profiles, genetics, or effects
         *     - **Product Classification**: Strains used for basic product categorization and identification
         *     - **Location Catalog**: Results filtered to strains available for the authenticated location
         *     - **External Integration**: Includes External ID for traceability system integration
         */
        get: operations["ProductsStrainsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/external-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get External Categories
         * @description **Purpose:** Retrieve external system categories for product classification to support integration with traceability and compliance systems.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for external category data access
         *     - UserId query parameter highly recommended for traceability system integration
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Returns array of string values with external category names
         *     - Response format: `[string, string, ...]`
         *     - Array contains categories available from integrated traceability systems
         *     - Returns empty array `[]` if no external categories are available (not null)
         *     - Category names correspond to external system classification standards
         *     - Used for populating ExternalCategory field in product data
         *     - Results depend on configured integrated systems and user permissions
         *
         *     **Integration Requirements:**
         *     - **Traceability Systems**: Categories pulled from connected compliance systems (e.g., Metrc, BioTrack)
         *     - **User Context**: UserId parameter provides system access context for category retrieval
         *     - **System Configuration**: Available categories depend on integrated system configuration
         *     - **Compliance Mapping**: Categories align with regulatory compliance requirements
         *
         *     **Parameter Guidelines:**
         *     - **UserId**: Technically optional but highly recommended for traceability system calls
         *     - **System Failure**: Call may fail without UserId when categories come from traceability systems
         *     - **Permission Context**: UserId provides proper system access permissions for category retrieval
         *     - **Default Fallback**: Uses default user (ID 6) when UserId not provided
         *
         *     **Common Use Cases:**
         *     - Populate product ExternalCategory field with valid compliance categories
         *     - Synchronize product classifications with regulatory traceability systems
         *     - Ensure product categories align with state compliance requirements
         *     - Support automated product categorization for integrated systems
         *     - Validate product classifications against external system standards
         *
         *     **Performance & Limits:**
         *     - Real-time integration with external traceability systems
         *     - Response time dependent on external system availability
         *     - Error handling for external system connectivity issues
         *     - Optimized for product classification and compliance workflows
         *
         *     **Related Endpoints:**
         *     - `POST /products/product` - Use external categories in ExternalCategory field
         *     - `GET /products` - View products with assigned external categories
         *     - `POST /products/products` - Bulk assign external categories to products
         *
         *     **Important Notes:**
         *     - **UserId Critical**: Highly recommended to prevent traceability system call failures
         *     - **External Dependency**: Categories sourced from integrated traceability systems
         *     - **Compliance Essential**: External categories required for regulatory compliance
         *     - **System Specific**: Available categories depend on configured integrated systems
         *     - **Error Handling**: May return errors if external systems are unavailable
         */
        get: operations["ProductsExternal-categoriesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product Categories
         * @description **Purpose:** Retrieves the complete list of product categories available for the authenticated organization for product classification and menu organization.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of product category objects: `[{ ProductCategory }, ...]`
         *     - Array typically contains 10-30 product categories per organization
         *     - Returns empty array `[]` if no categories configured (rare)
         *     - Includes category ID, name, and master category classification
         *     - Standard cannabis product categories (Flower, Edibles, Concentrates, etc.)
         *     - Results filtered to authenticated organization level and exclude deleted records
         *
         *     **Common Use Cases:**
         *     - Populate product category dropdown lists in product creation forms
         *     - Organize product menus by category for customer browsing
         *     - Validate product categorization in inventory management systems
         *     - Generate category-specific reports for sales analytics
         *     - Support e-commerce product filtering and navigation
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small dataset suitable for client-side caching
         *     - No pagination needed due to limited number of categories
         *     - Results consistent across all locations within organization
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Get products that use these categories
         *     - `POST /product` - Create products with category assignments
         *     - `GET /regulatory-category` - Get regulatory category classifications
         *
         *     **Important Notes:**
         *     - Categories are defined at organization level (LSP) not location level
         *     - Standard cannabis industry categories for compliance and consistency
         *     - Used for product menu organization and customer filtering
         *     - Essential reference data for product management workflows
         */
        get: operations["Product-categoryGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchase-order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Purchase Orders
         * @description **Purpose:** Retrieve purchase orders with comprehensive filtering options to support procurement management and vendor relationship tracking.
         *
         *     **Request Requirements:**
         *     - "PurchaseOrder" role authorization required for purchase order data access
         *     - Optional query parameters available for filtering purchase orders
         *     - Purchase order management permissions for procurement operations
         *
         *     **Response Data:**
         *     - Response format: `[{ PurchaseOrderData }, { PurchaseOrderData }, ...]`
         *     - **No pagination metadata**: Response contains only data array without total counts or page information
         *     - Array contains up to PageSize purchase orders (default 1000)
         *     - Returns empty array `[]` if no purchase orders match filtering criteria
         *     - Includes comprehensive purchase order details and line item information
         *     - Results automatically filtered to authenticated location
         *
         *     **Pagination Usage:**
         *     - **First Request**: Call with PageNumber=0 to get first page
         *     - **Subsequent Requests**: Increment PageNumber for each additional page
         *     - **End Detection**: Continue requesting pages until you receive an empty array `[]`
         *     - **Page Size Control**: Use PageSize parameter to control items per page
         *     - **Example Flow**: Request PageNumber=0 → Process results → Increment PageNumber → Repeat until empty `[]` response
         *
         *     **Pagination Detection:**
         *     - **End of data detection**: Continue requesting pages until you receive an empty array `[]`
         *     - **No metadata provided**: Response does not include total counts, page counts, or hasNextPage indicators
         *     - **Sequential access**: Increment PageNumber from 0 until empty response indicates no more data
         *
         *     **Filtering Options:**
         *     - **FromDateCreated**: Optional date parameter to filter orders created after specific date
         *     - **ToDateCreated**: Optional date parameter to filter orders created before specific date
         *     - **PurchaseOrderId**: Optional integer parameter to retrieve specific purchase order
         *     - **IncludeItemDetails**: Optional boolean to include detailed line item information
         *
         *     **Purchase Order Information Included:**
         *     - **Order Details**: Purchase order identification, status, and vendor information
         *     - **Line Items**: Product details and quantities (when IncludeItemDetails is true)
         *     - **Dates**: Creation, modification, and expected delivery dates
         *     - **Financial Data**: Order totals, costs, and payment information
         *
         *     **Common Use Cases:**
         *     - Display purchase orders for procurement management and vendor tracking
         *     - Filter orders by date ranges for reporting and analysis
         *     - Retrieve specific purchase orders for detailed review and management
         *     - Support vendor relationship management and procurement workflows
         *     - Generate procurement reports and purchase order analytics
         *
         *     **Performance & Limits:**
         *     - Use consistent page size throughout pagination sequence for efficiency
         *     - Monitor response times and adjust page size for optimal performance
         *     - Cache results locally to minimize API calls and improve responsiveness
         *     - Validation performed on all query parameters before processing
         *     - Optimized for procurement management and vendor tracking workflows
         *
         *     **Related Endpoints:**
         *     - `POST /purchase-order` - Create or update purchase orders
         *     - `GET /vendors` - View vendors associated with purchase orders
         *     - `GET /inventory` - View inventory levels for procurement planning
         *
         *     **Important Notes:**
         *     - **Procurement Integration**: Essential for vendor management and procurement workflows
         *     - **Flexible Filtering**: Multiple parameters can be combined for precise order lookup
         *     - **Location Scoped**: Purchase orders filtered to authenticated location operations
         *     - **Validation Required**: All query parameters validated before purchase order retrieval
         */
        get: operations["Purchase-orderGet"];
        put?: never;
        /**
         * Create or Update Purchase Orders
         * @description **Purpose:** Create new purchase orders or update existing purchase orders for procurement management and vendor relationship operations.
         *
         *     **Request Requirements:**
         *     - "PurchaseOrder" role authorization required for purchase order modification
         *     - `CreateUpdatePurchaseOrdersRequest` object in request body with purchase order details
         *     - Content-Type: application/json
         *     - Purchase order management permissions for procurement operations
         *
         *     **Response Data:**
         *     - Returns result object with purchase order creation/update status
         *     - Response format: `{ "createdPurchaseOrderIds": [int, ...], "updatedPurchaseOrderIds": [int, ...] }`
         *     - Includes arrays of created and updated purchase order IDs
         *     - Purchase order identification and processing results
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When PurchaseOrderId is null, a new purchase order will be created
         *     - **UPDATE**: When PurchaseOrderId is non-null, the existing purchase order will be updated
         *     - **Identification**: Purchase order existence determined by PurchaseOrderId value
         *     - **Line Item Updates**: Updates affect both purchase order header and line item details
         *
         *     **Purchase Order Data Fields:**
         *     - **Header Information**: Vendor details, order dates, and procurement specifications
         *     - **Line Items**: Product details, quantities, costs, and delivery requirements
         *     - **Financial Data**: Order totals, taxes, and payment terms
         *     - **Status Information**: Order status and processing workflow details
         *
         *     **Common Use Cases:**
         *     - Create new purchase orders for vendor procurement operations
         *     - Update existing purchase orders with revised quantities or specifications
         *     - Modify purchase order line items for procurement adjustments
         *     - Support vendor relationship management and procurement workflows
         *     - Maintain accurate procurement records and vendor tracking
         *
         *     **Performance & Limits:**
         *     - Validation performed before any purchase order processing
         *     - Batch processing for multiple purchase order operations
         *     - Optimized for procurement management and vendor tracking workflows
         *     - Changes reflected immediately in procurement and vendor systems
         *
         *     **Related Endpoints:**
         *     - `GET /purchase-order` - Retrieve purchase orders for review before updates
         *     - `GET /vendors` - View vendors for purchase order creation
         *     - `GET /inventory` - Check inventory levels for procurement planning
         *
         *     **Important Notes:**
         *     - **Validation Critical**: All purchase order data validated before processing
         *     - **Procurement Integration**: Purchase orders affect vendor management and procurement workflows
         *     - **Location Scoped**: Purchase orders automatically associated with authenticated location
         *     - **Batch Processing**: Multiple purchase orders can be processed in single operation
         *     - **Vendor Relationships**: Purchase order creation strengthens vendor tracking and management
         */
        post: operations["Purchase-orderPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reference/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Units
         * @description **Purpose:** Retrieves the complete list of measurement units available for product tracking and inventory management.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of unit objects: `[{ Unit }, ...]`
         *     - Array typically contains 20-30 measurement units
         *     - Returns empty array `[]` if no units configured (rare)
         *     - Includes unit ID, name, abbreviation, and conversion factors
         *     - Standard measurement units (grams, ounces, pounds, units, etc.)
         *     - Essential reference data for product weight and quantity tracking
         *
         *     **Common Use Cases:**
         *     - Configure product measurement units in inventory systems
         *     - Support weight-based pricing and inventory calculations
         *     - Validate unit measurements in product and package operations
         *     - Generate reports with proper unit conversions and formatting
         *     - Enable accurate compliance reporting with regulatory weight requirements
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small static dataset suitable for client-side caching
         *     - No pagination needed due to limited number of standard units
         *     - Consistent across all organizations and locations
         *
         *     **Related Endpoints:**
         *     - `GET /reference/unit-types` - Get unit type classifications
         *     - `GET /products` - Get products with unit measurements
         *     - `GET /inventory` - Get inventory with unit-based quantities
         *
         *     **Important Notes:**
         *     - Standard cannabis industry measurement units for compliance
         *     - Essential for accurate weight tracking and regulatory reporting
         *     - Used throughout the system for product and inventory operations
         *     - Supports both metric and imperial measurement systems
         */
        get: operations["ReferenceUnitsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reference/unit-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Unit Types
         * @description **Purpose:** Retrieves the complete list of unit type classifications used to categorize different measurement units.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of unit type objects: `[{ UnitType }, ...]`
         *     - Array typically contains 5-10 unit type categories
         *     - Returns empty array `[]` if no unit types configured (rare)
         *     - Includes type ID, name, and category descriptions
         *     - Unit type categories (Weight, Volume, Count, etc.) for measurement classification
         *     - Reference data for organizing units by measurement type
         *
         *     **Common Use Cases:**
         *     - Organize units by measurement type in user interfaces
         *     - Validate unit assignments based on product type requirements
         *     - Support advanced filtering and categorization of measurement units
         *     - Enable proper unit selection based on product characteristics
         *     - Generate reports organized by measurement type categories
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small static dataset suitable for client-side caching
         *     - No pagination needed due to limited number of unit types
         *     - Consistent across all organizations and locations
         *
         *     **Related Endpoints:**
         *     - `GET /reference/units` - Get specific units within these types
         *     - `GET /products` - Get products using typed unit measurements
         *     - `GET /inventory` - Get inventory with type-based unit tracking
         *
         *     **Important Notes:**
         *     - Standard measurement type categories for consistent classification
         *     - Helps organize units for better user experience and validation
         *     - Used for advanced unit selection and validation logic
         *     - Essential for proper measurement type categorization
         */
        get: operations["ReferenceUnit-typesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reference/lab-result-units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Lab Result Units
         * @description **Purpose:** Retrieves the complete list of measurement units specifically used for laboratory test results and cannabinoid/terpene reporting.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of lab result unit objects: `[{ LabResultUnitData }, ...]`
         *     - Array typically contains 5-15 specialized lab measurement units
         *     - Returns empty array `[]` if no lab units configured (rare)
         *     - Includes lab result unit ID and unit name/abbreviation
         *     - Specialized units for cannabinoid and terpene concentration measurements
         *     - Essential reference data for laboratory test result reporting
         *
         *     **Common Use Cases:**
         *     - Configure lab result units in testing and compliance systems
         *     - Validate unit measurements in laboratory data submissions
         *     - Support cannabinoid and terpene concentration reporting
         *     - Generate compliance reports with proper lab result unit formatting
         *     - Enable accurate potency testing and COA (Certificate of Analysis) generation
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small static dataset suitable for client-side caching
         *     - No pagination needed due to limited number of lab result units
         *     - Consistent across all organizations and locations
         *
         *     **Related Endpoints:**
         *     - `GET /reference/lab-results-names` - Get available lab result names
         *     - `GET /reference/units` - Get general measurement units
         *     - Lab result POST endpoints (for submitting test data)
         *
         *     **Important Notes:**
         *     - Specialized units for cannabis laboratory testing and analysis
         *     - Essential for compliance with cannabis testing regulations
         *     - Used specifically for cannabinoid and terpene concentration measurements
         *     - Required for accurate Certificate of Analysis (COA) reporting
         *     - Different from general product measurement units
         */
        get: operations["ReferenceLab-result-unitsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reference/lab-results-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Lab Result Names
         * @description **Purpose:** Retrieves the complete list of available lab result names that can be used with lab result POST endpoints for cannabinoid and terpene testing.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of strings with valid lab result names: `["string", ...]`
         *     - Array typically contains 50-100 cannabinoid and terpene names
         *     - Returns empty array `[]` if no lab result names configured (rare)
         *     - Standard cannabinoid names (THC, CBD, CBG, CBN, etc.)
         *     - Common terpene names (Myrcene, Limonene, Pinene, etc.)
         *     - All acceptable values for lab result name validation
         *
         *     **Common Use Cases:**
         *     - Validate lab result names before submitting test data
         *     - Populate dropdown lists for lab result entry forms
         *     - Reference data for cannabinoid and terpene testing workflows
         *     - Support laboratory data integration and validation
         *     - Generate dynamic forms for Certificate of Analysis (COA) entry
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Static dataset suitable for client-side caching
         *     - No pagination needed due to manageable list size
         *     - Consistent across all organizations and locations
         *
         *     **Related Endpoints:**
         *     - `GET /reference/lab-result-units` - Get valid units for these results
         *     - Lab result POST endpoints - Submit test data using these names
         *     - `GET /products` - Get products with lab result data
         *
         *     **Important Notes:**
         *     - These are the only valid values accepted for lab result names
         *     - Standard cannabis testing terminology for consistency
         *     - Essential for proper cannabinoid and terpene data submission
         *     - Used throughout the system for lab result validation
         *     - Required for compliance with cannabis testing standards
         */
        get: operations["ReferenceLab-results-namesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regulatory-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Regulatory Categories
         * @description **Purpose:** Retrieves the complete list of regulatory categories available for the authenticated location for compliance reporting and state-mandated product classification.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of regulatory category objects: `[{ RegulatoryCategory }, ...]`
         *     - Array typically contains 5-20 regulatory categories per jurisdiction
         *     - Returns empty array `[]` if no regulatory categories configured (rare)
         *     - Includes category ID, name, and state-specific compliance codes
         *     - State-mandated product categories for regulatory reporting (varies by jurisdiction)
         *     - Results filtered to authenticated location's regulatory requirements
         *
         *     **Common Use Cases:**
         *     - Validate product regulatory classification for compliance reporting
         *     - Generate state-mandated reports with proper category classifications
         *     - Ensure product data meets regulatory requirements for each jurisdiction
         *     - Support track-and-trace system integration with proper categorization
         *     - Populate regulatory category fields in product management systems
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small dataset specific to location's regulatory jurisdiction
         *     - No pagination needed due to limited number of regulatory categories
         *     - Results may vary by location based on state/local regulations
         *
         *     **Related Endpoints:**
         *     - `GET /product-category` - Get general product categories
         *     - `GET /products` - Get products with regulatory category assignments
         *     - `POST /product` - Create products with regulatory category classifications
         *
         *     **Important Notes:**
         *     - Categories are specific to location's regulatory jurisdiction
         *     - Required for compliance with state cannabis regulations
         *     - Essential for accurate track-and-trace system reporting
         *     - Category requirements may change based on evolving regulations
         *     - Used for state-mandated reporting and audit compliance
         */
        get: operations["Regulatory-categoryGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ReportingInventoryGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transactions List
         * @description Retrieves POS and Wholesale transaction(s) from the provided dates and/or transactionId.
         *
         *     The use of transactionId, to/from transaction date, and to/from last modified date are mutually exclusive.
         *     Providing more than one will result in a validation error.
         *
         *     **Performance & Limits:**
         *     - Rate limited to 600 requests per minute (higher limit for frequently accessed transaction data)
         *     - Optimized for transaction reporting and financial analysis workflows
         *     - Use date range filtering to limit result size for better performance
         */
        get: operations["ReportingTransactionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Customers List (Reporting)
         * @description **Purpose:** Retrieves a comprehensive list of wholesale and POS customers optimized for reporting and analytics.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for analytics data access
         *     - Optional UTC date parameters for filtering
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ Customer }, { Customer }, ...]`
         *     - Array of `Customer` objects with complete customer information
         *     - Includes primary and secondary qualifying conditions for medical customers
         *     - Contains customer profile data, contact information, and preferences
         *     - Results are automatically filtered by the authenticated location
         *
         *     **How This Differs from `/customer/customers`:**
         *     - Requires "Reporting" role instead of "Customer" role authorization
         *     - Optimized for reporting and analytics rather than operational management
         *     - Returns ALL customers for comprehensive reporting purposes
         *     - Enhanced date range filtering designed for reporting workflows
         *     - Performance tuned for bulk data export and analysis
         *
         *     **Common Use Cases:**
         *     - Generate comprehensive customer reports and analytics
         *     - Export customer data for external systems or compliance requirements
         *     - Synchronize customer changes with external databases using incremental sync
         *     - Review customer records for regulatory compliance audits
         *     - Analyze customer demographics and behavior patterns for marketing
         *
         *     **Performance & Limits:**
         *     - Rate limited to 600 requests per minute (higher limit for frequently accessed reporting data)
         *     - Use date range filtering to limit result size for better performance
         *     - Consider using `/reporting/customers-paginated` for very large datasets
         *     - Cache results locally and use incremental sync for regular updates
         *     - May return large datasets as it includes ALL customer types
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/customers-paginated` - Paginated version for large datasets
         *     - `GET /customer/customers` - Operational customer management endpoint
         *
         *     **Important Notes:**
         *     - This endpoint returns ALL customers (wholesale and POS) and may return large datasets
         *     - Requires reporting authorization role for access
         *     - Use date filtering to improve performance with large customer bases
         */
        get: operations["ReportingCustomersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/customers-paginated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Customers (Paginated, Reporting)
         * @description **Purpose:** Retrieve paginated customer data optimized for reporting and analytics with enhanced performance for large-scale customer analysis.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for analytics data access
         *     - Optional query parameters for filtering and pagination control
         *     - No request body needed
         *     - Maximum page size of 10,000 customers for optimal performance
         *
         *     **Response Data:**
         *     - Response format: `[{ Customer }, { Customer }, ...]`
         *     - Returns array of `Customer` objects for the requested page
         *     - Array contains up to PageSize customers (default 1000, max 10,000)
         *     - Returns empty array `[]` if no customers match criteria for the page (not null)
         *     - **No pagination metadata**: Response contains only customer data without total counts or page information
         *     - Includes primary and secondary qualifying conditions for medical customers
         *     - Contains customer profile data, contact information, and preferences
         *     - Results automatically filtered to authenticated location
         *
         *     **Pagination Usage:**
         *     - **First Request**: Call with PageNumber=0 to get first page
         *     - **Subsequent Requests**: Increment PageNumber for each additional page
         *     - **End Detection**: Continue requesting pages until you receive an empty array `[]`
         *     - **Page Size Control**: Use PageSize parameter to control items per page (max 10,000)
         *     - **Example Flow**: Request PageNumber=0 → Process results → Increment PageNumber → Repeat until empty `[]` response
         *
         *     **Key Differences from `/customer/customers-paginated`:**
         *     - **Authorization**: Requires "Reporting" role vs "Customer" role
         *     - **Purpose**: Optimized for reporting and analytics vs operational customer management
         *     - **Page Size**: Higher maximum page size limits for bulk reporting
         *     - **Profile Sharing**: Enhanced customer profile sharing logic for reporting
         *     - **Performance**: Designed for large-scale data export and analysis
         *
         *     **Filtering Options:**
         *     - fromLastModifiedDateUTC: Returns customers modified after this date (incremental sync)
         *     - toLastModifiedDateUTC: Returns customers modified before this date (date range filtering)
         *     - includeAnonymous: Include anonymous customers in results (default: true)
         *
         *     **Common Use Cases:**
         *     - Handle thousands of customers efficiently with paginated processing
         *     - Process customers in manageable chunks for batch operations
         *     - Avoid loading entire customer base at once for memory-conscious applications
         *     - Stream customer data for live reporting dashboards and analytics
         *     - Transfer customer data between systems in controlled batches
         *
         *     **Performance & Limits:**
         *     - Maximum 10,000 customers per page for optimal performance
         *     - Start with PageNumber=0 and increment until no more data available
         *     - Use consistent PageSize throughout pagination sequence for efficiency
         *     - Monitor response times and adjust PageSize for optimal performance
         *     - Cache results locally to minimize API calls and improve responsiveness
         *
         *     **Pagination Detection:**
         *     - **End of data detection**: Continue requesting pages until you receive an empty array `[]`
         *     - **No metadata provided**: Response does not include total counts, page counts, or hasNextPage indicators
         *     - **Sequential access**: Increment PageNumber from 0 until empty response indicates no more data
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/customers` - Non-paginated version for smaller datasets
         *     - `GET /customer/customers` - Operational customer management endpoint
         *
         *     **Important Notes:**
         *     - **Pagination Required**: Large customer bases require multiple page requests
         *     - **Enhanced Profile Logic**: Uses advanced customer profile sharing based on LSP configuration
         *     - **Reporting Optimized**: Designed for analytics and large-scale data processing
         *     - **Location Scoped**: Results automatically filtered to authenticated location
         *     - **Page Size Validation**: Requests exceeding 10,000 customers per page will be rejected
         */
        get: operations["ReportingCustomers-paginatedGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/register-adjustments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Register Adjustments
         * @description **Purpose:** Retrieve register adjustment transactions for cash management and reconciliation reporting with detailed audit trail information.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for financial data access
         *     - Optional query parameters for date range filtering
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ RegisterAdjustment }, { RegisterAdjustment }, ...]`
         *     - Returns array of `RegisterAdjustment` objects with detailed transaction information
         *     - Array may contain 0 to 1,000+ adjustments depending on date range and activity
         *     - Returns empty array `[]` if no adjustments match criteria (not null)
         *     - Includes adjustment amounts, types, timestamps, and employee information
         *     - Contains reason codes and descriptions for each adjustment
         *     - Results automatically filtered to authenticated location
         *
         *     **Transaction Types Included:**
         *     - **Adjustments**: Manual cash register corrections and balancing entries
         *     - **Close Outs**: End-of-shift register closing transactions
         *     - **Deposits**: Cash deposits made to the register
         *     - **Withdrawals**: Cash withdrawals from the register
         *     - **Cash Drops**: Safe drops and cash removal transactions
         *
         *     **Filtering Options:**
         *     - fromLastModifiedDateUTC: Returns adjustments modified after this date (incremental sync)
         *     - toLastModifiedDateUTC: Returns adjustments modified before this date (date range filtering)
         *
         *     **Common Use Cases:**
         *     - Track all register cash movements for balancing and reconciliation
         *     - Maintain detailed records of cash handling activities for audit trails
         *     - Generate end-of-shift cash management summaries and reports
         *     - Document cash handling for regulatory requirements and compliance
         *     - Analyze cash flow patterns and adjustment trends for financial analysis
         *     - Monitor unusual adjustment patterns or discrepancies for loss prevention
         *
         *     **Performance & Limits:**
         *     - Use date range filtering to limit results to specific time periods for optimal performance
         *     - Combine with cash-summary endpoint for comprehensive cash reporting
         *     - Cache results locally and use incremental sync for regular updates
         *     - Optimized for financial reconciliation and audit trail workflows
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/register-transactions` - Complete register activity including sales
         *     - `GET /reporting/cash-summary` - Comprehensive cash reporting and summaries
         *     - `GET /reporting/closing-report` - Financial closing reports with cash details
         *
         *     **Important Notes:**
         *     - **Adjustment Focus**: This endpoint focuses specifically on register adjustments only
         *     - **Complete Activity**: For complete register activity including sales, use register-transactions
         *     - **Audit Trail**: Maintains detailed records of all cash handling activities
         *     - **Location Scoped**: Results automatically filtered to authenticated location
         *     - **Employee Tracking**: Includes employee information for accountability and audit purposes
         */
        get: operations["ReportingRegister-adjustmentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/register-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Register Transactions (Comprehensive Transaction History)
         * @description **Purpose:** Retrieve comprehensive register transaction history including sales, adjustments, cash management, and operational activities for complete financial reporting.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for financial transaction data access
         *     - Optional query parameters for date range filtering
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ RegisterTransaction }, { RegisterTransaction }, ...]`
         *     - Returns array of `RegisterTransaction` objects with comprehensive transaction data
         *     - Array may contain 0 to 50,000+ transactions depending on date range and business volume
         *     - Returns empty array `[]` if no transactions match criteria (not null)
         *     - Includes financial details, customer information, product details, and employee tracking
         *     - Complete audit trail with timestamps, register context, and status information
         *     - Results automatically filtered to authenticated location
         *
         *     **Transaction Types Included:**
         *     - **Sales Transactions**: Completed customer purchases and returns
         *     - **Register Adjustments**: Manual cash corrections and balance adjustments
         *     - **Cash Management**: Deposits, withdrawals, cash drops, and till operations
         *     - **Register Close-Outs**: End-of-shift register balancing and reconciliation
         *     - **Payment Processing**: Credit card, cash, and other payment method transactions
         *     - **Operational Activities**: Register opening, closing, and maintenance operations
         *
         *     **Transaction Data Returned:**
         *     - **Financial Details**: Transaction amounts, payment methods, taxes, and fees
         *     - **Customer Information**: Customer IDs, types, and transaction associations
         *     - **Product Details**: Items sold, quantities, prices, and categories
         *     - **Employee Tracking**: Staff members who processed transactions
         *     - **Timestamps**: Creation, modification, and completion times
         *     - **Register Context**: Terminal/register identification and session information
         *     - **Status Information**: Transaction status, voiding, and modification history
         *
         *     **Filtering Options:**
         *     - fromLastModifiedDateUTC: Returns transactions modified after this date (incremental sync)
         *     - toLastModifiedDateUTC: Returns transactions modified before this date (date range filtering)
         *
         *     **Common Use Cases:**
         *     - Balance daily sales across all registers and payment methods for financial reconciliation
         *     - Generate comprehensive revenue reports and analytics for sales reporting
         *     - Maintain detailed transaction records for compliance and audit preparation
         *     - Track all cash movements and register balancing activities for cash management
         *     - Analyze sales patterns, employee performance, and business trends for performance analysis
         *     - Extract detailed tax information for regulatory compliance and tax reporting
         *     - Monitor transaction patterns for unusual activities and fraud prevention
         *
         *     **Performance & Limits:**
         *     - Large datasets: This endpoint can return substantial amounts of transaction data
         *     - Use date range filtering to limit results for better performance
         *     - Use fromLastModifiedDateUTC for regular data synchronization and incremental sync
         *     - Schedule large data exports during low-traffic periods for optimal performance
         *     - Optimized for comprehensive financial reporting and audit trail requirements
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/register-adjustments` - Cash adjustments and corrections only
         *     - `GET /reporting/closing-report` - Summary financial reports for specific date ranges
         *     - `GET /reporting/cash-summary` - Cash-specific summaries and balancing information
         *
         *     **Important Notes:**
         *     - **Comprehensive Data**: Returns ALL register activities, resulting in potentially large datasets
         *     - **Real-Time Updates**: Transaction data reflects current state and may include recent modifications
         *     - **Location Scoped**: Results automatically filtered to authenticated dispensary location
         *     - **Historical Accuracy**: Maintains complete audit trail for all register operations
         *     - **Complete Activity**: This is the most comprehensive endpoint for all register transaction types
         */
        get: operations["ReportingRegister-transactionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/cash-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cash Summary (Real-time Register Activity)
         * @description **Purpose:** Retrieve real-time register cash activity summary with comprehensive financial reconciliation data for cash management and balancing.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for financial data access
         *     - Optional query parameters for date range filtering
         *     - Date range must be within the last 7 days for optimal performance
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ RegisterCashSummary }, { RegisterCashSummary }, ...]`
         *     - Returns array of `RegisterCashSummary` objects with detailed cash flow information
         *     - Array may contain 1-50+ register summaries depending on number of active registers
         *     - Returns empty array `[]` if no cash activity matches criteria (not null)
         *     - Real-time data reflecting current register status and activities
         *     - Includes variance calculations and reconciliation details
         *     - Results automatically filtered to authenticated location
         *
         *     **Summary Data Included:**
         *     - **Starting Balance**: Register opening cash amount for the period
         *     - **Ending Balance**: Current or closing register cash amount
         *     - **Sales**: Total cash sales transactions processed
         *     - **Returns**: Cash refunds and return transactions
         *     - **Deposits**: Cash deposits added to the register
         *     - **Adjustments**: Manual cash corrections and modifications
         *     - **Over/Short**: Cash variance from expected amounts
         *
         *     **Filtering Options:**
         *     - fromLastModifiedDateUTC: Returns activity after this date (incremental sync, within 7 days)
         *     - toLastModifiedDateUTC: Returns activity before this date (date range filtering)
         *
         *     **Common Use Cases:**
         *     - Track current register cash status throughout the day for real-time monitoring
         *     - Balance register cash at shift changes for reconciliation
         *     - Generate end-of-day cash summaries for closing procedures
         *     - Identify and investigate cash discrepancies for variance analysis
         *     - Create comprehensive cash flow reports for financial reporting
         *     - Maintain detailed cash handling records for audit preparation
         *
         *     **Performance & Limits:**
         *     - Rate limited to 480 requests per minute (higher limit for frequent cash monitoring)
         *     - Date range restriction: fromLastModifiedDateUTC must be within the last 7 days
         *     - Use recent date ranges (within 7 days) for fastest response times
         *     - Combine with register-adjustments endpoint for detailed transaction breakdown
         *     - Cache results and refresh periodically for dashboard applications
         *     - Optimized for real-time cash monitoring and reconciliation workflows
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/register-adjustments` - Detailed transaction breakdown
         *     - `GET /reporting/register-transactions` - Complete register transaction history
         *     - `GET /reporting/closing-report` - Comprehensive financial closing reports
         *
         *     **Important Notes:**
         *     - **Real-time Data**: Provides real-time data and may show different results than historical reports during active business hours
         *     - **7-Day Limit**: Date filtering restricted to last 7 days for optimal performance
         *     - **Active Business Hours**: Results may vary during active operations due to real-time updates
         *     - **Location Scoped**: Results automatically filtered to authenticated location
         *     - **Variance Tracking**: Includes over/short calculations for cash discrepancy identification
         */
        get: operations["ReportingCash-summaryGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/loyalty-snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Loyalty Balance Snapshot (Daily)
         * @description **Purpose:** Retrieve current loyalty point balances for all customers with nightly batch processing for comprehensive loyalty program reporting and analysis.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for loyalty data access
         *     - No query parameters required
         *     - No request body needed
         *     - Rate limited to 1 request per minute for system protection
         *
         *     **Response Data:**
         *     - Response format: `[{ LoyaltySnapshot }, { LoyaltySnapshot }, ...]`
         *     - Returns array of `LoyaltySnapshot` objects with customer loyalty information
         *     - Array typically contains 100-10,000+ customers depending on loyalty program participation
         *     - Returns empty array `[]` if no customers have loyalty activity (not null)
         *     - Includes current point balances, loyalty tier information, and customer identifiers
         *     - Contains earned points, redeemed points, and available balance details
         *     - Results automatically filtered to authenticated location
         *
         *     **Data Characteristics:**
         *     - **Update Frequency**: Nightly batch processing (updated once per day)
         *     - **Data Freshness**: Reflects loyalty activity through the previous business day
         *     - **Scope**: All customers with loyalty program participation
         *     - **Balance Types**: Current available points, earned points, redeemed points
         *     - **Configuration**: Uses either loyalty ledger service or database depending on system configuration
         *
         *     **Common Use Cases:**
         *     - Generate end-of-day loyalty summaries for daily loyalty reports
         *     - Check customer loyalty balances and history for customer service
         *     - Identify customers by loyalty tier or balance ranges for marketing campaigns
         *     - Document loyalty program activity for audits and compliance reporting
         *     - Export loyalty data to external systems for data synchronization
         *     - Analyze loyalty program engagement and effectiveness for analytics
         *
         *     **Consumption Guidelines:**
         *     - **Recommended Frequency**: Once per day (after nightly processing completes)
         *     - **Optimal Timing**: Early morning hours after batch processing
         *     - **Caching Strategy**: Cache results for 24 hours, refresh daily
         *
         *     **Performance & Limits:**
         *     - Rate limited to 1 request per minute for system protection
         *     - Schedule automated calls during off-peak hours for optimal performance
         *     - Cache results locally to avoid repeated calls within the same day
         *     - Use for batch processing rather than real-time customer lookups
         *     - Optimized for daily loyalty program management and reporting workflows
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/customer-loyalty-snapshot` - Individual customer loyalty data
         *     - `GET /reporting/loyalty-transactions-paginated` - Detailed loyalty transaction history
         *     - `GET /reporting/national-loyalty-snapshot-paginated` - Cross-organization loyalty data
         *
         *     **Important Notes:**
         *     - **Snapshot Data**: This is a snapshot of loyalty balances as of the last nightly processing
         *     - **Real-time Alternative**: For real-time loyalty transactions, use other loyalty endpoints
         *     - **Nightly Processing**: Data reflects activity through the previous business day
         *     - **Location Scoped**: Results filtered to authenticated location loyalty participants
         *     - **Rate Limited**: Maximum 1 request per minute to protect system resources
         */
        get: operations["ReportingLoyalty-snapshotGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Products (Master List, Reporting)
         * @description **Purpose:** Retrieve the complete product master list with comprehensive product data for reporting and analytics, including all products regardless of API or online availability settings.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for comprehensive product data access
         *     - Optional query parameters for incremental sync filtering
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ ProductDetail }, { ProductDetail }, ...]`
         *     - Returns array of `ProductDetail` objects with complete product information
         *     - Array typically contains 100-50,000+ products depending on catalog size
         *     - Returns empty array `[]` if no products exist or match criteria (not null)
         *     - Includes ALL products in the system (active and inactive)
         *     - Contains pricing, categories, strains, lab results, and inventory data
         *     - Results automatically filtered to authenticated location
         *
         *     **Key Differences from `/products`:**
         *     - **No API Access Filter**: Returns ALL products, not just those enabled for API access
         *     - **No Online Filter**: Ignores online availability settings used by standard products endpoint
         *     - **Master Data Focus**: Designed for comprehensive product data exports and reporting
         *     - **Complete Dataset**: Includes inactive and non-public products for complete catalog view
         *
         *     **Filtering Options:**
         *     - fromLastModifiedDateUTC: Returns products modified after this date (incremental sync)
         *
         *     **Common Use Cases:**
         *     - Get complete product catalog for analysis and comprehensive reporting
         *     - Export all product data for external systems and data warehousing
         *     - Review all products regardless of API/online settings for inventory audits
         *     - Maintain complete product records for master data management
         *     - Generate reports including all products for compliance reporting
         *
         *     **When to Use This vs `/products`:**
         *     - **Use `/reporting/products`**: For complete data exports, reporting, audits, and analytics
         *     - **Use `/products`**: For e-commerce, POS integration, and customer-facing applications
         *
         *     **Performance & Limits:**
         *     - Large datasets: This endpoint can return substantial product catalogs
         *     - Use fromLastModifiedDateUTC for incremental sync to optimize performance
         *     - Optimized for comprehensive product reporting and analytics workflows
         *     - Consider pagination for very large product catalogs (50,000+ products)
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Customer-facing products with API and online filters
         *     - `GET /inventory` - Product inventory levels and availability
         *     - `GET /product-categories` - Product categorization data
         *
         *     **Important Notes:**
         *     - **Complete Dataset**: Returns ALL products, including those not intended for public API access or online sales
         *     - **Master Data**: This is the authoritative source for complete product catalog data
         *     - **Reporting Focus**: Designed for analytics and reporting rather than customer-facing operations
         *     - **Location Scoped**: Results filtered to authenticated location product catalog
         *     - **Incremental Sync**: Use date filtering for efficient data synchronization
         */
        get: operations["ReportingProductsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/closing-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Closing Report (Comprehensive Financial Summary)
         * @description **Purpose:** Retrieve comprehensive closing report with detailed financial summaries, payment breakdowns, and business analytics for specified date range reporting.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for financial data access
         *     - fromDateUTC and toDateUTC parameters required (both must be provided)
         *     - Date range must be between 12 hours and 31 days maximum
         *     - UTC datetime format required for all date parameters
         *
         *     **Response Data:**
         *     - Response format: `{ ClosingReport }` or `{ ClosingReportV2 }` (structure varies by system configuration)
         *     - Returns `ClosingReport` or `ClosingReportV2` object with comprehensive financial data
         *     - Single object containing multi-dimensional analysis across all business aspects
         *     - Not an array - returns one comprehensive report object for the date range
         *     - Multi-dimensional analysis across payment methods, customer types, and product categories
         *     - Detailed tax calculations and compliance information
         *     - Payment processor-specific data and settlement details
         *     - Results automatically filtered to authenticated location
         *
         *     **Date Range Restrictions:**
         *     - **Maximum Range**: 31 days or less
         *     - **Minimum Range**: Greater than 12 hours
         *     - **Format**: UTC datetime values
         *     - **Both Required**: fromDateUTC and toDateUTC must be provided
         *
         *     **Report Sections Included:**
         *     - **Payment Summary**: Breakdown by payment method (cash, card, etc.)
         *     - **Customer Type Summary**: Sales analysis by customer categories
         *     - **Category Summary**: Revenue breakdown by product categories
         *     - **Tax Summary**: Detailed tax calculations and rates
         *     - **Order Source Summary**: Sales by channel (online, in-store, etc.)
         *     - **Order Type Summary**: Analysis by order types (delivery, pickup, etc.)
         *     - **Fees & Donations**: Processing fees and charitable donations (when enabled)
         *     - **Pay-by-Bank Details**: ACH transaction summaries and batch files (when enabled)
         *
         *     **Response Version Determination:**
         *     - Response structure varies based on internal system configuration
         *     - **V1 (ClosingReport)**: Standard financial summaries without tips/fees
         *     - **V2 (ClosingReportV2)**: Enhanced with tips, fees, and Pay-by-Bank details
         *     - **API Consumer Guidance**: Both versions share common base fields, V2 extends V1 with additional properties
         *     - **Breaking Change Protection**: V2 is additive-only (safe to parse as V1 and ignore extra fields)
         *
         *     **Handling Variable Response Types:**
         *     - **Recommended Approach**: Parse response for common fields first, then check for V2-specific properties
         *     - **Common Base Properties**: All versions include PaymentSummary, CustomerTypeSummary, CategorySummary, TaxSummary
         *     - **V2 Additional Properties**: TipsSummary, FeesSummary, PayByBankDetails (when present)
         *
         *     **Common Use Cases:**
         *     - Generate end-of-period financial summaries for daily/weekly closing
         *     - Balance sales across all payment methods and channels for financial reconciliation
         *     - Extract detailed tax information for compliance and tax reporting
         *     - Analyze sales performance across multiple dimensions for business analytics
         *     - Reconcile payment processor settlements for payment processing
         *     - Generate comprehensive financial documentation for audit preparation
         *
         *     **Performance & Limits:**
         *     - This report processes large amounts of transactional data
         *     - Longer date ranges may take additional time to generate
         *     - Use shorter date ranges for faster processing
         *     - Schedule report generation during off-peak hours for optimal performance
         *     - Cache results for frequently accessed date ranges
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/register-transactions` - Detailed transaction-level data
         *     - `GET /reporting/cash-summary` - Cash-specific summaries
         *     - `GET /reporting/register-adjustments` - Register adjustment details
         *
         *     **Important Notes:**
         *     - **Processing Intensive**: This report processes large amounts of transactional data
         *     - **Date Range Validation**: Requests with invalid date ranges will be rejected
         *     - **Comprehensive Data**: Includes all financial aspects of business operations
         *     - **Location Scoped**: Results filtered to authenticated location financial data
         *     - **Version Dependent**: Response object type depends on system configuration and features enabled
         */
        get: operations["ReportingClosing-reportGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting/discounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Discounts (Complete Discount Configuration)
         * @description **Purpose:** Retrieve comprehensive discount configuration data for all discounts regardless of status, type, or activation state for promotional reporting and analysis.
         *
         *     **Request Requirements:**
         *     - "Reporting" role authorization required for discount configuration data access
         *     - Optional query parameter for including deleted discounts
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ ReportingDiscountDetail }, { ReportingDiscountDetail }, ...]`
         *     - Returns array of `ReportingDiscountDetail` objects with complete discount configurations
         *     - Array typically contains 5-500+ discounts depending on promotional activity
         *     - Returns empty array `[]` if no discounts exist (not null)
         *     - Includes all restriction types and eligibility criteria
         *     - Contains scheduling and recurrence information
         *     - Provides location-specific applicability data
         *     - Results automatically filtered to authenticated location
         *
         *     **Unique Endpoint:** This is the only discounts endpoint in the Public API - there is no parallel non-reporting version.
         *
         *     **Filtering Options:**
         *     - includeDeleted: Include deleted/archived discounts in results (default: false)
         *
         *     **Discount Information Included:**
         *     - **Basic Details**: Discount names, descriptions, and identifiers
         *     - **Status Information**: Active/inactive status and deletion state
         *     - **Type Classification**: Manual vs automatic discount types
         *     - **Validity Periods**: Start and end dates (converted to UTC)
         *     - **Discount Groups**: Associated discount group memberships
         *     - **Product Restrictions**: Specific products eligible for the discount
         *     - **Category Restrictions**: Product categories covered by the discount
         *     - **Strain Restrictions**: Cannabis strain-specific discount rules
         *     - **Brand Restrictions**: Brand-specific discount applications
         *     - **Vendor Restrictions**: Vendor-specific discount configurations
         *     - **Weekly Recurrence**: Recurring discount schedule information
         *     - **Location Mapping**: Multi-location discount applicability
         *
         *     **Common Use Cases:**
         *     - Analyze discount effectiveness and usage patterns for discount analysis
         *     - Export complete discount configurations for configuration backup
         *     - Document promotional activities for regulatory review and compliance reporting
         *     - Synchronize discount rules with external systems for system integration
         *     - Review existing promotions for campaign planning and marketing planning
         *     - Maintain comprehensive records of all promotional activities for audit preparation
         *
         *     **Performance & Limits:**
         *     - Use includeDeleted=false for active discount analysis to optimize performance
         *     - Cache results locally as discount configurations change infrequently
         *     - Process restriction arrays to understand discount eligibility logic
         *     - Optimized for promotional reporting and marketing analysis workflows
         *
         *     **Related Endpoints:**
         *     - `GET /reporting/closing-report` - Financial impact of discount usage
         *     - `GET /reporting/register-transactions` - Transaction-level discount application
         *     - `GET /products` - Products eligible for discount restrictions
         *
         *     **Important Notes:**
         *     - **Complete Configuration**: Returns ALL discount configurations including inactive and deleted discounts when requested
         *     - **Use Filtering**: Use includeDeleted parameter appropriately for your use case
         *     - **UTC Conversion**: All validity periods are automatically converted to UTC
         *     - **Location Scoped**: Results filtered to authenticated location discount configurations
         *     - **Unique Endpoint**: This is the only public API endpoint for discount data access
         */
        get: operations["ReportingDiscountsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/room/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Rooms
         * @description **Purpose:** Retrieve cultivation rooms and facility areas configured for the location to support cultivation operations and facility management.
         *
         *     **Request Requirements:**
         *     - "Room" role authorization required for room data access
         *     - Optional filtering parameters available for specific room lookup
         *     - Cultivation facility management permissions required
         *
         *     **Response Data:**
         *     - Returns array of `Room` objects with room identification and type information
         *     - Array typically contains 5-50 rooms depending on cultivation facility size
         *     - Returns empty array `[]` if no rooms match criteria (not null)
         *     - Includes room identification, naming, and functional type flags
         *     - Results automatically filtered to authenticated location
         *
         *     **Filtering Options:**
         *     - **roomId**: Optional integer parameter to retrieve specific room by ID
         *     - **roomName**: Optional string parameter to search rooms by name
         *     - **Combined Filtering**: Parameters can be used together for precise room lookup
         *     - **No Filters**: Returns all rooms when no parameters provided
         *
         *     **Room Information Included:**
         *     - **RoomId**: Unique identifier for each cultivation room or facility area
         *     - **RoomName**: Human-readable name for room identification and management
         *     - **Location Information**: Facility location details (when integrator is Dutchie)
         *     - **Room Type Flags**: Boolean flags indicating room functionality (IsQuarantineRoom, IsVaultRoom, IsSalesFloor, etc.)
         *
         *     **Common Use Cases:**
         *     - Populate room dropdown lists in cultivation management interfaces
         *     - Display available rooms for plant placement and cultivation tracking
         *     - Support cultivation facility room management and organization
         *     - Enable room-specific cultivation tracking and environmental monitoring
         *     - Facilitate cultivation workflow room assignments and plant movement
         *
         *     **Performance & Limits:**
         *     - Efficient room lookup optimized for cultivation facility workflows
         *     - Optimized database queries for improved performance
         *     - Flexible filtering for specific room management needs
         *     - Results consistent across cultivation and facility management systems
         *
         *     **Related Endpoints:**
         *     - `POST /room` - Create or update room configuration
         *     - `GET /plant` - View plants assigned to specific cultivation rooms
         *     - `GET /harvest` - Track harvest operations by cultivation room
         *
         *     **Important Notes:**
         *     - **Cultivation Integration**: Essential for cultivation facility management and plant tracking
         *     - **Location Specific**: Results filtered to authenticated location facility setup
         *     - **Integrator Dependent**: Location information visibility controlled by integrator type
         *     - **Cultivation Ready**: Room data used throughout cultivation tracking workflows
         */
        get: operations["RoomRoomsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/room": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update Room
         * @description **Purpose:** Create a new cultivation room or update an existing room configuration for cultivation facility management and plant tracking operations.
         *
         *     **Request Requirements:**
         *     - "Room" role authorization required for room data modification
         *     - `Room` object in request body with room configuration details
         *     - Content-Type: application/json
         *     - Cultivation facility management permissions required
         *
         *     **Response Data:**
         *     - Returns single `Room` object (not array) with updated room information
         *     - Includes assigned RoomId for new rooms or updated ID for existing rooms
         *     - Complete room information with all fields populated
         *     - Room identification, naming, and type flag information
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When RoomId is null or 0, a new room record will be created
         *     - **UPDATE**: When RoomId is provided with a valid room ID, the existing room will be updated
         *     - **Identification**: Room existence determined by RoomId value
         *     - **Automatic Detection**: System automatically determines create vs update based on RoomId
         *
         *     **Room Data Fields:**
         *     - **RoomId**: Unique identifier for room (null/0 for new rooms, specific ID for updates)
         *     - **RoomName**: Human-readable name for room identification and cultivation tracking
         *     - **Room Type Flags**: Boolean indicators for room functionality (IsQuarantineRoom, IsVaultRoom, etc.)
         *
         *     **Common Use Cases:**
         *     - Add new cultivation rooms to facility management system
         *     - Update existing room names or configuration details
         *     - Modify room setup for cultivation facility reorganization
         *     - Create room assignments for cultivation tracking workflows
         *     - Support cultivation facility expansion and room management
         *
         *     **Performance & Limits:**
         *     - Single room operation for targeted cultivation facility management
         *     - Immediate room configuration update reflected in cultivation systems
         *     - Optimized for cultivation facility management and plant tracking workflows
         *     - Changes reflected immediately in room assignment and cultivation systems
         *
         *     **Related Endpoints:**
         *     - `GET /room/rooms` - Retrieve existing room configuration before updates
         *     - `GET /plant` - View plants assigned to cultivation rooms
         *     - `POST /plant/nonsts/update` - Update plant room assignments
         *
         *     **Important Notes:**
         *     - **RoomId Assignment**: New rooms receive automatically generated RoomId
         *     - **Cultivation Integration**: Room configuration affects plant tracking and cultivation workflows
         *     - **Location Scoped**: Rooms automatically associated with authenticated location
         *     - **Cultivation Ready**: Room data immediately available for plant assignment operations
         *     - **Facility Management**: Supports cultivation facility organization and room tracking
         */
        post: operations["RoomPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sizes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product Sizes
         * @description **Purpose:** Retrieves the complete list of product sizes available for the authenticated organization for product configuration and inventory management.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of size objects: `[{ Size }, ...]`
         *     - Response format: `[{ Size }, { Size }, ...]`
         *     - Example: `[{ "SizeId": 1, "SizeName": "1g", "Description": "One gram flower package" }, { "SizeId": 2, "SizeName": "3.5g", "Description": "Eighth ounce flower package" }, ...]`
         *     - Array typically contains 15-40 product sizes per organization
         *     - Returns empty array `[]` if no sizes configured (rare)
         *     - Includes size ID, name, and measurement details
         *     - Standard product sizes (grams, ounces, units, etc.) for cannabis products
         *     - Results filtered to authenticated organization level
         *
         *     **Common Use Cases:**
         *     - Populate product size dropdown lists in product creation forms
         *     - Configure product variants with different size options
         *     - Support inventory management with size-based tracking
         *     - Generate size-specific pricing and inventory reports
         *     - Enable e-commerce product configuration with size selections
         *
         *     **Performance & Limits:**
         *     - Lightweight reference data optimized for frequent access
         *     - Small dataset suitable for client-side caching
         *     - No pagination needed due to limited number of standard sizes
         *     - Results consistent across all locations within organization
         *
         *     **Related Endpoints:**
         *     - `GET /products` - Get products that use these size configurations
         *     - `POST /product` - Create products with size assignments
         *     - `GET /inventory` - Get inventory levels by product size
         *
         *     **Important Notes:**
         *     - Sizes are defined at organization level (LSP) not location level
         *     - Standard cannabis industry size configurations for consistency
         *     - Used for product configuration and inventory tracking
         *     - Essential reference data for product and pricing management
         *     - Supports both weight-based and unit-based product sizing
         */
        get: operations["SizesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/strains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Strains
         * @description **Purpose:** Retrieves all cannabis strains available for the authenticated location with genetic and classification information.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for strain data access
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ StrainDetail }, { StrainDetail }, ...]`
         *     - Array typically contains 10-100 strains per location
         *     - Returns empty array `[]` if no strains configured for location
         *     - Results automatically filtered to authenticated location
         *     - See `StrainDetail` model for complete field descriptions
         *
         *     **Data Filtering:**
         *     - Results are automatically scoped to the authenticated location
         *     - Only active strains are included in the response
         *     - Strain types include full classification information for categorization
         *
         *     **Common Use Cases:**
         *     - Populate strain dropdown lists in product creation and editing forms
         *     - Display available strain genetics for product categorization and filtering
         *     - Synchronize strain catalog with external inventory management systems
         *     - Generate strain-specific compliance reports and analytics
         *     - Support product menu organization by genetic type and characteristics
         *     - Cache strain data for offline product creation workflows
         *
         *     **Performance & Limits:**
         *     - Lightweight data optimized for frequent access and caching
         *     - Typically small dataset (10-100 strains) suitable for client-side storage
         *     - No pagination needed due to manageable strain catalog sizes per location
         *     - Response time typically under 50ms for standard strain catalogs
         *     - Safe for frequent polling (recommended: cache for 5-10 minutes)
         *
         *     **Integration Patterns:**
         *     - **UI Dropdowns**: Cache response locally for form population
         *     - **Product Creation**: Use strain IDs for product categorization
         *     - **External Sync**: Compare ExternalId values for third-party integration
         *     - **Menu Display**: Filter products by strain type and characteristics
         *
         *     **Related Endpoints:**
         *     - `POST /strains` - Create or update strain information in this catalog
         *     - `GET /strains/types` - Get valid strain type classifications for filtering
         *
         *     **Important Notes:**
         *     - Strain catalog is location-specific and varies by dispensary
         *     - External ID values enable synchronization with cultivation management systems
         *     - Strain information directly affects product categorization and compliance reporting
         */
        get: operations["StrainsGet"];
        put?: never;
        post: operations["StrainsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/strains/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Strain Types
         * @description **Purpose:** Retrieves the list of valid strain type classifications for cannabis strain categorization.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for strain data access
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Response format: `[string, string, string, string]`
         *     - Example: `["Indica", "Sativa", "Hybrid", "CBD"]`
         *     - Returns available strain type classifications
         *     - Includes standard classifications: Indica, Sativa, Hybrid, CBD
         *     - Reference data for strain type validation
         *
         *     **Common Use Cases:**
         *     - Validate strain type values before creating or updating strains
         *     - Populate strain type dropdown lists in user interfaces
         *     - Reference data for strain classification validation
         *     - Support product categorization by genetic type
         *     - Ensure consistency in strain type terminology
         *
         *     **Performance & Limits:**
         *     - Reference data with immediate response
         *     - Small dataset suitable for frequent caching
         *     - No location filtering needed for standard classifications
         *     - Consistent across all locations and organizations
         *
         *     **Related Endpoints:**
         *     - `POST /strains` - Create or update strains (validates against these types)
         *     - `GET /strains` - Get all strains with their assigned types
         *
         *     **Important Notes:**
         *     - These are the only valid values accepted for strain type in strain creation/updates
         *     - Values are case-sensitive when used in strain operations
         *     - Standard cannabis industry classifications for genetic types
         *     - Used for product menu organization and customer filtering
         */
        get: operations["StrainsTypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/tables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tables
         * @description **Purpose:** Retrieve dining tables or seating areas configured for the location to support hospitality operations and table management.
         *
         *     **Request Requirements:**
         *     - "Room" role authorization required for table data access
         *     - Optional filtering parameters available for specific table lookup
         *     - Table management permissions for hospitality operations
         *
         *     **Response Data:**
         *     - Returns array of `Table` objects with table identification details
         *     - Array typically contains 10-100 tables depending on hospitality operation size
         *     - Returns empty array `[]` if no tables match criteria (not null)
         *     - Includes table identification and naming information (TableId, TableName)
         *     - Results automatically filtered to authenticated location
         *
         *     **Filtering Options:**
         *     - **tableId**: Optional integer parameter to retrieve specific table by ID
         *     - **tableName**: Optional string parameter to search tables by name
         *     - **Combined Filtering**: Parameters can be used together for precise table lookup
         *     - **No Filters**: Returns all tables when no parameters provided
         *
         *     **Table Information Included:**
         *     - **TableId**: Unique identifier for each dining table or seating area
         *     - **TableName**: Human-readable name for table identification and assignment
         *
         *     **Common Use Cases:**
         *     - Populate table dropdown lists in reservation and seating management
         *     - Display available tables for customer seating assignments
         *     - Support hospitality operation table management and configuration
         *     - Enable table-specific service tracking and order management
         *     - Facilitate dining room management and table allocation workflows
         *
         *     **Performance & Limits:**
         *     - Efficient table lookup optimized for hospitality operation workflows
         *     - Flexible filtering for specific table management needs
         *     - No pagination needed for typical table counts per location
         *     - Results consistent across hospitality and service management systems
         *
         *     **Related Endpoints:**
         *     - `POST /table` - Create or update table configuration
         *     - `GET /guest-list` - View guest check-ins by table assignments
         *     - `POST /transaction` - Process transactions linked to table service
         *
         *     **Important Notes:**
         *     - **Hospitality Integration**: Essential for dining room management and table service
         *     - **Table Management**: Supports table configuration and seating assignments
         *     - **Location Specific**: Results filtered to authenticated location table setup
         *     - **Service Ready**: Table data used throughout hospitality service workflows
         *     - **Flexible Lookup**: Multiple filtering options for precise table management
         */
        get: operations["TableTablesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update Table
         * @description **Purpose:** Create a new dining table or update an existing table configuration for hospitality operations and seating management.
         *
         *     **Request Requirements:**
         *     - "Room" role authorization required for table data modification
         *     - `Table` object in request body with table information
         *     - Content-Type: application/json
         *     - Table management permissions for hospitality operations
         *
         *     **Response Data:**
         *     - Returns single `Table` object (not array) with updated table information
         *     - Includes assigned TableId for new tables or updated ID for existing tables
         *     - Complete table information with all fields populated (TableId, TableName)
         *     - Table identification and naming information
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When TableId is null or 0, a new table record will be created
         *     - **UPDATE**: When TableId is provided with a positive integer, the existing table will be updated
         *     - **Identification**: Table existence determined by TableId value (null/0 = create, positive = update)
         *     - **Automatic Detection**: System automatically determines create vs update based on TableId
         *
         *     **Table Data Fields:**
         *     - **TableId**: Unique identifier for table (null/0 for new tables, positive integer for updates)
         *     - **TableName**: Human-readable name for table identification and assignment
         *
         *     **Common Use Cases:**
         *     - Add new dining tables to hospitality seating configuration
         *     - Update existing table names or configuration details
         *     - Modify table setup for dining room reorganization
         *     - Create table assignments for hospitality service workflows
         *     - Support dining room management and table allocation systems
         *
         *     **Performance & Limits:**
         *     - Single table operation for targeted table management
         *     - Immediate table configuration update reflected in hospitality systems
         *     - Optimized for dining room management and seating workflows
         *     - Changes reflected immediately in table assignment and service systems
         *
         *     **Related Endpoints:**
         *     - `GET /table/tables` - Retrieve existing table configuration before updates
         *     - `GET /guest-list` - View guest check-ins that use table assignments
         *     - `POST /transaction` - Process transactions linked to table service
         *
         *     **Important Notes:**
         *     - **TableId Assignment**: New tables receive automatically generated TableId
         *     - **Hospitality Integration**: Table configuration affects seating and service workflows
         *     - **Location Scoped**: Tables automatically associated with authenticated location
         *     - **Service Ready**: Table data immediately available for hospitality operations
         *     - **Configuration Management**: Supports dining room setup and table organization
         */
        post: operations["TablePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tags
         * @description **Purpose:** Retrieve all inventory tracking tags available for the location to support inventory management and regulatory compliance tracking.
         *
         *     **Request Requirements:**
         *     - "Inventory" role authorization required for tag data access
         *     - No query parameters or request body needed
         *     - Inventory management permissions for tag tracking operations
         *
         *     **Response Data:**
         *     - Returns array of `Tag` objects with tag identification information
         *     - Array typically contains 100-10,000 tags depending on facility operation size
         *     - Returns empty array `[]` if no tags are available (not null)
         *     - Includes tag names and unique identifiers for inventory assignment
         *     - Results automatically filtered to authenticated service provider level
         *
         *     **Tag Information Included:**
         *     - **TagId**: Unique numeric identifier for each tag
         *     - **TagName**: Human-readable name or label for the tag
         *     - **Assignment Ready**: Tag information available for inventory assignment operations
         *
         *     **Common Use Cases:**
         *     - Populate tag dropdown lists in inventory management interfaces
         *     - Display available tags for plant and package assignment workflows
         *     - Support inventory tracking and regulatory compliance operations
         *     - Enable tag allocation and assignment for cultivation and retail workflows
         *     - Facilitate state system integration and regulatory reporting requirements
         *
         *     **Performance & Limits:**
         *     - Comprehensive tag data retrieval for inventory management
         *     - Service provider level tag access for facility operations
         *     - Optimized for inventory tracking and compliance workflows
         *     - Results include all available tags for assignment and tracking
         *
         *     **Related Endpoints:**
         *     - `POST /package/set-tags` - Assign tags to inventory packages
         *     - `POST /package/add-tags` - Add additional tags to packages
         *     - `POST /package/remove-tags` - Remove tags from inventory packages
         *
         *     **Important Notes:**
         *     - **Compliance Critical**: Essential for regulatory compliance and state system integration
         *     - **Inventory Integration**: Tag data used throughout inventory tracking workflows
         *     - **Service Provider Scoped**: Tags filtered to authenticated service provider level
         *     - **Assignment Ready**: Tag data immediately available for inventory assignment operations
         *     - **Regulatory Tracking**: Tags support state system compliance and audit requirements
         */
        get: operations["TagGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Terminals
         * @description **Purpose:** Retrieve all point-of-sale terminals configured for the location to support transaction processing and retail operations.
         *
         *     **Request Requirements:**
         *     - Valid API key authentication required for terminal data access
         *     - No specific role restrictions beyond authentication
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Returns array of `Terminal` objects with terminal identification information
         *     - Response format: `[{ Terminal }, { Terminal }, ...]`
         *     - Array typically contains 1-10 terminals depending on retail operation size
         *     - Returns empty array `[]` if no terminals are configured (not null)
         *     - Includes terminal identification and naming information only
         *     - Results automatically filtered to authenticated location
         *
         *     **Terminal Information Included:**
         *     - **TerminalId**: Unique numeric identifier for each point-of-sale terminal
         *     - **TerminalName**: Human-readable name for terminal identification
         *
         *     **Common Use Cases:**
         *     - Populate terminal dropdown lists in transaction processing interfaces
         *     - Display available terminals for cashier assignment and management
         *     - Support point-of-sale system configuration and setup
         *     - Enable terminal-specific transaction tracking and reporting
         *     - Facilitate retail operation management and terminal allocation
         *
         *     **Performance & Limits:**
         *     - Lightweight operation optimized for frequent terminal lookups
         *     - Small dataset suitable for real-time retail operation workflows
         *     - No pagination needed due to limited terminal counts per location
         *     - Results consistent across point-of-sale and transaction systems
         *
         *     **Related Endpoints:**
         *     - `POST /transaction` - Process transactions using configured terminals
         *     - `GET /reporting/register-transactions` - View terminal-specific transaction history
         *     - `GET /reporting/cash-summary` - Terminal cash management and reconciliation
         *
         *     **Important Notes:**
         *     - **Retail Integration**: Essential for point-of-sale operations and transaction processing
         *     - **Terminal Management**: Supports retail terminal configuration and assignment
         *     - **Location Specific**: Results filtered to authenticated location terminal setup
         *     - **Real-time Access**: Current terminal availability and configuration information
         *     - **Transaction Ready**: Terminal data used throughout retail transaction workflows
         */
        get: operations["TerminalsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/create-anonymous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Anonymous Customer Transaction
         * @description **Purpose:** Create an anonymous customer profile and automatically check them into the dispensary guest list for pickup or service.
         *
         *     **Request Requirements:**
         *     - "PreOrder" role authorization required for transaction creation
         *     - `CreateAnonymousTransactionRequest` object in request body
         *     - Content-Type: application/json
         *     - Optional transaction reference for internal tracking
         *
         *     **Response Data:**
         *     - Returns anonymous transaction object: `{ AnonymousTransaction }`
         *     - CustomerId: Temporary customer identifier for this session
         *     - TransactionId: Transaction identifier for order processing and tracking
         *     - UniqueId: System-generated unique identifier for customer lookup
         *
         *     **Process Flow:**
         *     1. Anonymous profile creation: Generate temporary customer record with unique identifier
         *     2. Guest list check-in: Automatically add customer to dispensary queue/guest list
         *     3. Transaction setup: Create transaction record for order processing
         *     4. Unique tracking: Assign unique ID for following up on order status
         *
         *     **Common Use Cases:**
         *     - Process walk-in customers without pre-existing accounts
         *     - Provide quick service for customers who prefer not to create full accounts
         *     - Handle one-time or occasional customers efficiently
         *     - Accommodate privacy-focused customers who prefer minimal data collection
         *     - Bridge anonymous sales with customer tracking systems for POS integration
         *
         *     **Performance & Limits:**
         *     - Immediate customer profile and transaction creation
         *     - Automatic guest list integration for streamlined workflow
         *     - Temporary records designed for single-session use
         *     - Optimized for high-volume walk-in customer processing
         *
         *     **Related Endpoints:**
         *     - `POST /preorder/submit` - Create orders for existing customers with full profiles
         *     - `GET /guest-list` - View current guest list including anonymous customers
         *
         *     **Important Notes:**
         *     - Anonymous customer profiles are temporary and session-based
         *     - Customer automatically appears in dispensary queue/guest list
         *     - Optional transaction reference field for external system correlation
         *     - Each anonymous customer gets a unique system identifier
         *     - Minimal data collection while maintaining operational requirements
         *     - Choose this for walk-ins who don't want accounts; use preorder endpoints for existing customers
         */
        post: operations["TransactionCreate-anonymousPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/util/AuthorizationHeader/{apiKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate Authorization Header
         * @description **Purpose:** Convert an API key into a properly formatted authorization header for initial API client setup and testing.
         *
         *     **Intended Use:** This utility endpoint is designed for initial setup and testing workflows. For production applications, consider encoding headers client-side using Base64: `Basic {base64(api_key:)}`
         *
         *     **Request Requirements:**
         *     - No authentication required - public utility endpoint
         *     - API key provided as URL path parameter
         *     - Utility function for API client development and testing
         *
         *     **Response Data:**
         *     - Returns single string value (not array) with formatted authorization header
         *     - Basic authentication header format: "Basic [base64-encoded-api-key]"
         *     - Ready-to-use authorization header value for HTTP clients
         *     - Base64 encoded API key in standard HTTP Basic authentication format
         *
         *     **Authorization Header Format:**
         *     - **Encoding**: API key converted to Base64 ASCII encoding
         *     - **Format**: "Basic {base64-encoded-key}" format for HTTP Authorization header
         *     - **Standards Compliant**: Follows HTTP Basic Authentication specification
         *     - **Client Ready**: Direct usage in HTTP client authorization headers
         *
         *     **Common Use Cases:**
         *     - Initial API client setup and configuration
         *     - Development and testing workflows
         *     - Manual header generation for API testing tools
         *     - Integration development and troubleshooting
         *
         *     **Related Endpoints:**
         *     - `GET /whoami` - Verify API key validity and location access
         *     - `GET /health` - Test basic API connectivity
         *     - All other endpoints that require the generated authorization header
         *
         *     **Important Notes:**
         *     - **Public Utility**: No authentication required for this utility endpoint
         *     - **Developer Tool**: Designed for API client development and testing support
         *     - **Header Generation**: Produces standard HTTP Basic authentication headers
         *     - **Standards Compliant**: Follows HTTP Basic Authentication formatting requirements
         */
        get: operations["UtilAuthorizationHeaderByApiKeyGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vehicles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vehicles
         * @description **Purpose:** Retrieve all vehicles available for delivery and transportation operations to support logistics and compliance tracking.
         *
         *     **Request Requirements:**
         *     - "Reporting" or "Deliveries" role authorization required for vehicle data access
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ VehicleDetail }, { VehicleDetail }, ...]`
         *     - Array typically contains 1-20 vehicles depending on delivery operation size
         *     - Returns empty array `[]` if no vehicles are configured (not null)
         *     - Includes vehicle identification, specifications, and operational details
         *     - License plate numbers, make/model information, and registration data
         *     - Results automatically filtered to authenticated location
         *
         *     **Vehicle Information Included:**
         *     - **Identification**: Vehicle ID, license plate, VIN numbers
         *     - **Specifications**: Make, model, year, color, and vehicle type
         *     - **Registration**: Registration status and compliance information
         *     - **Operational**: Availability status and assignment details
         *
         *     **Common Use Cases:**
         *     - Populate vehicle dropdown lists in delivery assignment forms
         *     - Display vehicle fleet information for logistics management
         *     - Support delivery route planning and vehicle allocation
         *     - Maintain vehicle records for compliance and regulatory requirements
         *     - Generate vehicle utilization reports for operational analysis
         *
         *     **Performance & Limits:**
         *     - Lightweight operation optimized for frequent vehicle lookups
         *     - Small dataset suitable for real-time delivery assignment workflows
         *     - No pagination needed due to limited fleet sizes
         *     - Results consistent across delivery management operations
         *
         *     **Related Endpoints:**
         *     - `POST /vehicles` - Create or update vehicle information
         *     - `GET /drivers` - Get drivers who can operate vehicles
         *     - `POST /deliveries/set-route-detail` - Assign vehicles to delivery routes
         *
         *     **Important Notes:**
         *     - **Fleet Management**: Essential for delivery operations and logistics coordination
         *     - **Compliance Ready**: Vehicle data supports regulatory compliance and tracking
         *     - **Location Specific**: Results filtered to authenticated location vehicle fleet
         *     - **Real-time Access**: Current vehicle availability and status information
         *     - **Delivery Integration**: Vehicle data used throughout delivery assignment workflows
         */
        get: operations["VehiclesGet"];
        put?: never;
        /**
         * Create or Update Vehicle
         * @description **Purpose:** Create a new vehicle or update an existing vehicle with comprehensive fleet information for delivery operations and compliance tracking.
         *
         *     **Request Requirements:**
         *     - "Reporting" or "Deliveries" role authorization required for vehicle data modification
         *     - `VehicleDetail` object in request body with vehicle information
         *     - Content-Type: application/json
         *     - Validation performed on vehicle data before processing
         *
         *     **Response Data:**
         *     - Response format: `200 OK` (no response body)
         *     - No data returned - operation confirmation only
         *     - Returns HTTP 400 with validation errors if request data is invalid
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When VehicleId is null, 0, or omitted, a new vehicle record will be created
         *     - **UPDATE**: When VehicleId is provided with a valid vehicle ID, the existing vehicle will be updated
         *     - **Identification**: Vehicle existence determined by VehicleId value
         *     - **Automatic Detection**: System automatically determines create vs update based on vehicle data
         *
         *     **Sparse Update Behavior:**
         *     - **Validation Required**: All provided vehicle data must pass validation checks
         *     - **Field Updates**: Provided fields will update existing vehicle information
         *     - **Data Integrity**: Validation ensures vehicle data meets operational requirements
         *     - **Fleet Consistency**: Updates maintain fleet data consistency and compliance standards
         *
         *     **Vehicle Data Fields:**
         *     - **Identification**: License plate, VIN, vehicle ID
         *     - **Specifications**: Make, model, year, color, vehicle type
         *     - **Registration**: Registration information and compliance data
         *     - **Operational**: Status, availability, and assignment details
         *
         *     **Common Use Cases:**
         *     - Add new vehicles to delivery fleet for expanded operations
         *     - Update existing vehicle information when details change
         *     - Maintain vehicle registration and compliance records
         *     - Support fleet management and vehicle tracking requirements
         *     - Ensure accurate vehicle data for delivery route assignments
         *
         *     **Performance & Limits:**
         *     - Single vehicle operation for targeted fleet management
         *     - Comprehensive validation performed before any changes
         *     - Changes reflected immediately in delivery assignment systems
         *     - Optimized for fleet management and compliance workflows
         *
         *     **Related Endpoints:**
         *     - `GET /vehicles` - Retrieve existing vehicle data before updates
         *     - `GET /drivers` - Manage driver assignments for vehicles
         *     - `POST /deliveries/set-route-detail` - Assign updated vehicles to delivery routes
         *
         *     **Important Notes:**
         *     - **Validation Critical**: All vehicle data must pass validation before processing
         *     - **Fleet Integration**: Vehicle updates affect delivery assignment and logistics systems
         *     - **Compliance Essential**: Vehicle data must meet regulatory requirements for delivery operations
         *     - **Location Scoped**: Vehicles automatically associated with authenticated location
         *     - **Operation Confirmation**: Success indicated by HTTP 200 status (no response body)
         */
        post: operations["VehiclesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vendor/vendors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vendors
         * @description **Purpose:** Retrieves a list of vendors with optional filtering by vendor ID or name for procurement and inventory management.
         *
         *     **Request Requirements:**
         *     - "Vendor" role authorization required for vendor data access
         *     - Optional query parameters for filtering results
         *     - No request body needed
         *
         *     **Response Data:**
         *     - Response format: `[{ Vendor }, { Vendor }, ...]`
         *     - Array typically contains 5-50 vendors per location
         *     - Returns empty array `[]` if no vendors configured or match filtering criteria
         *     - Includes contact details, address, and license information
         *     - Results are automatically filtered by the authenticated user's location
         *     - Vendor ID, name, and contact information included
         *
         *     **Filtering Options:**
         *     - No parameters: Returns all vendors for the location
         *     - vendorId: Returns specific vendor by ID
         *     - vendorName: Filters vendors by name with partial matching support
         *     - Both parameters: Can be used together for more specific filtering
         *
         *     **Common Use Cases:**
         *     - Populate vendor dropdown lists in purchase order creation forms
         *     - Search for specific vendors by name or ID for quick lookup
         *     - Synchronize vendor data with external inventory management systems
         *     - Display vendor contact information for procurement and purchasing
         *     - Maintain vendor databases for supply chain management
         *
         *     **Performance & Limits:**
         *     - Rate limiting disabled for this endpoint to support frequent lookups
         *     - Lightweight response for fast vendor list population
         *     - Efficient filtering for large vendor databases
         *     - Results cached for improved performance
         *
         *     **Related Endpoints:**
         *     - `POST /vendor` - Create or update vendor information
         *
         *     **Important Notes:**
         *     - Results are automatically filtered to the authenticated user's location
         *     - Vendor name filtering supports partial matching for flexible search
         *     - Both filtering parameters can be used simultaneously for precise results
         *     - No rate limiting applied to support frequent vendor lookups
         */
        get: operations["VendorVendorsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vendor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update Vendor
         * @description **Purpose:** Create a new vendor or update an existing vendor with comprehensive supplier information for procurement and inventory management.
         *
         *     **Request Requirements:**
         *     - "Vendor" role authorization required for vendor data modification
         *     - `Vendor` object in request body with vendor details
         *     - Content-Type: application/json
         *     - All vendor fields are optional (no validation performed)
         *
         *     **Response Data:**
         *     - Response format: `{ Vendor }`
         *     - Returns single `Vendor` object (not array) with updated vendor information
         *     - Includes assigned VendorId for new vendors or updated ID for existing vendors
         *     - Complete vendor information with all fields populated
         *     - Contact details, address, and license information included
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When VendorId is null, 0, or omitted, a new vendor record will be created
         *     - **UPDATE**: When VendorId is provided with a valid vendor ID, the existing vendor will be updated
         *     - **Identification**: Vendor existence determined by VendorId value
         *     - **Automatic Detection**: System automatically determines create vs update based on VendorId
         *
         *     **Sparse Update Behavior:**
         *     - **No Required Fields**: All fields are optional
         *     - **Optional Fields**: Address, contact, and license fields can be omitted to preserve existing values
         *     - **Null Handling**: Null values will overwrite existing data (use with caution)
         *     - **Field Independence**: Each field can be updated independently
         *
         *     **Required Fields:**
         *     - **None**: No validation is performed on any fields
         *
         *     **Optional Fields:**
         *     - **Address, City, State, PostalCode**: Physical address information for shipping and contact
         *     - **LicenseNumber**: Vendor's business license number for compliance tracking
         *     - **ContactName, ContactEmail, ContactPhone**: Primary contact information for procurement
         *
         *     **Common Use Cases:**
         *     - Add new suppliers to the vendor database for procurement management
         *     - Update existing vendor contact information when details change
         *     - Maintain vendor address and license details for compliance
         *     - Establish vendor relationships for purchase orders and inventory management
         *     - Synchronize vendor data with external procurement systems
         *
         *     **Performance & Limits:**
         *     - Single vendor operation for targeted supplier management
         *     - Immediate validation and response with complete vendor data
         *     - Changes reflected immediately in vendor catalogs and purchase order systems
         *     - Optimized for vendor relationship management workflows
         *
         *     **Related Endpoints:**
         *     - `GET /vendor/vendors` - Retrieve existing vendor data before updates
         *     - `POST /purchase-orders` - Create purchase orders using vendor relationships
         *     - `GET /inventory` - View inventory from specific vendors
         *
         *     **Important Notes:**
         *     - **VendorId Assignment**: New vendors receive automatically generated VendorId
         *     - **No Validation**: No validation is performed before creation/update
         *     - **Supplier Relationships**: Vendor data used throughout procurement and inventory systems
         *     - **Location Scoped**: Vendors automatically associated with authenticated location
         *     - **Contact Management**: Maintain accurate contact information for effective supplier communication
         */
        post: operations["VendorPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/waste": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Waste Records
         * @description **Purpose:** Retrieve comprehensive waste disposal records for cultivation and compliance tracking to support regulatory reporting and facility management.
         *
         *     **Request Requirements:**
         *     - "CultivationWrite" role authorization required for waste data access
         *     - No query parameters or request body needed
         *     - Waste tracking permissions essential for compliance operations
         *
         *     **Response Data:**
         *     - Returns single `WasteSummary` object (not array) with comprehensive waste information
         *     - Response format: `{ WasteSummary }`
         *     - Includes categorized waste records by type and source
         *     - Contains room waste, harvest waste, and plant waste details
         *     - Waste disposal tracking and compliance documentation
         *     - Results automatically filtered to authenticated location
         *
         *     **Waste Categories Included:**
         *     - **Room Waste**: General cultivation room waste disposal records
         *     - **Harvest Waste**: Plant material disposal from harvest operations
         *     - **Plant Waste**: Individual plant disposal and destruction records
         *
         *     **Common Use Cases:**
         *     - Generate regulatory compliance reports for waste disposal
         *     - Track cultivation facility waste management and disposal
         *     - Support compliance audits and regulatory inspections
         *     - Monitor waste disposal efficiency and facility operations
         *     - Maintain cultivation facility waste tracking for legal requirements
         *
         *     **Performance & Limits:**
         *     - Comprehensive waste data retrieval for facility management
         *     - Location-specific waste records for compliance tracking
         *     - Optimized for regulatory reporting and compliance workflows
         *     - Results include all waste categories and disposal records
         *
         *     **Related Endpoints:**
         *     - `GET /harvest` - View harvest operations that generate waste
         *     - `GET /plant` - Track plants before waste disposal
         *     - `POST /plant/harvest` - Harvest operations that create waste records
         *
         *     **Important Notes:**
         *     - **Compliance Critical**: Essential for regulatory compliance and waste tracking
         *     - **Cultivation Focus**: Specific to cultivation facility waste management
         *     - **Location Scoped**: Waste records filtered to authenticated location
         *     - **Regulatory Ready**: Data formatted for compliance reporting requirements
         *     - **Disposal Tracking**: Comprehensive waste disposal and destruction records
         */
        get: operations["WasteGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/waste/HarvestWaste": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["WasteHarvestWastePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/waste/PlantWaste": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["WastePlantWastePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify API key and get location identity information
         * @description **Purpose:** Verifies your API key is valid and returns detailed information about the location/store it's associated with.
         *
         *     **Request Requirements:**
         *     - Any authenticated role authorization (no specific role required)
         *     - No query parameters or request body needed
         *
         *     **Response Data:**
         *     - Response format: `{ LocationIdentity }`
         *     - Returns location identity object with complete location and company information
         *     - Location details including name, address, license number, and business information
         *     - Parent company (LSP) details and global identifiers
         *     - Configuration settings like customer profile sharing preferences
         *     - Regional data for compliance and routing
         *
         *     **Common Use Cases:**
         *     - Confirm your API key is working correctly for API key validation
         *     - Identify which store/location your API key accesses for location discovery
         *     - Determine current location context for multi-location applications
         *     - Get location details for application initialization and configuration setup
         *     - Troubleshoot authentication and location access issues during debugging
         *
         *     **Performance & Limits:**
         *     - Lightweight operation with immediate response
         *     - No rate limiting typically applied to identity verification
         *     - Recommended as first call when setting up API integration
         *     - Cached results can be used for session duration
         *
         *     **Related Endpoints:**
         *     - No direct related endpoints - this is a foundational identity endpoint
         *
         *     **Important Notes:**
         *     - Call this endpoint first when setting up API integration
         *     - Verify authentication and understand your location context before other calls
         *     - Response includes both location-specific and company-wide identifiers
         *     - Regional information helps with compliance and API routing decisions
         *
         *     **Response Fields:**
         *     - `LocationId` / `LocationName` for store identification
         *     - `LspId` / `LspName` for parent company information
         *     - `Address`, `City`, `State`, `PostalCode` for physical location
         *     - `LicenseNumber` for business license and compliance
         *     - `ShareCustomerProfiles` for customer data sharing configuration
         *     - `LocationGlobalId` / `LspGlobalId` for global unique identifiers
         */
        get: operations["WhoamiGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Address: {
            /** Format: int32 */
            addressId?: number | null;
            /** Format: int32 */
            customerId?: number;
            street?: string | null;
            street2?: string | null;
            city?: string | null;
            state?: string | null;
            postal_code?: string | null;
            country_Code?: string | null;
            /** Format: double */
            latitude?: number | null;
            /** Format: double */
            longitude?: number | null;
            county?: string | null;
            additionalStateIdentifiers?: string | null;
        };
        AllocatedDeliveryItem: {
            /** Format: int32 */
            transactionId?: number;
            productName?: string | null;
            /** Format: double */
            quantity?: number;
            /** Format: double */
            totalPrice?: number;
            /** Format: double */
            totalDiscount?: number;
            /** Format: double */
            totalTax?: number;
        };
        AllocatedPreOrderItem: {
            productName?: string | null;
            /** Format: double */
            quantity?: number;
            /** Format: double */
            totalPrice?: number;
            /** Format: double */
            totalDiscount?: number;
            /** Format: double */
            totalTax?: number;
        };
        /** @description Anonymous transaction response model containing transaction identifiers for guest checkout operations. */
        AnonymousTransaction: {
            /**
             * Format: int32
             * @description Unique identifier for the customer record associated with this anonymous transaction.
             */
            customerId?: number;
            /**
             * Format: int32
             * @description Unique identifier for the transaction record.
             */
            transactionId?: number;
            /** @description String representation of the unique identifier for API responses. */
            readonly uniqueId?: string | null;
        };
        /** @description Discount information applied to a specific transaction item in cannabis retail operations. */
        AppliedDiscount: {
            /**
             * Format: int32
             * @description Unique identifier for the discount program or campaign applied.
             */
            discountId?: number;
            /** @description Display name of the discount for customer receipts and reporting. */
            discountName?: string | null;
            /** @description Reason or justification for the discount application (e.g., "Loyalty Reward", "Medical Patient"). */
            discountReason?: string | null;
            /**
             * Format: double
             * @description Discount amount applied to the transaction item (in USD, positive value represents savings).
             */
            amount?: number;
            /**
             * Format: int32
             * @description Reference identifier linking this discount back to the specific transaction line item.
             *     Not guaranteed to be unique outside of a single transaction.
             */
            readonly transactionItemId?: number;
        };
        /** @description Request model for assigning existing cannabis plants to a specific plant group for batch management and cultivation workflow organization.
         *
         *     **Plant Group Assignment:**
         *     - Assigns existing plants to target plant group using serial numbers
         *     - Supports batch organization for cultivation workflow management
         *     - Plants identified by serial numbers for precise assignment
         *     - Validates target plant group exists before assignment
         *
         *     **Serial Number Identification:**
         *     - Plants identified by their unique serial numbers rather than IDs
         *     - All serial numbers must correspond to existing plants in the facility
         *     - Plants must be accessible to the authenticated location
         *     - Serial numbers must match exact plant tracking identifiers
         *
         *     **Batch Management:**
         *     - Plant groups enable batch-based cultivation tracking and compliance
         *     - Supports harvest planning and cultivation scheduling optimization
         *     - Facilitates cultivation management and operational efficiency */
        AssignPlantsToGroupRequest: {
            /** @description Name of target plant group for batch organization and cultivation tracking */
            plantGroupName?: string | null;
            /** @description Collection of plant serial numbers to assign to the specified plant group */
            plantSerialNumbers?: string[] | null;
        };
        /** @description Field-specific validation error details for BadRequest responses. */
        BadRequestPropertyError: {
            /** @description Name of the property that failed validation. */
            propertyName?: string | null;
            /** @description Description of the validation error for the specified property. */
            propertyError?: string | null;
        };
        /** @description Standardized error response model for HTTP 400 Bad Request responses across the API. */
        BadRequestResponse: {
            /** @description General error message describing the nature of the bad request. */
            message?: string | null;
            /** @description Collection of field-specific validation errors for detailed feedback. */
            propertyErrors?: components["schemas"]["BadRequestPropertyError"][] | null;
        };
        /** @description Detailed specification for creating individual immature plant batches with cultivation and compliance information. */
        BatchDetails: {
            /** @description Display name for the immature plant batch for identification and organization. */
            batchName?: string | null;
            /** @description Plant type designation for the batch (e.g., "Seedling", "Clone", "Cutting"). */
            plantType?: string | null;
            /**
             * Format: int32
             * @description Number of plants in the immature batch for inventory tracking and compliance.
             */
            plantCount?: number;
            /**
             * Format: int32
             * @description Strain identifier for the cannabis strain being cultivated in this batch.
             */
            strainId?: number;
            /**
             * Format: int32
             * @description Room identifier for the immature batch location assignment.
             */
            roomId?: number;
            /**
             * Format: int32
             * @description Table identifier within the room for precise location tracking (optional).
             */
            tableId?: number | null;
            /**
             * Format: int32
             * @description Mother plant identifier for tracking genetic lineage (required for clone batches).
             */
            motherPlantId?: number | null;
            /**
             * Format: date-time
             * @description Date when the immature batch was created for cultivation timeline documentation.
             */
            dateCreated?: string | null;
        };
        BooleanNullableOptional: boolean;
        BooleanOptional: boolean;
        Brand: {
            /** Format: int32 */
            brandId?: number;
            brandName?: string | null;
            brandCatalogBrandId?: string | null;
        };
        BrandEditRequest: {
            /** Format: int32 */
            brandId?: number | null;
            brandName?: string | null;
        };
        BroadcastedResponses: {
            responses?: components["schemas"]["LocationResponse"][] | null;
        };
        BulkCreateOrUpdateHarvest: {
            harvests?: components["schemas"]["BulkHarvestDetail"][] | null;
        };
        BulkCreateOrUpdateHarvestResponse: {
            createdHarvestIds?: number[] | null;
            updatedHarvestIds?: number[] | null;
        };
        BulkHarvestDetail: {
            /** Format: int32 */
            harvestId?: number | null;
            harvestName?: string | null;
            /** Format: int32 */
            harvestRoomId?: number;
            /** Format: date-time */
            harvestDate?: string | null;
            /** Format: int32 */
            strainId?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        CalculationMethod: 1 | 2 | 3 | 4 | 5 | 6 | 15;
        /** @description Request model for canceling existing customer pre-orders before fulfillment. */
        CancelPreorderRequest: {
            /**
             * Format: int32
             * @description Unique identifier of the pre-order to be canceled.
             */
            orderId?: number;
            /** @description Required reason for canceling the order (used for business analytics and customer service). */
            cancellationReason?: string | null;
        };
        /** @description Laboratory test result value model for cannabinoid and terpene measurements in cannabis products. */
        CannabinoidTerpeneValue: {
            /** @description Name of the laboratory test result (e.g., "THC", "CBD", "Limonene") - must match predefined compound list. */
            labResultName: string;
            /**
             * Format: double
             * @description Measured value of the compound in the cannabis sample (decimal precision for accurate reporting).
             */
            value: number;
            /**
             * Format: int32
             * @description Unit identifier for the measurement (references LabResultUnit enum - mg/g, percentage, etc.).
             */
            labResultUnitId: number;
        };
        CartItemPrice: {
            productName?: string | null;
            /** Format: int32 */
            productId?: number;
            /** Format: double */
            quantity?: number;
            /** Format: double */
            subtotal?: number;
            /** Format: double */
            pricingTierAdjustment?: number | null;
            discounts?: components["schemas"]["Discount"][] | null;
            /** Format: double */
            tax?: number;
        };
        CartPrice: {
            cartItemPrices?: components["schemas"]["CartItemPrice"][] | null;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            taxes?: number;
            /** Format: double */
            discount?: number;
            /** Format: double */
            total?: number;
            /** Format: double */
            originalTotal?: number;
            /** Format: double */
            roundedDifference?: number;
        };
        /** @description Request model for updating the cultivation growth phase of cannabis plants to track development stages.
         *
         *     **Growth Phase Management:**
         *     - Updates plant cultivation phase for proper development tracking
         *     - Supports bulk processing of multiple plants in single operation
         *     - Validates growth phase against allowed phase values
         *     - Automatically sets phase start date if not provided
         *
         *     **Valid Growth Phases:**
         *     - `Propagation`: Initial plant development and cloning phase
         *     - `Vegetative`: Active vegetative growth before flowering initiation
         *     - `Flowering`: Reproductive growth phase leading to harvest
         *
         *     **Phase Transition Rules:**
         *     - Phase start date defaults to current UTC time if not specified
         *     - Phase changes are logged for cultivation timeline tracking
         *     - Integration with external cultivation systems for environmental control */
        ChangeGrowthPhaseRequest: {
            /** @description Collection of LeafLogix plant IDs to update to the new growth phase */
            plantIds?: number[] | null;
            /** @description Target cultivation growth phase. Must be one of: `Propagation`, `Vegetative`, `Flowering` */
            growthPhase?: string | null;
            /**
             * Format: date-time
             * @description Date when new growth phase begins (optional, defaults to current UTC time if not specified)
             */
            phaseStartDate?: string | null;
        };
        /** @description Product category sales summary for cannabis retail closing reports and financial analysis. */
        ClosingReportCategorySummary: {
            /** @description Product category name (e.g., "Flower", "Edibles", "Concentrates"). */
            category?: string | null;
            /**
             * Format: double
             * @description Total net sales for the category (calculated property returning CategoryNetTotal).
             */
            readonly categoryTotal?: number;
            /**
             * Format: double
             * @description Gross sales total for the category before discounts (in USD).
             */
            categoryGrossTotal?: number;
            /**
             * Format: double
             * @description Total discount amount applied to products in this category (in USD).
             */
            categoryDiscountTotal?: number;
            /**
             * Format: double
             * @description Net sales total for the category after discounts (in USD).
             */
            categoryNetTotal?: number;
            /**
             * Format: double
             * @description Total cost of goods sold for products in this category (in USD).
             */
            categoryCost?: number;
        };
        /** @description Customer type sales summary for cannabis retail closing reports and customer segment analysis. */
        ClosingReportCustomerTypeSummary: {
            /** @description Customer type classification (e.g., "Recreational", "Medical", "Industry"). */
            customerType?: string | null;
            /**
             * Format: double
             * @description Total net sales for this customer type (calculated property returning NetTotal).
             */
            readonly total?: number;
            /**
             * Format: double
             * @description Gross sales total for this customer type before discounts (in USD).
             */
            grossTotal?: number;
            /**
             * Format: double
             * @description Net sales total for this customer type after discounts (in USD).
             */
            netTotal?: number;
            /**
             * Format: double
             * @description Total discount amount applied to this customer type (in USD).
             */
            discountTotal?: number;
            /**
             * Format: double
             * @description Total cost of goods sold for this customer type (in USD).
             */
            customerTypeCost?: number;
            /**
             * Format: double
             * @description Cannabis product sales total for this customer type (in USD).
             */
            cannabisSales?: number;
            /**
             * Format: double
             * @description Non-cannabis product sales total for this customer type (accessories, etc.) (in USD).
             */
            nonCannabisSales?: number;
        };
        /** @description Order source sales summary for cannabis retail closing reports and marketing channel analysis. */
        ClosingReportOrderSourceSummary: {
            /** @description Order origination source (e.g., "Website", "Mobile App", "Weedmaps", "Walk-In"). */
            orderSource?: string | null;
            /**
             * Format: double
             * @description Total net sales for this order source (calculated property returning NetTotal).
             */
            readonly total?: number;
            /**
             * Format: double
             * @description Gross sales total for this order source before discounts (in USD).
             */
            grossTotal?: number;
            /**
             * Format: double
             * @description Net sales total for this order source after discounts (in USD).
             */
            netTotal?: number;
            /**
             * Format: double
             * @description Total discount amount applied to this order source (in USD).
             */
            discountTotal?: number;
            /** Format: double */
            orderSourceCost?: number;
        };
        /** @description Order type sales summary for cannabis retail closing reports and fulfillment channel analysis. */
        ClosingReportOrderTypeSummary: {
            /** @description Order fulfillment type (e.g., "In-Store", "Pickup", "Delivery", "Curbside"). */
            orderType?: string | null;
            /**
             * Format: double
             * @description Total net sales for this order type (calculated property returning NetTotal).
             */
            readonly total?: number;
            /**
             * Format: double
             * @description Gross sales total for this order type before discounts (in USD).
             */
            grossTotal?: number;
            /**
             * Format: double
             * @description Net sales total for this order type after discounts (in USD).
             */
            netTotal?: number;
            /**
             * Format: double
             * @description Total discount amount applied to this order type (in USD).
             */
            discountTotal?: number;
            /**
             * Format: double
             * @description Total cost of goods sold for this order type (in USD).
             */
            orderTypeCost?: number;
        };
        /** @description Pay-by-Bank batch file summary for cannabis payment processing reconciliation. */
        ClosingReportPayByBankBatchFileSums: {
            /** @description Batch file name for payment processor identification and tracking. */
            batchFileName?: string | null;
            /**
             * Format: double
             * @description Adjustment amount for the batch file for financial reconciliation.
             */
            payByBankBatchFileAdjustmentAmount?: number;
        };
        /** @description Payment method summary for cannabis retail closing reports and financial reconciliation. */
        ClosingReportPaymentSummary: {
            /** @description Payment method type (e.g., "Cash", "Credit Card", "CanPay", "Hypur"). */
            paymentType?: string | null;
            /**
             * Format: double
             * @description Total amount paid using this payment method (in USD).
             */
            totalPaid?: number;
        };
        /** @description Tax rate summary for cannabis retail closing reports and tax liability tracking. */
        ClosingReportTaxRateSummary: {
            /** @description Tax rate name or type (e.g., "State Excise Tax", "City Cannabis Tax", "Sales Tax"). */
            taxRate?: string | null;
            /**
             * Format: double
             * @description Total tax amount collected for this tax rate (in USD).
             */
            totalTax?: number;
        };
        /** @description Enhanced closing report model for cannabis dispensary daily financial operations with payment processing integration. */
        ClosingReportV2: {
            /**
             * Format: double
             * @description Total tips aggregated for the closing period for staff distribution.
             */
            readonly totalTips?: number | null;
            /**
             * Format: double
             * @description Tips processed through Pay-by-Bank system for electronic tip distribution.
             */
            payByBankTips?: number;
            /**
             * Format: double
             * @description Transaction fees charged by Pay-by-Bank system for cost accounting.
             */
            payByBankTransactionFees?: number;
            /** @description Batch file summaries for Pay-by-Bank transaction reconciliation. */
            payByBankBatchFile?: components["schemas"]["ClosingReportPayByBankBatchFileSums"][] | null;
            /** @description Fees and donations collected during the closing period for compliance reporting. */
            feesDonations?: components["schemas"]["FeeDonation"][] | null;
            /**
             * Format: double
             * @description DutchiePay tips processed for cannabis payment integration.
             */
            readonly dutchiePayTips?: number | null;
            /**
             * Format: double
             * @description DutchiePay transaction adjustments for cannabis payment processing.
             */
            readonly dutchiePayTotalAdjustmentAmount?: number | null;
            /** @description DutchiePay batch file summaries for cannabis payment reconciliation. */
            readonly dutchiePayBatchFileSums?: components["schemas"]["ClosingReportPayByBankBatchFileSums"][] | null;
            /** Format: double */
            grossSales?: number | null;
            /** Format: double */
            discount?: number | null;
            /** Format: double */
            loyalty?: number | null;
            /** Format: double */
            totalTax?: number | null;
            /** Format: double */
            cost?: number | null;
            /** Format: double */
            coupons?: number | null;
            /** Format: double */
            itemTotal?: number | null;
            /** Format: int32 */
            transactionCount?: number;
            /** Format: int32 */
            itemCount?: number;
            /** Format: int32 */
            customerCount?: number;
            /** Format: int32 */
            newCustomerCount?: number;
            /** Format: int32 */
            voidCount?: number;
            /** Format: double */
            voidTotal?: number | null;
            /** Format: double */
            returnTotal?: number | null;
            /** Format: double */
            startingBalance?: number | null;
            /** Format: double */
            endingBalance?: number | null;
            /** Format: double */
            deposits?: number | null;
            /** Format: double */
            adjustments?: number | null;
            /** Format: double */
            totalPayments?: number | null;
            /** Format: double */
            invoiceTotal?: number | null;
            /** Format: double */
            cannabisSales?: number | null;
            /** Format: double */
            nonCannabisSales?: number | null;
            /** Format: double */
            netSales?: number | null;
            /** Format: double */
            revenueFeesDonations?: number | null;
            /** Format: double */
            nonRevenueFeesDonations?: number | null;
            /** Format: double */
            rounding?: number | null;
            /** Format: double */
            totalIncome?: number | null;
            /** Format: double */
            averageCartNetSales?: number | null;
            /** Format: double */
            readonly overShort?: number | null;
            categorySummary?: components["schemas"]["ClosingReportCategorySummary"][] | null;
            paymentSummary?: components["schemas"]["ClosingReportPaymentSummary"][] | null;
            taxSummary?: components["schemas"]["ClosingReportTaxRateSummary"][] | null;
            customerTypeSummary?: components["schemas"]["ClosingReportCustomerTypeSummary"][] | null;
            orderTypeSummary?: components["schemas"]["ClosingReportOrderTypeSummary"][] | null;
            orderSourceSummary?: components["schemas"]["ClosingReportOrderSourceSummary"][] | null;
        };
        /** @description Detailed specification for converting individual plant batches during cultivation growth phase transitions. */
        ConvertBatchDetails: {
            /**
             * Format: int32
             * @description Batch identifier for the plant batch being converted to mature growth phase.
             */
            batchId?: number;
            /** @description Collection of individual plant serial numbers within the batch for state tracking compliance. */
            serialNumbers?: string[] | null;
            /** @description Target growth stage for the batch conversion (e.g., "Vegetative", "Flowering"). */
            batchStage?: string | null;
            /**
             * Format: int32
             * @description Destination room identifier for the converted batch location tracking.
             */
            roomId?: number;
            /**
             * Format: int32
             * @description Destination table identifier within the room for precise location tracking (optional).
             */
            tableId?: number | null;
            /**
             * Format: date-time
             * @description Date when the batch conversion was performed for cultivation timeline documentation.
             */
            dateCreated?: string | null;
        };
        /** @description Request model for converting immature plant batches to mature growth phases in cannabis cultivation operations. */
        ConvertImmatureBatchRequest: {
            /** @description Collection of plant batches to be converted from immature to mature growth phases. */
            batches?: components["schemas"]["ConvertBatchDetails"][] | null;
        };
        /** @description Response model for immature plant batch conversion operations containing converted mature plant identifiers. */
        ConvertImmaturePlantResponse: {
            /** @description Collection of mature plants created from immature batch conversion. */
            convertedPlants?: components["schemas"]["CreatedMaturePlant"][] | null;
        };
        ConvertImmaturePlantResponseApiResult: {
            result?: boolean;
            message?: string | null;
            data?: components["schemas"]["ConvertImmaturePlantResponse"];
        };
        /** @description Request model for creating anonymous transactions for guest customer operations. */
        CreateAnonymousTransactionRequest: {
            /** @description Optional reference identifier for the transaction (for external system integration). */
            transactionReference?: string | null;
        };
        /** @description Response model for immature plant batch creation operations containing created batch and plant identifiers. */
        CreateImmaturePlantBatchResponse: {
            /** @description Collection of created immature plant batches with associated plant identifiers. */
            batches?: components["schemas"]["CreatedImmaturePlantBatch"][] | null;
        };
        CreateImmaturePlantBatchResponseApiResult: {
            result?: boolean;
            message?: string | null;
            data?: components["schemas"]["CreateImmaturePlantBatchResponse"];
        };
        /** @description Request model for creating new customer journal entries with interaction details and notes. */
        CreateJournalEntryRequest: {
            /**
             * Format: int32
             * @description The customer ID to create the journal entry for.
             */
            customerId: number;
            /** @description Brief title or summary of the journal entry. */
            subject: string;
            /** @description Detailed content and notes for the journal entry. */
            body: string;
            /**
             * Format: date-time
             * @description Date and time when the journal entry should be dated.
             */
            date: string;
        };
        /** @description Request model for creating mature plant batches in cannabis cultivation operations. */
        CreateMatureBatchRequest: {
            /** @description Collection of mature plant batch specifications for bulk batch creation operations. */
            batches?: components["schemas"]["MatureBatchDetails"][] | null;
        };
        /** @description Response model for mature plant batch creation operations containing created mature plant identifiers. */
        CreateMaturePlantsResponse: {
            /** @description Collection of mature plants created ready for flowering phase cultivation. */
            createdPlants?: components["schemas"]["CreatedMaturePlant"][] | null;
        };
        CreateMaturePlantsResponseApiResult: {
            result?: boolean;
            message?: string | null;
            data?: components["schemas"]["CreateMaturePlantsResponse"];
        };
        CreateOrUpdateHarvest: {
            /** Format: int32 */
            harvestId?: number | null;
            harvestName?: string | null;
            strainName?: string | null;
            /** Format: int32 */
            harvestRoomId?: number;
            /** Format: date-time */
            harvestDate?: string;
        };
        CreatePlantRequest: {
            serialNumber?: string | null;
            plantGroupName?: string | null;
            growthPhase?: string | null;
            /** Format: date-time */
            phaseStartDate?: string | null;
            /** Format: date-time */
            dateCreated?: string | null;
            /** Format: date-time */
            bornDate?: string | null;
            strain?: string | null;
            room?: string | null;
            table?: string | null;
            isMother?: boolean;
            bypassStateIntegration?: boolean;
        };
        CreatePreOrderRequest: {
            /** Format: int32 */
            customerId: number;
            items?: components["schemas"]["PreOrderItem"][] | null;
            redemptions?: components["schemas"]["PreOrderRedemption"][] | null;
            isDelivery?: boolean;
            /** @deprecated */
            orderSource?: string | null;
            orderType?: string | null;
            deliveryStreet?: string | null;
            deliveryStreet2?: string | null;
            deliveryCity?: string | null;
            deliveryState?: string | null;
            deliveryPostalCode?: string | null;
            idempotencyKey?: string | null;
            notes?: string | null;
            status?: string | null;
            transactionReference?: string | null;
            /** Format: date-time */
            timeWindowStartDateUtc?: string | null;
            /** Format: date-time */
            timeWindowEndDateUtc?: string | null;
            deliveryScheduleId?: components["schemas"]["DeliveryScheduleType"];
        };
        CreateUpdatePurchaseOrderItemRequest: {
            /** Format: int32 */
            productId?: number;
            unitId?: components["schemas"]["Int32NullableOptional"];
            quantity?: components["schemas"]["Int32NullableOptional"];
            subtotal?: components["schemas"]["DecimalNullableOptional"];
            tax?: components["schemas"]["DecimalNullableOptional"];
        };
        CreateUpdatePurchaseOrderRequest: {
            /** Format: int32 */
            purchaseOrderId?: number | null;
            expectedArrivalDate?: components["schemas"]["DateTimeNullableOptional"];
            title?: components["schemas"]["StringOptional"];
            dateReceived?: components["schemas"]["DateTimeNullableOptional"];
            shippingInformation?: components["schemas"]["StringOptional"];
            vendorContact?: components["schemas"]["StringOptional"];
            status?: components["schemas"]["StringOptional"];
            vendorId?: components["schemas"]["Int32NullableOptional"];
            purchaseOrderNumber?: components["schemas"]["Int32NullableOptional"];
            purchaseOrderItems?: components["schemas"]["CreateUpdatePurchaseOrderItemRequest"][] | null;
        };
        CreateUpdatePurchaseOrderResponse: {
            createdPurchaseOrderIds?: number[] | null;
            updatedPurchaseOrderIds?: number[] | null;
        };
        CreateUpdatePurchaseOrdersRequest: {
            purchaseOrders?: components["schemas"]["CreateUpdatePurchaseOrderRequest"][] | null;
        };
        /** @description Individual created immature plant batch containing batch identifier and associated plant IDs. */
        CreatedImmaturePlantBatch: {
            /**
             * Format: int32
             * @description Unique identifier assigned to the created immature plant batch.
             */
            batchId?: number;
            /** @description Collection of unique plant identifiers created within this batch. */
            plantIds?: number[] | null;
        };
        CreatedMaturePlant: {
            /** Format: int32 */
            batchId?: number;
            /** Format: int32 */
            plantId?: number;
            plantSerialNumber?: string | null;
        };
        /** @description Represents a customer profile with personal information, contact details, and cannabis compliance data. */
        Customer: {
            /**
             * Format: int32
             * @description Unique internal identifier for the customer record.
             */
            customerId?: number;
            /** @description String representation of UniqueId for external API consumption. */
            readonly uniqueId?: string | null;
            /**
             * @deprecated
             * @description Deprecated name field (use FirstName and LastName instead).
             */
            name?: string | null;
            /** @description Customer's first name. */
            firstName?: string | null;
            /** @description Customer's last name. */
            lastName?: string | null;
            /** @description Customer's middle name. */
            middleName?: string | null;
            /** @description Name suffix (Jr., Sr., III, etc.). */
            nameSuffix?: string | null;
            /** @description Name prefix (Mr., Mrs., Dr., etc.). */
            namePrefix?: string | null;
            /** @description Primary street address line. */
            address1?: string | null;
            /** @description Secondary address line (apartment, suite, etc.). */
            address2?: string | null;
            /** @description City name. */
            city?: string | null;
            /** @description State or province. */
            state?: string | null;
            /** @description Postal or ZIP code. */
            postalCode?: string | null;
            /** @description Primary phone number. */
            phone?: string | null;
            /** @description Cell phone number. */
            cellPhone?: string | null;
            /** @description Email address. */
            emailAddress?: string | null;
            /** @description Customer account status. */
            status?: string | null;
            /** @description Medical marijuana identification number. */
            mmjidNumber?: string | null;
            /**
             * Format: date-time
             * @description Medical marijuana ID expiration date.
             */
            mmjidExpirationDate?: string | null;
            /** @description Last modification timestamp in UTC format. */
            lastModifiedDateUTC?: string | null;
            /**
             * Format: date-time
             * @description Customer record creation date.
             */
            creationDate?: string | null;
            /** @description Customer type classification. */
            customerType?: string | null;
            /** @description Customer's gender. */
            gender?: string | null;
            /** @description SHA2_256 hash of the Driver License ID */
            driversLicenseHash?: string | null;
            /**
             * Format: date-time
             * @description Customer's date of birth.
             */
            dateOfBirth?: string | null;
            /** @description External system customer identifier. */
            externalCustomerId?: string | null;
            /** @description Name of the integration system that created this customer. */
            createdByIntegrator?: string | null;
            /** @description Indicates if this is an anonymous customer record. */
            isAnonymous?: boolean;
            /** @description How the customer heard about the dispensary. */
            referralSource?: string | null;
            /** @description Additional details about referral source when "Other" is selected. */
            otherReferralSource?: string | null;
            /**
             * Format: int32
             * @description SpringBig loyalty system member identifier.
             */
            springBigMemberId?: number;
            /** @description Custom identifier for external system integration. */
            customIdentifier?: string | null;
            /** @description Collection of active discount groups for this customer. */
            readonly discountGroups?: string[] | null;
            /** @description Location where this customer record was created. */
            createdAtLocation?: string | null;
            /** @description Additional notes about the customer. */
            notes?: string | null;
            /** @description Indicates if customer is enrolled in loyalty program. */
            isLoyaltyMember?: boolean | null;
            /** @description Primary medical condition for medical marijuana patients. */
            primaryQualifyingCondition?: string | null;
            /** @description Additional medical conditions for medical marijuana patients. */
            secondaryQualifyingConditions?: string[] | null;
            /**
             * Format: int32
             * @description Customer ID this record was merged into (if applicable).
             */
            mergedIntoCustomerId?: number | null;
            /** @description Customer's marketing communication preference. */
            optedIntoMarketing?: boolean | null;
            /** @description Customer's current loyalty program tier. */
            loyaltyTier?: string | null;
        };
        /** @description Search criteria model for customer lookup operations with flexible matching options. */
        CustomerSearchRequest: {
            /** @description Customer's last name for name-based search matching. */
            lastName?: string | null;
            /**
             * Format: date-time
             * @description Customer's date of birth for identity verification and precise matching.
             */
            dateOfBirth?: string | null;
            /** @description Customer's phone number for contact-based search matching. */
            phone?: string | null;
            /** @description Customer's email address for account-based search matching. */
            emailAddress?: string | null;
            /** @description Medical marijuana identification number for regulatory compliance search. */
            mmjidNumber?: string | null;
            /** @description Driver's license identifier for government ID-based search matching. */
            driversLicenseId?: string | null;
        };
        /** @description Extended customer model that includes search match type information for customer lookup operations. */
        CustomerSearchResult: {
            /** @description Indicates how the customer record was matched during the search operation. */
            matchType?: string | null;
            /**
             * Format: int32
             * @description Unique internal identifier for the customer record.
             */
            customerId?: number;
            /** @description String representation of UniqueId for external API consumption. */
            readonly uniqueId?: string | null;
            /**
             * @deprecated
             * @description Deprecated name field (use FirstName and LastName instead).
             */
            name?: string | null;
            /** @description Customer's first name. */
            firstName?: string | null;
            /** @description Customer's last name. */
            lastName?: string | null;
            /** @description Customer's middle name. */
            middleName?: string | null;
            /** @description Name suffix (Jr., Sr., III, etc.). */
            nameSuffix?: string | null;
            /** @description Name prefix (Mr., Mrs., Dr., etc.). */
            namePrefix?: string | null;
            /** @description Primary street address line. */
            address1?: string | null;
            /** @description Secondary address line (apartment, suite, etc.). */
            address2?: string | null;
            /** @description City name. */
            city?: string | null;
            /** @description State or province. */
            state?: string | null;
            /** @description Postal or ZIP code. */
            postalCode?: string | null;
            /** @description Primary phone number. */
            phone?: string | null;
            /** @description Cell phone number. */
            cellPhone?: string | null;
            /** @description Email address. */
            emailAddress?: string | null;
            /** @description Customer account status. */
            status?: string | null;
            /** @description Medical marijuana identification number. */
            mmjidNumber?: string | null;
            /**
             * Format: date-time
             * @description Medical marijuana ID expiration date.
             */
            mmjidExpirationDate?: string | null;
            /** @description Last modification timestamp in UTC format. */
            lastModifiedDateUTC?: string | null;
            /**
             * Format: date-time
             * @description Customer record creation date.
             */
            creationDate?: string | null;
            /** @description Customer type classification. */
            customerType?: string | null;
            /** @description Customer's gender. */
            gender?: string | null;
            /** @description SHA2_256 hash of the Driver License ID */
            driversLicenseHash?: string | null;
            /**
             * Format: date-time
             * @description Customer's date of birth.
             */
            dateOfBirth?: string | null;
            /** @description External system customer identifier. */
            externalCustomerId?: string | null;
            /** @description Name of the integration system that created this customer. */
            createdByIntegrator?: string | null;
            /** @description Indicates if this is an anonymous customer record. */
            isAnonymous?: boolean;
            /** @description How the customer heard about the dispensary. */
            referralSource?: string | null;
            /** @description Additional details about referral source when "Other" is selected. */
            otherReferralSource?: string | null;
            /**
             * Format: int32
             * @description SpringBig loyalty system member identifier.
             */
            springBigMemberId?: number;
            /** @description Custom identifier for external system integration. */
            customIdentifier?: string | null;
            /** @description Collection of active discount groups for this customer. */
            readonly discountGroups?: string[] | null;
            /** @description Location where this customer record was created. */
            createdAtLocation?: string | null;
            /** @description Additional notes about the customer. */
            notes?: string | null;
            /** @description Indicates if customer is enrolled in loyalty program. */
            isLoyaltyMember?: boolean | null;
            /** @description Primary medical condition for medical marijuana patients. */
            primaryQualifyingCondition?: string | null;
            /** @description Additional medical conditions for medical marijuana patients. */
            secondaryQualifyingConditions?: string[] | null;
            /**
             * Format: int32
             * @description Customer ID this record was merged into (if applicable).
             */
            mergedIntoCustomerId?: number | null;
            /** @description Customer's marketing communication preference. */
            optedIntoMarketing?: boolean | null;
            /** @description Customer's current loyalty program tier. */
            loyaltyTier?: string | null;
        };
        /** @description Represents a customer type classification for cannabis dispensary operations and compliance. */
        CustomerType: {
            /**
             * Format: int32
             * @description Unique identifier for the customer type.
             */
            id?: number;
            /** @description Display name of the customer type. */
            name?: string | null;
            /** @description Indicates whether this customer type is for medical marijuana patients. */
            isMedical?: boolean;
            /** @description Indicates whether this customer type is for retail (adult-use) customers. */
            isRetail?: boolean;
        };
        DateTimeNullableOptional: string;
        DecimalNullableOptional: number;
        /** @description Request model for deleting a product image through the product image management API. */
        DeleteImageRequest: {
            /**
             * Format: int32
             * @description The unique identifier of the product that owns the image to be deleted.
             */
            productId: number;
            /**
             * Format: int32
             * @description The unique identifier of the specific image to be deleted from the product.
             */
            imageId: number;
        };
        DeliveryOrderStatus: {
            /** Format: int32 */
            preOrderId?: number | null;
            /** Format: int32 */
            transactionId?: number;
            status?: string | null;
            /** Format: date-time */
            orderDate?: string;
            customerFirstName?: string | null;
            customerLastName?: string | null;
            /** Format: int32 */
            customerId?: number;
            orderType?: string | null;
            orderSource?: string | null;
            rejectedReason?: string | null;
            /** Format: double */
            total?: number | null;
            /** Format: double */
            subTotal?: number | null;
            /** Format: double */
            totalTax?: number | null;
            streetAddress1?: string | null;
            streetAddress2?: string | null;
            city?: string | null;
            deliveryState?: string | null;
            postalCode?: string | null;
            customerPhone?: string | null;
            /** Format: date-time */
            customerExpectedTimeStart?: string;
            /** Format: date-time */
            customerExpectedTimeEnd?: string;
            /** Format: date-time */
            dispatchDepartTime?: string;
            /** Format: date-time */
            dispatchArriveTime?: string;
            items?: components["schemas"]["AllocatedDeliveryItem"][] | null;
            payments?: components["schemas"]["DeliveryPayment"][] | null;
            deliveryStatus?: string | null;
        };
        DeliveryPayment: {
            name?: string | null;
            /** Format: double */
            amount?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        DeliveryScheduleType: 1 | 2;
        Discount: {
            name?: string | null;
            /** Format: double */
            amount?: number;
            /** Format: int32 */
            discountId?: number | null;
        };
        DiscountApiResponse: {
            /** Format: int32 */
            id?: number | null;
            externalId?: string | null;
            /** Format: date-time */
            validDateFrom?: string | null;
            /** Format: date-time */
            validDateTo?: string | null;
            /** Format: int32 */
            maxRedemptions?: number | null;
            /** Format: int32 */
            redemptionLimit?: number | null;
            firstTimeCustomerOnly?: components["schemas"]["DiscountFirstTimeCustomer"];
            discountDescription?: string | null;
            discountCode?: string | null;
            applicationMethodId?: components["schemas"]["DiscountApplicationMethod"];
            readonly applicationMethod?: string | null;
            canStackAutomatically?: boolean;
            onlineName?: string | null;
            locationRestrictions?: number[] | null;
            restrictToGroupIds?: number[] | null;
            startTime?: Record<string, never> | null;
            endTime?: Record<string, never> | null;
            monday?: boolean | null;
            tuesday?: boolean | null;
            wednesday?: boolean | null;
            thursday?: boolean | null;
            friday?: boolean | null;
            saturday?: boolean | null;
            sunday?: boolean | null;
            isActive?: boolean;
            isBundledDiscount?: boolean;
            constraints?: components["schemas"]["DiscountConstraintAPIResponse"][] | null;
            reward?: components["schemas"]["DiscountRewardAPIResponse"];
            menuDisplay?: components["schemas"]["DiscountMenuDisplayAPIResponse"];
            paymentRestrictions?: components["schemas"]["DiscountPaymentRestrictionAPIResponse"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        DiscountApplicationMethod: 1 | 2 | 3 | 4 | 5 | 6;
        DiscountConstraintAPIResponse: {
            /** Format: int32 */
            discountConstraintId?: number | null;
            /** Format: int32 */
            discountId?: number;
            /** Format: double */
            thresholdMin?: number | null;
            includeNonCannabis?: boolean;
            thresholdTypeId?: components["schemas"]["DiscountThresholdType"];
            readonly thresholdType?: string | null;
            readonly hasThreshold?: boolean;
            discountItemGroupTypeId?: components["schemas"]["DiscountItemGroupType"];
            readonly itemGroupType?: string | null;
            restrictions?: {
                [key: string]: components["schemas"]["IRestrictionAPIResponse"];
            } | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        DiscountFirstTimeCustomer: 0 | 1 | 2;
        /** @description Discount group model for organizing and categorizing related discounts. */
        DiscountGroup: {
            /**
             * Format: int32
             * @description Unique identifier for the discount group.
             */
            discountGroupId?: number;
            /** @description Display name of the discount group for management and organization. */
            discountGroupName?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        DiscountItemGroupType: 5 | 6;
        DiscountMenuDisplayAPIResponse: {
            menuDisplayDescription?: string | null;
            menuDisplayImageUrl?: string | null;
            menuDisplayName?: string | null;
            /** Format: int32 */
            menuDisplayRank?: number;
        };
        DiscountPaymentRestrictionAPIResponse: {
            payByBankSignupIncentive?: boolean;
        };
        /** @description Discount restriction model defining entity inclusion or exclusion rules for discount application. */
        DiscountRestriction: {
            /** @description Collection of entity identifiers subject to the restriction rule. */
            ids?: number[] | null;
            /** @description Indicates if this is an exclusion rule (true) or inclusion rule (false). */
            isExclusion?: boolean;
        };
        DiscountRewardAPIResponse: {
            /** Format: int32 */
            discountRewardId?: number | null;
            /** Format: int32 */
            discountId?: number;
            calculationMethodId?: components["schemas"]["CalculationMethod"];
            readonly calculationMethod?: string | null;
            /** Format: double */
            discountValue?: number;
            includeNonCannabis?: boolean;
            highestOrLowest?: string | null;
            thresholdTypeId?: components["schemas"]["DiscountThresholdType"];
            readonly thresholdType?: string | null;
            readonly hasThreshold?: boolean;
            itemGroupTypeId?: components["schemas"]["DiscountItemGroupType"];
            readonly itemGroupType?: string | null;
            /** Format: double */
            thresholdMin?: number | null;
            /** Format: double */
            thresholdMax?: number | null;
            applyToOnlyOneItem?: boolean;
            restrictions?: {
                [key: string]: components["schemas"]["IRestrictionAPIResponse"];
            } | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        DiscountThresholdType: 1 | 2 | 3;
        DriverDetail: {
            /** Format: int32 */
            driverId?: number;
            name?: string | null;
            stateId?: string | null;
            driversLicense?: string | null;
        };
        /** @description E-commerce customer data model for creating or updating customer profiles via API integration. */
        EcomCustomerEdit: {
            /**
             * Format: int32
             * @description When specified, it updates the record, if the ID exists
             *     null / unspecified will create a new customer
             */
            customerId?: number | null;
            /** @description Unique identifier for external system integration. */
            uniqueId?: string | null;
            /**
             * @deprecated
             * @description Deprecated full name field (use FirstName and LastName instead).
             */
            name?: string | null;
            /** @description Customer's first name (required). */
            firstName: string;
            /** @description Customer's last name. */
            lastName?: string | null;
            /** @description Customer's middle name. */
            middleName?: string | null;
            /** @description Name suffix (Jr., Sr., III, etc.). */
            nameSuffix?: string | null;
            /** @description Name prefix (Mr., Mrs., Dr., etc.). */
            namePrefix?: string | null;
            /** @description Primary street address line (required). */
            address1: string;
            /** @description Secondary address line (apartment, suite, etc.). */
            address2?: string | null;
            /** @description City name (required). */
            city: string;
            /** @description State or province (required). */
            state: string;
            /** @description Postal or ZIP code (required). */
            postalCode: string;
            /** @description Phone number. */
            phone?: string | null;
            /** @description Email address. */
            emailAddress?: string | null;
            /** @description Active; Cancelled; Hold; Banned */
            status: string;
            /** @description Medical marijuana identification number. */
            mmjidNumber?: string | null;
            /** @description Driver's license ID. */
            driversLicenseID?: string | null;
            /**
             * Format: date-time
             * @description Driver's license expiration date.
             */
            driversLicenseExpiration?: string | null;
            /**
             * Format: date-time
             * @description Medical marijuana ID expiration date.
             */
            mmjidExpirationDate?: string | null;
            /** @description Customer type classification (required). Use CustomerTypes endpoint to retrieve active customer types for a given location. */
            customerType: string;
            /**
             * Format: date-time
             * @description Customer's date of birth.
             */
            dateOfBirth?: string | null;
            /** @description External system customer identifier. */
            externalCustomerId?: string | null;
            /** @description Customer's gender. */
            gender?: string | null;
            /** @description Optional idempotency key for duplicate prevention. When provided with a ConsumerKey header, ensures the same customer creation request is not processed multiple times. */
            idempotencyKey?: string | null;
            /** @description How the customer heard about the dispensary. Use ReferralSources endpoint to retrieve values. */
            referralSource?: string | null;
            /** @description Custom identifier for external system integration. */
            customIdentifier?: string | null;
            /** @description Additional notes about the customer. */
            notes?: string | null;
            /** @description Indicates if customer is enrolled in loyalty program. */
            isLoyaltyMember?: boolean | null;
        };
        Employee: {
            /** Format: int32 */
            userId?: number;
            loginId?: string | null;
            fullName?: string | null;
            defaultLocation?: string | null;
            status?: string | null;
            stateId?: string | null;
            /** Format: date-time */
            mmjExpiration?: string;
            permissionsLocation?: string | null;
            groups?: string | null;
        };
        /** @description Fee and donation tracking model for cannabis dispensary compliance and accounting. */
        FeeDonation: {
            /** @description Name of the fee or donation for identification and reporting purposes. */
            name?: string | null;
            /**
             * Format: double
             * @description Cash value of the fee or donation for financial accounting.
             */
            cashValue?: number;
            /** @description Flag indicating whether the fee or donation counts as revenue for accounting purposes. */
            isRevenue?: boolean;
        };
        /** @description Fee and donation information associated with cannabis retail transactions. */
        FeeDonationInfo: {
            /**
             * Format: int32
             * @description Unique identifier for the specific fee or donation program.
             */
            feeDonationId?: number;
            /** @description Description of the fee or donation for customer receipts and reporting. */
            description?: string | null;
            /**
             * Format: double
             * @description Amount of the fee or donation (in USD).
             */
            amount?: number;
            /** @description Indicates whether this fee counts as business revenue for accounting purposes. */
            isRevenue?: boolean;
        };
        FinishOrUnfinishBatchDetails: {
            /** Format: int32 */
            batchId?: number;
            /** Format: date-time */
            harvestCompletedOn?: string | null;
        };
        GuestListEntry: {
            name?: string | null;
            /** Format: date-time */
            checkinDateUTC?: string;
            status?: string | null;
            /** Format: int32 */
            customerId?: number;
            /** Format: int32 */
            transactionId?: number;
            transactionReferenceNumber?: string | null;
            terminalName?: string | null;
            customerType?: string | null;
            phone?: string | null;
            cellPhone?: string | null;
            preOrderSource?: string | null;
        };
        Harvest: {
            /** Format: int32 */
            harvestId?: number;
            harvestName?: string | null;
            /** Format: date-time */
            harvestDate?: string;
            harvestRoom?: string | null;
            /** Format: int32 */
            plantCount?: number;
            /** Format: double */
            plantWeight?: number | null;
            /** Format: double */
            wetWeight?: number | null;
            /** Format: double */
            wetWaste?: number | null;
            /** Format: double */
            dryBudWeight?: number | null;
            /** Format: double */
            dryShakeWeight?: number | null;
            /** Format: double */
            dryWaste?: number | null;
            /** Format: int32 */
            packageCount?: number;
            /** Format: double */
            packagedWeight?: number | null;
            /** Format: date-time */
            lastModifiedDateUTC?: string;
            strainName?: string | null;
        };
        /** @description Request model for moving cannabis plants from cultivation to harvest status with optional weight tracking.
         *
         *     **Request Behavior:**
         *     - Moves specified plants from cultivation status to harvesting status
         *     - Supports bulk processing of multiple plants in single operation
         *     - Optional weight tracking for harvest yield management
         *     - Integrates with external cultivation systems when configured
         *
         *     **Validation:**
         *     - All plant IDs must exist and be accessible to the authenticated location
         *     - Plants must be in valid status for harvesting (typically Active status)
         *     - Harvest ID must correspond to existing harvest record */
        HarvestPlantRequest: {
            /** @description Collection of plants to be harvested with optional weight measurements */
            plants?: components["schemas"]["HarvestedPlant"][] | null;
            /**
             * Format: int32
             * @description Target harvest record ID for associating harvested plants
             */
            harvestId?: number;
            /**
             * Format: date-time
             * @description Date and time when harvest occurred (optional, defaults to current UTC time if not specified)
             */
            harvestedOn?: string | null;
        };
        /** @description Harvest waste detail model for tracking waste generated from specific harvest operations. */
        HarvestWasteDetail: {
            /**
             * Format: int32
             * @description Identifier for the harvest batch generating this waste.
             */
            harvestId?: number;
            /** @description Type or category of waste material from the harvest. */
            wasteType?: string | null;
            /**
             * Format: double
             * @description Quantity of waste material generated from the harvest.
             */
            wasteAmount?: number;
            /**
             * Format: int32
             * @description Unit of measurement identifier for the waste amount.
             */
            unitId?: number;
        };
        /** @description Generic waste record model containing waste disposal information and associated detail records for cannabis compliance and waste tracking. */
        HarvestWasteDetailWaste: {
            /**
             * Format: int32
             * @description Unique identifier for the waste record (null for new waste creation).
             */
            wasteId?: number | null;
            /** @description Reference number for waste tracking and documentation. */
            referenceNo?: string | null;
            /** @description Additional comments or notes about the waste disposal. */
            comments?: string | null;
            /**
             * Format: date-time
             * @description Date when the waste disposal occurred.
             */
            wasteDate?: string | null;
            /** @description Collection of waste detail records containing specific item information. */
            wasteDetail?: components["schemas"]["HarvestWasteDetail"][] | null;
            /**
             * Format: int32
             * @description Licensed Service Provider identifier (internal use only).
             */
            lspId?: number | null;
            /**
             * Format: int32
             * @description Location identifier (internal use only).
             */
            locId?: number | null;
            /** @description Indicates if room identification is required for this waste type (internal use only). */
            roomRequired?: boolean | null;
            /** @description Indicates if this waste integrates with BioTrack system (internal use only). */
            isBioTrack?: boolean | null;
        };
        /** @description Individual plant harvest information with optional weight tracking for yield management.
         *
         *     **Weight Tracking:**
         *     - Weight is optional but recommended for harvest yield analysis
         *     - Typically represents wet weight at time of harvest
         *     - Used for compliance reporting and operational analytics */
        HarvestedPlant: {
            /**
             * Format: int32
             * @description Unique LeafLogix plant identifier for the plant being harvested
             */
            plantId?: number;
            /**
             * Format: double
             * @description Optional harvest weight measurement (typically wet weight in grams)
             */
            weight?: number | null;
        };
        IRestrictionAPIResponse: {
            isExclusion?: boolean;
        };
        Int32IEnumerableOptional: unknown[];
        Int32NullableOptional: number;
        /** @description Integrated payment processing information for cannabis transactions processed through connected payment systems. */
        IntegratedPayment: {
            /** @description Type of integrated payment processor used for the transaction (e.g., "CreditCard", "CanPay", "ACH"). */
            integrationType?: string | null;
            /**
             * Format: double
             * @description Amount paid through the integrated payment system (in USD).
             */
            integratedPaid?: number;
            /** @description External payment identifier from the integrated payment processor for transaction tracking. */
            externalPaymentId?: string | null;
        };
        InventoryDiscrepancy: {
            /** Format: int32 */
            inventoryId?: number | null;
            packageId?: string | null;
            /** Format: double */
            quantity?: number;
            /** Format: int32 */
            roomId?: number;
            /** Format: int32 */
            unitId?: number;
            /** Format: double */
            externalQuantity?: number;
            /** Format: int32 */
            externalUnitId?: number;
            /** Format: double */
            equivalentExternalQuantity?: number | null;
            /** Format: double */
            readonly difference?: number;
            productName?: string | null;
            room?: string | null;
            externalRoom?: string | null;
            /** Format: double */
            batchModeQuantity?: number | null;
            bioTrackCategoryName?: string | null;
            externalBioTrackCategoryName?: string | null;
            sku?: string | null;
            unitErrorMsg?: string | null;
            rooms?: string[] | null;
            serialNumber?: string | null;
        };
        InventoryIntegrationReconResponse: {
            /** Format: date-time */
            lastUpdated?: string | null;
            discrepancies?: components["schemas"]["InventoryDiscrepancy"][] | null;
        };
        /** @description Inventory item model representing current stock and product details for available inventory. */
        InventoryItem: {
            /** @description Unit of measurement for unit weight, always "g" (grams). */
            unitWeightUnit?: string | null;
            /**
             * Format: int32
             * @description Unique inventory record identifier for this specific inventory item.
             */
            inventoryId?: number;
            /**
             * Format: int32
             * @description Product identifier linking this inventory to the product catalog.
             */
            productId?: number;
            /** @description Stock Keeping Unit (SKU) code for inventory tracking and identification. */
            sku?: string | null;
            /** @description Display name of the product for customer-facing applications. */
            productName?: string | null;
            /** @description Detailed product description including effects, characteristics, and usage information. */
            description?: string | null;
            /**
             * Format: int32
             * @description Category identifier for product classification (optional).
             */
            categoryId?: number | null;
            /** @description Category name for product classification and filtering. */
            category?: string | null;
            /** @description URL path to product image for display purposes. */
            imageUrl?: string | null;
            /**
             * Format: double
             * @description Current available quantity for sale or transfer.
             */
            quantityAvailable?: number;
            /** @description Unit of measurement for the available quantity (e.g., "g", "mg", "ea"). */
            quantityUnits?: string | null;
            /**
             * Format: double
             * @description Weight per unit in grams for dosing and compliance calculations.
             */
            unitWeight?: number;
            /**
             * Format: double
             * @description Flower equivalent amount in grams for compliance tracking.
             */
            flowerEquivalent?: number;
            /**
             * Format: double
             * @description Recreational flower equivalent amount in grams (optional).
             */
            recFlowerEquivalent?: number | null;
            /** @description Unit of measurement for flower equivalent, always "g" (grams). */
            readonly flowerEquivalentUnits?: string | null;
            /**
             * Format: int32
             * @description Batch identifier for lot tracking and quality control.
             */
            batchId?: number;
            /** @description Human-readable batch name or lot number for tracking. */
            batchName?: string | null;
            /** @description Package identifier for compliance tracking and traceability. */
            packageId?: string | null;
            /** @description Current status of the package (e.g., "Active", "Testing", "Quarantine"). */
            packageStatus?: string | null;
            /**
             * Format: double
             * @description Base unit price for retail sales.
             */
            unitPrice?: number;
            /**
             * Format: double
             * @description Medical program pricing (optional, different from retail).
             */
            medUnitPrice?: number | null;
            /**
             * Format: double
             * @description Recreational program pricing (optional, different from medical).
             */
            recUnitPrice?: number | null;
            /**
             * Format: int32
             * @description Strain identifier for cannabis products (optional).
             */
            strainId?: number | null;
            /** @description Strain name for cannabis products. */
            strain?: string | null;
            /** @description Cannabis strain classification (Hybrid, Indica, Sativa, CBD). */
            strainType?: string | null;
            /** @description Product size designation for packaging and dosing information. */
            size?: string | null;
            /** @description Collection of laboratory test results for this batch (included when includeLabResults=true). */
            labResults?: components["schemas"]["LabResult"][] | null;
            /**
             * Format: date-time
             * @description Date when laboratory testing was completed (optional).
             */
            testedDate?: string | null;
            /**
             * Format: date-time
             * @description Date when sample was collected for laboratory testing (optional).
             */
            sampleDate?: string | null;
            /**
             * Format: date-time
             * @description Date when product was packaged for distribution (optional).
             */
            packagedDate?: string | null;
            /**
             * Format: date-time
             * @description Date when product was manufactured or produced (optional).
             */
            manufacturingDate?: string | null;
            /**
             * Format: date-time
             * @description Last modification timestamp in UTC for data synchronization.
             */
            lastModifiedDateUtc?: string | null;
            /** @description Current status of laboratory testing (e.g., "Passed", "Failed", "Pending"). */
            labTestStatus?: string | null;
            /**
             * Format: int32
             * @description Vendor identifier for the supplier of this inventory (optional).
             */
            vendorId?: number | null;
            /** @description Vendor name for the supplier of this inventory. */
            vendor?: string | null;
            /**
             * Format: date-time
             * @description Product expiration date for compliance and quality control (optional).
             */
            expirationDate?: string | null;
            /** @description Quantity breakdown by storage room/location (included when includeRoomQuantities=true). */
            roomQuantities?: components["schemas"]["InventoryRoomQuantity"][] | null;
            /** @description Pricing tier classification for bulk pricing strategies. */
            pricingTierName?: string | null;
            /** @description Alternative product name for display purposes. */
            alternateName?: string | null;
            /** @description Collection of compliance tags associated with this inventory package. */
            tags?: components["schemas"]["InventoryTag"][] | null;
            /**
             * Format: int32
             * @description Brand identifier for branded products (optional).
             */
            brandId?: number | null;
            /** @description Brand name for branded products. */
            brandName?: string | null;
            /** @description Indicates if product is restricted to medical program only. */
            medicalOnly?: boolean;
            /** @description External compliance system ID (METRC or BioTrack) for regulatory tracking. */
            externalPackageId?: string | null;
            /** @description Producer name for cultivation and manufacturing tracking. */
            producer?: string | null;
            /**
             * Format: int32
             * @description Producer identifier for cultivation and manufacturing tracking (optional).
             */
            producerId?: number | null;
            /** @description Package lineage information for traceability and compliance tracking. */
            lineage?: components["schemas"]["PackageLineage"][] | null;
            /** @description Potency classification indicator for dosing guidance. */
            potencyIndicator?: string | null;
            /** @description Master category classification for product grouping. */
            masterCategory?: string | null;
            /**
             * Format: double
             * @description Effective potency in milligrams for dosing calculations (optional).
             */
            effectivePotencyMg?: number | null;
            /** @description Indicates if product contains cannabis or is cannabis-related. */
            isCannabis?: boolean;
            /** @description National Drug Code for pharmaceutical tracking (optional). */
            packageNDC?: string | null;
            /** @description URL to certificate of analysis or lab testing document. */
            labResultUrl?: string | null;
        };
        /** @description Cannabis inventory quantity tracking model by room location for facility management and compliance. */
        InventoryRoomQuantity: {
            /**
             * Format: int32
             * @description Room identifier for the storage location.
             */
            roomId?: number;
            /** @description Room name or description for the storage location. */
            room?: string | null;
            /**
             * Format: double
             * @description Quantity of cannabis product available in this specific room location.
             */
            quantityAvailable?: number;
        };
        /** @description Historical inventory snapshot model representing inventory levels at a specific point in time. */
        InventorySnapshot: {
            /** @description Stock Keeping Unit (SKU) code for product identification. */
            sku: string;
            /** @description Product name as it existed at the snapshot date. */
            product: string;
            /**
             * Format: int32
             * @description Product identifier linking to the product catalog.
             */
            productId: number;
            /** @description Storage room name where inventory was located at snapshot time. */
            room: string;
            /**
             * Format: int32
             * @description Storage room identifier for location tracking.
             */
            roomId: number;
            /** @description Vendor name for the supplier of this inventory (optional). */
            vendor?: string | null;
            /** @description Package identifier for compliance tracking and traceability. */
            packageId: string;
            /** @description Batch name or lot number for quality tracking (optional). */
            batchName?: string | null;
            /**
             * Format: int32
             * @description Batch identifier for lot tracking (optional).
             */
            batchId?: number | null;
            /**
             * Format: double
             * @description Inventory quantity as it existed at the snapshot date.
             */
            quantity: number;
            /**
             * Format: double
             * @description Total cost value of the inventory quantity (optional).
             */
            totalCost?: number | null;
            /** @description Unit of measurement for the quantity. */
            unit: string;
            /**
             * Format: int32
             * @description Unit identifier for the measurement type.
             */
            unitId: number;
            /** @description Inventory status at the time of snapshot (e.g., "Active", "Quarantine"). */
            status?: string | null;
            /**
             * Format: date-time
             * @description Date and time when this inventory snapshot was captured.
             */
            snapshotDate: string;
            /**
             * Format: int32
             * @description Inventory record identifier linking to the specific inventory item.
             */
            inventoryId: number;
        };
        InventoryTag: {
            /** Format: int32 */
            tagId?: number;
            tagName?: string | null;
            packageId?: string | null;
        };
        /** @description Inventory transaction record model representing historical inventory movement and modification operations. */
        InventoryTransaction: {
            /**
             * Format: int32
             * @description Unique identifier for the inventory transaction record.
             */
            inventoryTransactionId: number;
            /** @description Type of inventory transaction performed.
             *     **Options**: Move, Convert, Adjust, Combine, Receive, Change Product, Discontinue, Detail Update, Reconciliation, Create Package */
            transactionType?: string | null;
            /** @description Product name at the time of transaction. */
            product?: string | null;
            /** @description Stock Keeping Unit (SKU) code for the product. */
            sku?: string | null;
            /**
             * Format: int32
             * @description Product identifier linking to the product catalog.
             */
            productId?: number;
            /** @description Unit of measurement for the transaction quantities. */
            unit?: string | null;
            /** @description Package identifier for compliance tracking and traceability. */
            packageId?: string | null;
            /** @description External package identifier from integrated compliance systems. */
            externalPackageId?: string | null;
            /**
             * Format: int32
             * @description Batch identifier for lot tracking (optional).
             */
            batchId?: number | null;
            /** @description Batch name or lot number for quality tracking (optional). */
            batchName?: string | null;
            /**
             * Format: double
             * @description Transaction quantity for non-adjustment operations (Move, Convert, Receive, etc.).
             */
            quantity?: number | null;
            /**
             * Format: double
             * @description Original quantity before adjustment (used for Adjust transaction type).
             */
            fromQuantity?: number | null;
            /**
             * Format: double
             * @description New quantity after adjustment (used for Adjust transaction type).
             */
            toQuantity?: number | null;
            /** @description Reason for adjustment (used for Adjust transaction type). */
            reason?: string | null;
            /**
             * Format: int32
             * @description Receive inventory history identifier for received inventory linkage (optional).
             */
            receiveInventoryHistoryId?: number | null;
            /** @description Source location name for Move transactions. */
            fromLocation?: string | null;
            /** @description Source room name for Move transactions. */
            fromRoom?: string | null;
            /** @description Destination location name for Move transactions. */
            toLocation?: string | null;
            /** @description Destination room name for Move transactions. */
            toRoom?: string | null;
            /**
             * Format: int32
             * @description Conversion transaction identifier for Convert operations (optional).
             */
            conversionTransactionID?: number | null;
            /** @description Username or identifier of the person who performed the transaction. */
            transactionBy?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the transaction was performed.
             */
            transactionDate?: string;
            /**
             * Format: double
             * @description Unit cost of the package at the time of transaction (optional).
             */
            unitCost?: number | null;
            /**
             * Format: int32
             * @description Purchase order identifier for received inventory linkage (optional).
             */
            purchaseOrderId?: number | null;
            /**
             * Format: int32
             * @description Unique inventory item identifier affected by this transaction.
             */
            inventoryId?: number;
        };
        /** @description Represents a customer journal entry containing notes and interaction history for customer service tracking. */
        JournalEntry: {
            /**
             * Format: int32
             * @description Unique identifier for the journal entry.
             */
            journalEntryId?: number;
            /** @description Brief title or summary of the journal entry. */
            subject?: string | null;
            /** @description Detailed content and notes for the journal entry. */
            body?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the journal entry was created or should be dated.
             */
            date?: string;
        };
        /** @description Laboratory testing result model for cannabis and cannabis product analysis. */
        LabResult: {
            /** @description Name of the laboratory test performed (e.g., "THC", "CBD", "Myrcene", "Total Aerobic Count"). */
            labTest?: string | null;
            /**
             * Format: double
             * @description Numeric test result value (null if not detected or not applicable).
             */
            value?: number | null;
            labResultUnitId?: components["schemas"]["LabResultUnit"];
            /** @description Human-readable unit name corresponding to the LabResultUnitId. */
            readonly labResultUnit?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        LabResultUnit: 1 | 2 | 3 | 4 | 5 | 6;
        /** @description Laboratory result unit data model for cannabis testing measurements and reporting. */
        LabResultUnitData: {
            /**
             * Format: int32
             * @description Unique identifier for the lab result unit type.
             */
            labResultUnitId?: number;
            /** @description Display name of the lab result unit (e.g., "mg", "%", "mg/g", "ND", "LOQ", "Pass/Fail"). */
            labResultUnit?: string | null;
        };
        /** @description Tax information applied to individual transaction line items in cannabis retail operations. */
        LineItemTaxInfo: {
            /** @description Name of the tax rate applied (e.g., "State Excise Tax", "City Cannabis Tax", "Sales Tax"). */
            rateName?: string | null;
            /**
             * Format: double
             * @description Tax rate as a decimal percentage (e.g., 0.0875 for 8.75% tax rate).
             */
            rate?: number;
            /**
             * Format: double
             * @description Calculated tax amount applied to the line item (in USD).
             */
            amount?: number;
            /**
             * Format: int32
             * @description Reference identifier linking this tax information back to the specific transaction line item.
             *     Not guaranteed to be unique outside of a single transaction.
             */
            readonly transactionItemId?: number;
        };
        /** @description Cannabis genetic lineage model containing hereditary classification information for product categorization and genetic tracking. */
        Lineage: {
            /**
             * Format: int32
             * @description Unique identifier for the genetic lineage.
             */
            lineageId?: number;
            /** @description Display name for the genetic lineage (e.g., "Indica", "Sativa", "Hybrid"). */
            lineageName?: string | null;
        };
        /** @description Location identity model containing complete location and parent company information for API key verification and context identification. */
        LocationIdentity: {
            /**
             * Format: int32
             * @description Unique identifier for the cannabis dispensary location.
             */
            locationId?: number;
            /**
             * Format: int32
             * @description Unique identifier for the parent company (LSP - Licensed Service Provider).
             */
            lspId?: number;
            /** @description Business name of the cannabis dispensary location. */
            locationName?: string | null;
            /** @description Company name of the parent organization (Licensed Service Provider). */
            lspName?: string | null;
            /** @description Primary street address of the dispensary location. */
            address?: string | null;
            /** @description Secondary address line (suite, unit, etc.) if applicable. */
            address2?: string | null;
            /** @description City where the dispensary is located. */
            city?: string | null;
            /** @description State or province where the dispensary is licensed to operate. */
            state?: string | null;
            /** @description Postal code (ZIP code) for the dispensary location. */
            postalCode?: string | null;
            /** @description State-issued cannabis business license number for regulatory compliance. */
            licenseNumber?: string | null;
            /** @description "Doing Business As" name if different from the legal business name. */
            doingBusinessAs?: string | null;
            /** @description Indicates whether customer profiles are shared across locations within the organization. */
            shareCustomerProfiles?: boolean;
            /**
             * Format: uuid
             * @deprecated
             * @description Legacy global unique identifier for the location (deprecated).
             */
            globalId?: string | null;
            /**
             * Format: uuid
             * @description Global unique identifier for the location across all systems and integrations.
             */
            locationGlobalId?: string | null;
            /**
             * Format: uuid
             * @description Global unique identifier for the parent company (LSP) across all systems.
             */
            lspGlobalId?: string | null;
            /** @description Regional identifier for compliance and API routing (internal use only). */
            region?: string | null;
            /** @description Base64-encoded SHA256 hash of the region identifier for secure regional routing. */
            readonly regionId?: string | null;
        };
        /** @description Location mapping model for associating discounts with specific business locations. */
        LocationMapping: {
            /** @description Name of the location where the discount applies. */
            locationName?: string | null;
        };
        LocationProductOverride: {
            /** Format: int32 */
            productId?: number;
            /** Format: double */
            price?: number | null;
            /** Format: double */
            recPrice?: number | null;
            /** Format: double */
            cost?: number | null;
            onlineAvailable?: boolean | null;
            posAvailable?: boolean | null;
            /** Format: double */
            maxPurchasable?: number | null;
            /** Format: double */
            lowInventoryThreshold?: number | null;
            customMetadata?: string | null;
        };
        LocationProductOverrideRequest: {
            /**
             * Format: int32
             * @description Product identifier for the product being configured with location-specific overrides.
             */
            productId?: number;
            price?: components["schemas"]["DecimalNullableOptional"];
            recPrice?: components["schemas"]["DecimalNullableOptional"];
            cost?: components["schemas"]["DecimalNullableOptional"];
            onlineAvailable?: components["schemas"]["BooleanNullableOptional"];
            posAvailable?: components["schemas"]["BooleanNullableOptional"];
            maxPurchasable?: components["schemas"]["DecimalNullableOptional"];
            lowInventoryThreshold?: components["schemas"]["DecimalNullableOptional"];
            customMetadata?: components["schemas"]["StringOptional"];
        };
        LocationResponse: {
            locationName?: string | null;
            /** Format: int32 */
            locId?: number;
            licenseNumber?: string | null;
            readonly outcome?: string | null;
            /** Format: int32 */
            readonly outcomeId?: number;
            broadcastedTo?: string | null;
            errorDetail?: string | null;
        };
        /** @description Represents a customer's loyalty program balance and activity snapshot for reporting purposes.
         *
         *     Contains current point balances and historical activity for individual customers within the
         *     loyalty program. Used for daily balance reporting, customer service inquiries, and loyalty
         *     program analytics. Data reflects nightly batch processing and may not include real-time changes. */
        LoyaltySnapshot: {
            /**
             * Format: int32
             * @description Unique identifier for the customer in the loyalty program.
             *     Links this loyalty snapshot to the specific customer account.
             */
            customerId?: number;
            /**
             * Format: double
             * @description Current available loyalty points balance for the customer.
             *     Represents points that can be redeemed for rewards or discounts.
             */
            loyaltyBalance?: number;
            /**
             * Format: double
             * @description Total loyalty points redeemed/spent by the customer over their lifetime.
             *     Historical record of all point redemptions and rewards claimed.
             */
            loyaltySpent?: number;
            /**
             * Format: double
             * @description Total loyalty points earned by the customer over their lifetime.
             *     Historical record of all points awarded through purchases and activities.
             */
            loyaltyEarned?: number;
        };
        /** @description Manual payment information for cannabis transactions processed outside integrated payment systems. */
        ManualPayment: {
            /** @description Name of the manual payment processor or handling method (e.g., "Cash", "Check", "Money Order"). */
            manualPaymentProcessorName?: string | null;
            /**
             * Format: double
             * @description Amount paid through the manual payment method (in USD).
             */
            manualPaid?: number;
        };
        /** @description Detailed specification for creating individual mature plant batches with compliance tracking information. */
        MatureBatchDetails: {
            /**
             * Format: int32
             * @description Batch identifier for the mature plant batch being created.
             */
            batchId?: number;
            /** @description Collection of individual plant serial numbers within the mature batch for state tracking compliance. */
            serialNumbers?: string[] | null;
            /** @description Growth stage designation for the mature batch (e.g., "Vegetative", "Flowering"). */
            batchStage?: string | null;
            /**
             * Format: int32
             * @description Room identifier for the mature batch location assignment.
             */
            roomId?: number;
            /**
             * Format: int32
             * @description Table identifier within the room for precise location tracking (optional).
             */
            tableId?: number | null;
            /**
             * Format: date-time
             * @description Date when the mature batch was created for cultivation timeline documentation.
             */
            dateCreated?: string | null;
        };
        /** @description Request model for moving cannabis plants to a different cultivation room or table within the same facility.
         *
         *     **Movement Behavior:**
         *     - Moves specified plants to target room within same facility
         *     - Optional table assignment for precise cultivation area management
         *     - Validates target room belongs to same facility for security
         *     - Automatically updates plant cultivation stage if room has associated stage
         *
         *     **Facility Restrictions:**
         *     - Target room must belong to same facility as requesting user
         *     - Cross-facility plant movements are prohibited for security and compliance
         *     - All plant IDs must be accessible to the authenticated location
         *
         *     **Integration:**
         *     - Movement synchronized with external cultivation systems when configured
         *     - Supports cultivation workflow automation and environmental optimization */
        MovePlantRequest: {
            /** @description Collection of LeafLogix plant IDs to move to the target room */
            plantIds?: number[] | null;
            /**
             * Format: int32
             * @description Target cultivation room ID within the same facility where plants will be moved
             */
            roomId?: number;
            /**
             * Format: int32
             * @description Optional table ID within the target room for precise plant positioning (optional)
             */
            tableId?: number | null;
        };
        /** @description Generic waste record model containing waste disposal information and associated detail records for cannabis compliance and waste tracking. */
        ObjectWaste: {
            /**
             * Format: int32
             * @description Unique identifier for the waste record (null for new waste creation).
             */
            wasteId?: number | null;
            /** @description Reference number for waste tracking and documentation. */
            referenceNo?: string | null;
            /** @description Additional comments or notes about the waste disposal. */
            comments?: string | null;
            /**
             * Format: date-time
             * @description Date when the waste disposal occurred.
             */
            wasteDate?: string | null;
            /** @description Collection of waste detail records containing specific item information. */
            wasteDetail?: Record<string, never>[] | null;
            /**
             * Format: int32
             * @description Licensed Service Provider identifier (internal use only).
             */
            lspId?: number | null;
            /**
             * Format: int32
             * @description Location identifier (internal use only).
             */
            locId?: number | null;
            /** @description Indicates if room identification is required for this waste type (internal use only). */
            roomRequired?: boolean | null;
            /** @description Indicates if this waste integrates with BioTrack system (internal use only). */
            isBioTrack?: boolean | null;
        };
        /** @description Package lineage tracking model for cannabis product traceability and regulatory compliance. */
        PackageLineage: {
            /** @description Package identifier for the current package in the lineage chain. */
            packageId?: string | null;
            /**
             * Format: int32
             * @description Number of generations between current package and antecedent package in the lineage chain.
             */
            antecedentPackageDistance?: number;
            /** @description Flag indicating whether the antecedent package originated from a harvest operation. */
            antecedentIsHarvest?: boolean;
            /** @description Batch name for the current package for lot tracking and quality control. */
            batchName?: string | null;
            /** @description Batch name of the antecedent package for lineage and quality tracking. */
            antecedentBatchName?: string | null;
        };
        Plant: {
            /** Format: int32 */
            plantId?: number;
            serialNumber?: string | null;
            growthPhase?: string | null;
            type?: string | null;
            /** Format: double */
            harvestedWeight?: number | null;
            status?: string | null;
            /** Format: int32 */
            plantCount?: number | null;
            isMother?: boolean;
            /** Format: int32 */
            motherPlantId?: number | null;
            /** Format: date-time */
            plantedOn?: string | null;
            /** Format: date-time */
            addedToHarvestOn?: string | null;
            /** Format: date-time */
            harvestDate?: string | null;
            /** Format: date-time */
            destroyedDate?: string | null;
            plantGroupName?: string | null;
            strain?: string | null;
            room?: string | null;
            table?: string | null;
            /** Format: date-time */
            vegetationStartedOn?: string | null;
            /** Format: date-time */
            vegetationEndedOn?: string | null;
            /** Format: date-time */
            floweringStartedOn?: string | null;
            /** Format: date-time */
            floweringEndedOn?: string | null;
            /** Format: date-time */
            currentPhaseStartDate?: string | null;
            /** Format: date-time */
            lastModifiedDate?: string | null;
            /** Format: int32 */
            daysInCurrentPhase?: number | null;
            floweringRoom?: string | null;
            floweringTable?: string | null;
            vegetationRoom?: string | null;
            vegetationTable?: string | null;
            /** Format: int32 */
            daysInFlowering?: number | null;
            /** Format: int32 */
            daysInVegetation?: number | null;
            /** Format: int32 */
            batchId?: number;
            /** Format: int32 */
            readonly harvestId?: number;
        };
        /** @description Plant waste detail model for tracking waste generated from specific plant disposal operations. */
        PlantWasteDetail: {
            /**
             * Format: int32
             * @description Identifier for the plant generating this waste.
             */
            plantId?: number;
            /** @description Type or category of waste material from the plant. */
            wasteType?: string | null;
            /**
             * Format: double
             * @description Quantity of waste material generated from the plant.
             */
            wasteAmount?: number;
            /**
             * Format: int32
             * @description Unit of measurement identifier for the waste amount.
             */
            unitId?: number;
        };
        /** @description Generic waste record model containing waste disposal information and associated detail records for cannabis compliance and waste tracking. */
        PlantWasteDetailWaste: {
            /**
             * Format: int32
             * @description Unique identifier for the waste record (null for new waste creation).
             */
            wasteId?: number | null;
            /** @description Reference number for waste tracking and documentation. */
            referenceNo?: string | null;
            /** @description Additional comments or notes about the waste disposal. */
            comments?: string | null;
            /**
             * Format: date-time
             * @description Date when the waste disposal occurred.
             */
            wasteDate?: string | null;
            /** @description Collection of waste detail records containing specific item information. */
            wasteDetail?: components["schemas"]["PlantWasteDetail"][] | null;
            /**
             * Format: int32
             * @description Licensed Service Provider identifier (internal use only).
             */
            lspId?: number | null;
            /**
             * Format: int32
             * @description Location identifier (internal use only).
             */
            locId?: number | null;
            /** @description Indicates if room identification is required for this waste type (internal use only). */
            roomRequired?: boolean | null;
            /** @description Indicates if this waste integrates with BioTrack system (internal use only). */
            isBioTrack?: boolean | null;
        };
        /** @description Request model for creating immature plant batches in cannabis cultivation operations. */
        PostImmatureBatchRequest: {
            /** @description Collection of immature plant batch specifications for bulk batch creation operations. */
            batches?: components["schemas"]["BatchDetails"][] | null;
        };
        PreOrderItem: {
            /** Format: int32 */
            productId: number;
            /** Format: double */
            quantity: number;
        };
        PreOrderRedemption: {
            /** Format: int32 */
            productId?: number | null;
            redemptionType: string;
            redemptionId: string;
            redemptionDescription?: string | null;
            redemptionCallbackUrl?: string | null;
        };
        PreOrderRedemptionIEnumerableOptional: unknown[];
        PreOrderStatus: {
            /** Format: int32 */
            preOrderId?: number;
            status?: string | null;
            /** Format: int32 */
            transactionId?: number | null;
            /** Format: date-time */
            orderDate?: string;
            customerFirstName?: string | null;
            customerLastName?: string | null;
            /** Format: int32 */
            customerId?: number;
            orderType?: string | null;
            orderSource?: string | null;
            rejectedReason?: string | null;
            isCancellable?: boolean;
            isUpdateable?: boolean;
            /** Format: double */
            total?: number | null;
            /** Format: double */
            subTotal?: number | null;
            /** Format: double */
            totalTax?: number | null;
            sourceSystem?: string | null;
            items?: components["schemas"]["AllocatedPreOrderItem"][] | null;
        };
        PrecartItem: {
            /** Format: int32 */
            productId?: number;
            /** Format: double */
            quantity?: number;
        };
        /** @description Request model for calculating pricing, taxes, and discounts for a customer's shopping cart before creating a pre-order. */
        PriceCartRequest: {
            /** @description Collection of products in the customer's shopping cart with quantities and specifications. */
            cart?: components["schemas"]["PrecartItem"][] | null;
            /**
             * Format: int32
             * @description Customer type identifier for pricing tier and discount eligibility (e.g., medical, recreational).
             */
            customerTypeId?: number | null;
            /**
             * Format: int32
             * @description Unique customer identifier for personalized pricing and loyalty program benefits.
             */
            customerId?: number | null;
            /** @description Primary street address for delivery orders (used for tax calculation and delivery fee estimation). */
            deliveryStreet?: string | null;
            /** @description Secondary address information (apartment, suite, unit number) for delivery orders. */
            deliveryStreet2?: string | null;
            /** @description City name for delivery address (used for tax jurisdiction determination). */
            deliveryCity?: string | null;
            /** @description State or province for delivery address (used for tax calculation and compliance verification). */
            deliveryState?: string | null;
            /** @description Postal or ZIP code for delivery address (used for precise tax calculation and delivery zones). */
            deliveryPostalCode?: string | null;
            /** @description Indicates whether this is a delivery order (true) or pickup order (false) for tax and fee calculation. */
            isDelivery?: boolean;
        };
        PriceEstimates: {
            /** Format: double */
            discountAmount?: number;
            /** Format: double */
            taxAmount?: number;
            /** Format: double */
            feeAmount?: number;
            /** Format: double */
            subtotal?: number;
            /** Format: double */
            grandTotal?: number;
        };
        /** @description Pricing detail information for cannabis products with medical and recreational pricing tiers. */
        PricingDetail: {
            /**
             * Format: double
             * @description Medical cannabis patient pricing (typically lower due to tax benefits and patient programs).
             */
            medPrice?: number | null;
            /**
             * Format: double
             * @description Recreational adult-use cannabis pricing (standard retail pricing with full taxes).
             */
            recPrice?: number | null;
            /** @description Pricing tier name for customer segmentation (e.g., "Standard", "VIP", "Bulk", "Employee"). */
            pricingTierName?: string | null;
        };
        PricingTier: {
            /** Format: int32 */
            pricingTierId?: number;
            pricingTierName?: string | null;
        };
        PricingTierData: {
            /** Format: double */
            startWeight?: number | null;
            /** Format: double */
            endWeight?: number | null;
            /** Format: double */
            price?: number;
            /** Format: double */
            medicalPrice?: number;
        };
        /** @description Producer identification model containing basic producer information for product attribution and reference data needs. */
        Producer: {
            /**
             * Format: int32
             * @description Unique identifier for the producer.
             */
            producerId?: number;
            /** @description Display name of the producer for product attribution and branding. */
            producerName?: string | null;
        };
        /** @description Product category model containing cannabis product classification information for menu organization and product management. */
        ProductCategory: {
            /**
             * Format: int32
             * @description Unique identifier for the product category.
             */
            productCategoryId?: number;
            /** @description Display name of the product category (e.g., "Flower", "Edibles", "Concentrates"). */
            productCategoryName?: string | null;
            /** @description Higher-level master category classification for broader product grouping. */
            masterCategory?: string | null;
        };
        ProductDetail: {
            /** Format: int32 */
            productId?: number;
            sku?: string | null;
            internalName?: string | null;
            productName?: string | null;
            description?: string | null;
            masterCategory?: string | null;
            /** Format: int32 */
            categoryId?: number | null;
            category?: string | null;
            imageUrl?: string | null;
            imageUrls?: string[] | null;
            /** Format: int32 */
            strainId?: number | null;
            strain?: string | null;
            strainType?: string | null;
            size?: string | null;
            /** Format: double */
            netWeight?: number | null;
            /** Format: int32 */
            netWeightUnitId?: number | null;
            readonly netWeightUnit?: string | null;
            /** Format: int32 */
            brandId?: number | null;
            brandName?: string | null;
            /** Format: int32 */
            vendorId?: number | null;
            vendorName?: string | null;
            isCannabis?: boolean;
            isActive?: boolean;
            isCoupon?: boolean;
            /** Format: double */
            thcContent?: number | null;
            thcContentUnit?: string | null;
            /** Format: double */
            cbdContent?: number | null;
            cbdContentUnit?: string | null;
            /** Format: double */
            productGrams?: number | null;
            /** Format: double */
            flowerEquivalent?: number | null;
            /** Format: double */
            recFlowerEquivalent?: number | null;
            /** Format: double */
            price?: number | null;
            /** Format: double */
            medPrice?: number | null;
            /** Format: double */
            recPrice?: number | null;
            /** Format: double */
            unitCost?: number | null;
            unitType?: string | null;
            onlineTitle?: string | null;
            onlineDescription?: string | null;
            readonly onlineProduct?: boolean | null;
            posProducts?: boolean | null;
            /** Format: int32 */
            pricingTier?: number | null;
            onlineAvailable?: boolean | null;
            /** Format: double */
            lowInventoryThreshold?: number | null;
            pricingTierName?: string | null;
            pricingTierDescription?: string | null;
            pricingTierData?: components["schemas"]["PricingTierData"][] | null;
            flavor?: string | null;
            alternateName?: string | null;
            lineageName?: string | null;
            distillationName?: string | null;
            /** Format: double */
            maxPurchaseablePerTransaction?: number | null;
            tags?: components["schemas"]["ProductTag"][] | null;
            dosage?: string | null;
            instructions?: string | null;
            allergens?: string | null;
            standardAllergens?: components["schemas"]["StandardAllergensDetails"];
            defaultUnit?: string | null;
            /** Format: int32 */
            producerId?: number | null;
            producerName?: string | null;
            /** Format: date-time */
            createdDate?: string | null;
            isMedicalOnly?: boolean;
            /** Format: date-time */
            lastModifiedDateUTC?: string | null;
            /** Format: double */
            grossWeight?: number | null;
            isTaxable?: boolean | null;
            taxCategories?: string[] | null;
            upc?: string | null;
            regulatoryCategory?: string | null;
            ndc?: string | null;
            /** Format: double */
            daysSupply?: number | null;
            readonly illinoisTaxCategory?: string | null;
            externalCategory?: string | null;
            externalId?: string | null;
            syncExternally?: boolean;
            regulatoryName?: string | null;
            broadcastedResponses?: components["schemas"]["BroadcastedResponses"];
            administrationMethod?: string | null;
            /** Format: double */
            unitCBDContentDose?: number | null;
            /** Format: double */
            unitTHCContentDose?: number | null;
            /** Format: double */
            oilVolume?: number | null;
            ingredientList?: string | null;
            /** Format: int32 */
            expirationDays?: number | null;
            abbreviation?: string | null;
            isTestProduct?: boolean;
            isFinished?: boolean;
            allowAutomaticDiscounts?: boolean;
            servingSize?: string | null;
            /** Format: int32 */
            servingSizePerUnit?: number | null;
            isNutrient?: boolean;
            /** Format: date-time */
            approvalDateUTC?: string | null;
            ecomCategory?: string | null;
            ecomSubcategory?: string | null;
            customMetadata?: string | null;
        };
        /** @description Product upload model for creating and updating products.
         *
         *     ⚠️ **DATA LOSS WARNING**: Most fields will be overwritten with null/zero if not provided.
         *     **RECOMMENDED**: Use GET /products first, modify needed fields, then POST the complete object. */
        ProductDetailUpload: {
            /**
             * Format: int32
             * @description The unique identifier for a product in the system.
             *
             *     **IMPORTANT**: This field determines whether a product is created or updated:
             *     - To CREATE a new product: Omit this field or set to null
             *     - To UPDATE an existing product: You MUST provide the ProductId of the existing product
             */
            productId?: number | null;
            /** @description Product SKU - REQUIRED for CREATE operations */
            sku: string;
            /** @description Product Name - REQUIRED for CREATE operations */
            productName: string;
            /** @description Deprecated in favor of AlternateName */
            description?: string | null;
            alternateName?: string | null;
            masterCategory?: string | null;
            category?: string | null;
            strain?: string | null;
            /**
             * @description Strain type of the specified strain.
             *     Used to disambiguate strains, if duplicates exist.
             *     If no duplicates exist in the location's strain list, this field is not useful.
             *     If duplicates DO exist and this field is not specified, the strain will be chosen by the first one created.
             * @example 123
             */
            strainType?: string | null;
            size?: string | null;
            /** Format: double */
            netWeight?: number | null;
            /** @description Optional.  Abbreviation of the unit of the product's net weight. */
            netWeightUnit?: string | null;
            /** Format: double */
            grossWeight?: number | null;
            brandName?: string | null;
            vendorName?: string | null;
            isCannabis?: boolean;
            isActive?: boolean;
            /** Format: double */
            thcContent?: number | null;
            /** @description mg; %; mg/g; n.d. */
            thcContentUnit?: string | null;
            /** Format: double */
            cbdContent?: number | null;
            /** @description mg; %; mg/g; n.d. */
            cbdContentUnit?: string | null;
            /** Format: double */
            productGrams?: number | null;
            /** Format: double */
            flowerEquivalent?: number | null;
            /** Format: double */
            recFlowerEquivalent?: number | null;
            /** Format: double */
            price?: number | null;
            /** Format: double */
            unitCost?: number | null;
            unitType?: string | null;
            onlineTitle?: string | null;
            onlineDescription?: string | null;
            onlineProduct?: boolean | null;
            posProducts?: boolean | null;
            tags?: number[] | null;
            defaultUnit?: string | null;
            isMedicalOnly?: boolean | null;
            isTaxable?: boolean | null;
            regulatoryCategory?: string | null;
            ndc?: string | null;
            /** Format: double */
            daysSupply?: number | null;
            illinoisTaxCategory?: string | null;
            externalCategory?: string | null;
            externalId?: components["schemas"]["StringOptional"];
            syncExternally?: boolean | null;
            bypassExternalUpdate?: boolean | null;
            administrationMethod?: components["schemas"]["StringOptional"];
            unitCBDContentDose?: components["schemas"]["DecimalNullableOptional"];
            unitTHCContentDose?: components["schemas"]["DecimalNullableOptional"];
            oilVolume?: components["schemas"]["DecimalNullableOptional"];
            ingredientList?: components["schemas"]["StringOptional"];
            expirationDays?: components["schemas"]["Int32NullableOptional"];
            abbreviation?: components["schemas"]["StringOptional"];
            isTestProduct?: components["schemas"]["BooleanOptional"];
            isFinished?: components["schemas"]["BooleanOptional"];
            allowAutomaticDiscounts?: components["schemas"]["BooleanOptional"];
            servingSize?: components["schemas"]["StringOptional"];
            servingSizePerUnit?: components["schemas"]["Int32NullableOptional"];
            isNutrient?: components["schemas"]["BooleanOptional"];
            approvalDateUTC?: components["schemas"]["DateTimeNullableOptional"];
            customMetadata?: components["schemas"]["StringOptional"];
            /** @description List of strings of tax categories that the product belongs to. */
            taxCategories?: string[] | null;
            pricingDetails?: components["schemas"]["PricingDetail"];
            /** @description UserName of the user making the product change
             *     This will be used when authorizing with traceability systems (METRC/BioTrack) - if not included or NULL is specified, the traceability integration's "master key" will be used, if possible.
             *     This field is only relevant if the request is setting SyncExternally to true */
            userName?: string | null;
            instructions?: string | null;
            upc?: string | null;
            regulatoryName?: components["schemas"]["StringOptional"];
            broadcast?: components["schemas"]["BooleanOptional"];
        };
        ProductTag: {
            /** Format: int32 */
            tagId?: number;
            tagName?: string | null;
            /** Format: int32 */
            productId?: number;
        };
        /** @description Published discount model containing complete discount configuration and constraint information for customer-facing applications. */
        PublishedDiscount: {
            /**
             * Format: int32
             * @description Unique identifier for the discount.
             */
            discountId?: number;
            /** @description Display name of the discount for customer-facing applications. */
            discountName?: string | null;
            /**
             * Format: double
             * @description Monetary discount amount or percentage value.
             */
            discountAmount?: number;
            /** @description Promotional code required to apply the discount (optional). */
            discountCode?: string | null;
            /** @description Type classification of the discount (e.g., percentage, fixed amount). */
            discountType?: string | null;
            /** @description Method used to apply the discount (e.g., automatic, code required). */
            discountMethod?: string | null;
            /** @description Indicates if the discount is currently active and available. */
            isActive?: boolean;
            /**
             * Format: date-time
             * @description Start date and time when discount becomes valid (UTC converted from Eastern Time).
             */
            validFrom?: string | null;
            /**
             * Format: date-time
             * @description End date and time when discount expires (UTC converted from Eastern Time).
             */
            validUntil?: string | null;
            /** @description Type of threshold requirement for discount eligibility (optional). */
            thresholdType?: string | null;
            /**
             * Format: double
             * @description Minimum number of qualifying items required for discount application (optional).
             */
            minimumItemsRequired?: number | null;
            /**
             * Format: double
             * @description Maximum number of items that can receive the discount (optional).
             */
            maximumItemsAllowed?: number | null;
            /**
             * Format: double
             * @description Maximum number of times this discount can be used (optional).
             */
            maximumUsageCount?: number | null;
            /** @description Indicates if discount applies to non-cannabis products. */
            includeNonCannabis?: boolean;
            /** @description Indicates if discount is restricted to first-time customers only. */
            firstTimeCustomerOnly?: boolean;
            /** @description Indicates if discount can be combined with other discounts. */
            stackOnOtherDiscounts?: boolean;
            weeklyRecurrenceInfo?: components["schemas"]["WeeklyRecurrenceInfo"];
            products?: components["schemas"]["DiscountRestriction"];
            productCategories?: components["schemas"]["DiscountRestriction"];
            brands?: components["schemas"]["DiscountRestriction"];
            vendors?: components["schemas"]["DiscountRestriction"];
            strains?: components["schemas"]["DiscountRestriction"];
            tiers?: components["schemas"]["DiscountRestriction"];
            tags?: components["schemas"]["DiscountRestriction"];
            inventoryTags?: components["schemas"]["DiscountRestriction"];
            customerTypes?: components["schemas"]["DiscountRestriction"];
            /** @description Associated discount groups for bundling and organization (loaded conditionally). */
            discountGroups?: components["schemas"]["DiscountGroup"][] | null;
        };
        PurchaseOrderData: {
            /** Format: int32 */
            purchaseOrderId?: number;
            /** Format: date-time */
            expectedArrivalDate?: string | null;
            title?: string | null;
            /** Format: date-time */
            dateReceived?: string | null;
            /** Format: date-time */
            dateSubmitted?: string | null;
            shippingInformation?: string | null;
            /** Format: int32 */
            vendorId?: number;
            vendorName?: string | null;
            vendorContact?: string | null;
            status?: string | null;
            /** Format: int32 */
            purchaseOrderNumber?: number;
            createdByUser?: string | null;
            /** Format: date-time */
            dateCreated?: string | null;
            purchaseOrderItems?: components["schemas"]["PurchaseOrderItemDetail"][] | null;
        };
        PurchaseOrderItemDetail: {
            /** Format: int32 */
            purchaseOrderId?: number;
            /** Format: int32 */
            purchaseOrderItemId?: number;
            /** Format: int32 */
            productId?: number;
            productName?: string | null;
            /** Format: int32 */
            quantity?: number;
            /** Format: int32 */
            unitId?: number;
            unitName?: string | null;
            unitNameAbbreviation?: string | null;
            /** Format: double */
            subtotal?: number;
            /** Format: double */
            tax?: number;
        };
        /** @description Request model for receiving and recording new cannabis inventory items into the facility management system. */
        ReceiveInventoryItemSave: {
            /**
             * Format: int32
             * @description Product identifier for the cannabis product being received into inventory (required).
             */
            productId: number;
            /**
             * Format: double
             * @description Quantity of the product being received into inventory (required).
             */
            quantity: number;
            /** @description Unit type for the received quantity (qty; ml; g; Gal; L; lb; mg; oz; fl oz; kg). */
            unitType?: string | null;
            /**
             * Format: double
             * @description Flower equivalent weight for regulatory compliance and limit calculations.
             */
            flowerEquivalent?: number | null;
            /**
             * Format: double
             * @description Recreational flower equivalent weight for regulatory compliance tracking.
             */
            recFlowerEquivalent?: number | null;
            /**
             * Format: int32
             * @description Vendor identifier for supply chain tracking and vendor management.
             */
            vendorId?: number | null;
            /**
             * Format: int32
             * @description Room identifier for facility location assignment and space management.
             */
            roomId?: number | null;
            /** @description Package identifier from state tracking system for compliance documentation. */
            packageId?: string | null;
            /** @description Lot number for batch tracking and quality control management. */
            lot?: string | null;
            /**
             * Format: double
             * @description Unit cost for inventory valuation and cost accounting.
             */
            cost?: number | null;
            /**
             * Format: double
             * @description General retail price for the received inventory item.
             */
            price?: number | null;
            /**
             * Format: double
             * @description Recreational market price for dual-license operations.
             */
            recPrice?: number | null;
            /**
             * Format: double
             * @description Tax amount for financial compliance and tax reporting.
             */
            tax?: number | null;
            /**
             * Format: date-time
             * @description Product expiration date for inventory rotation and compliance management.
             */
            expirationDate?: string | null;
            /** @description Collection of tag identifiers for product categorization and organization. */
            tags?: number[] | null;
            /**
             * Format: double
             * @description Cultivation tax amount for cannabis-specific tax compliance.
             */
            cultivationTax?: number | null;
            /**
             * Format: int32
             * @description Table identifier within the room for precise location tracking.
             */
            tableId?: number | null;
            /**
             * Format: int32
             * @description Source allocated inventory identifier for traceability and audit trails.
             */
            sourceAllocatedInventoryId?: number | null;
            /**
             * Format: double
             * @description Total package cost for comprehensive cost allocation and accounting.
             */
            totalPackageCost?: number | null;
            /** @description Flag to retrieve lab results from Metrc for compliance integration. */
            getMetrcLabResults?: boolean | null;
            /** @description Product name for inventory identification and display purposes. */
            productName?: string | null;
            /**
             * Format: date-time
             * @description Date when the product was packaged for shelf life tracking.
             */
            packagingDate?: string | null;
            /**
             * Format: date-time
             * @description Date when the product was manufactured for quality control tracking.
             */
            manufacturingDate?: string | null;
            /**
             * Format: int32
             * @description Producer identifier for supply chain tracking and compliance documentation.
             */
            producerId?: number | null;
            /** @description External package identifier for cross-system integration and tracking. */
            externalPackageId?: string | null;
            /** @description Potency indicator for product strength classification and customer information. */
            potencyIndicator?: string | null;
        };
        /** @description Request model for creating inventory receive orders for incoming transfers, purchase orders, or direct inventory additions. */
        ReceiveInventorySave: {
            /**
             * Format: int32
             * @description Vendor identifier for the supplier (optional, can be resolved from VendorLicense).
             */
            vendorId?: number | null;
            /** @description Name of the person who delivered the inventory shipment. */
            deliveredBy?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the inventory was delivered (required).
             */
            deliveredOn: string;
            /** @description Vendor license code for compliance tracking and vendor identification. */
            vendorLicense?: string | null;
            /** @description External transaction reference ID for tracking and reconciliation. */
            transactionId?: string | null;
            /** @description Descriptive title for the receive order for identification purposes. */
            orderTitle?: string | null;
            /** @description External system ID for preventing duplicate receives (must be unique). */
            externalId?: string | null;
            /** @description Additional notes or comments about the receive transaction. */
            note?: string | null;
            /** @description Collection of inventory items being received in this transaction. */
            items?: components["schemas"]["ReceiveInventoryItemSave"][] | null;
            /** @description Indicates whether to immediately process items into inventory (true) or save as draft (false). */
            receiveIntoInventory?: boolean | null;
            /**
             * Format: int32
             * @description User ID for processing the receive (required when ReceiveIntoInventory=true).
             */
            userId?: number | null;
            /** @description Username for processing the receive (alternative to UserId, required when ReceiveIntoInventory=true). */
            userName?: string | null;
        };
        /** @description Received inventory record model representing completed or pending inventory receive orders and their processing status. */
        ReceivedInventory: {
            /**
             * Format: int32
             * @description Unique identifier for the receive inventory transaction.
             */
            receiveInventoryHistoryId?: number;
            /** @description Descriptive title for the receive order for identification purposes. */
            title?: string | null;
            /** @description Current processing status of the receive order (e.g., "Pending", "Completed", "Failed"). */
            status?: string | null;
            /** @description Error message if the receive order failed processing (optional). */
            failureMessage?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the inventory was delivered by the vendor (optional).
             */
            deliveredOn?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the receive order was created in the system (optional).
             */
            addedOn?: string | null;
            /** @description Name of the vendor who supplied the inventory. */
            vendor?: string | null;
            /** @description Vendor license code for compliance tracking and verification. */
            vendorLicense?: string | null;
            /** @description Collection of inventory items included in this receive order. */
            items?: components["schemas"]["ReceivedInventoryItem"][] | null;
        };
        /** @description Response model representing received cannabis inventory items with complete tracking and financial information. */
        ReceivedInventoryItem: {
            /** @description Product name for inventory item identification and display. */
            product?: string | null;
            /** @description Stock Keeping Unit (SKU) for product identification and retail operations. */
            sku?: string | null;
            /**
             * Format: int32
             * @description Product identifier for database references and system integration.
             */
            productId?: number | null;
            /** @description Product type classification for cannabis product categorization. */
            type?: string | null;
            /**
             * Format: double
             * @description Quantity of the received inventory item for stock tracking.
             */
            quantity?: number;
            /** @description Unit abbreviation for quantity measurement display (e.g., "g", "oz", "ml"). */
            unitAbbreviation?: string | null;
            /** @description Full unit name for quantity measurement (e.g., "grams", "ounces", "milliliters"). */
            unit?: string | null;
            /**
             * Format: double
             * @description Cost per unit for inventory valuation and financial accounting.
             */
            unitCost?: number;
            /**
             * Format: double
             * @description Tax amount per unit for cannabis tax compliance and reporting.
             */
            unitTax?: number;
            /**
             * Format: double
             * @description Total cost for the received inventory item including all taxes and fees.
             */
            totalCost?: number;
            /** @description Package identifier from state tracking system for compliance documentation. */
            packageId?: string | null;
            /** @description External package identifier for cross-system tracking and integration. */
            externalPackageId?: string | null;
            /** @description Batch name for lot tracking and quality control management. */
            batchName?: string | null;
            /**
             * Format: int32
             * @description Batch identifier for database references and batch tracking.
             */
            batchId?: number | null;
            /** @description Room name for facility location identification and display. */
            room?: string | null;
            /**
             * Format: int32
             * @description Room identifier for database references and location tracking.
             */
            roomId?: number | null;
        };
        /** @description Represents a register cash adjustment transaction record for financial reconciliation and audit trails.
         *
         *     Register adjustments include manual cash corrections, deposits, withdrawals, close-outs, and other
         *     cash management activities that affect register balances. Each adjustment maintains a complete
         *     audit trail with employee accountability and reason tracking. */
        RegisterAdjustment: {
            /**
             * Format: int32
             * @description Unique identifier for the register adjustment transaction.
             *     Primary key for tracking and referencing specific adjustment records.
             */
            adjustmentId?: number;
            /** @description Type of register adjustment being performed.
             *     Common values include "Adjustment", "Close Out", "Deposit", "Withdrawal", "Cash Drop". */
            adjustmentType?: string | null;
            /**
             * Format: double
             * @description Dollar amount of the register adjustment (positive or negative).
             *     Positive values indicate cash added to register, negative values indicate cash removed.
             */
            adjustmentAmount?: number;
            /** @description Name of the employee who performed the register adjustment.
             *     Used for accountability and audit trail purposes. */
            adjustedBy?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the register adjustment was performed (optional).
             *     Timestamp for audit trail and reconciliation purposes.
             */
            adjustedOn?: string | null;
            /** @description Name of the register/terminal where the adjustment occurred.
             *     Identifies which physical register or point-of-sale terminal was adjusted. */
            terminalName?: string | null;
            /**
             * Format: int32
             * @description Unique identifier for the register/terminal where the adjustment occurred.
             *     Numeric identifier for the specific point-of-sale terminal.
             */
            terminalId?: number;
            /**
             * Format: int32
             * @description Employee ID of the staff member who performed the adjustment.
             *     Numeric identifier linking to the employee record for accountability.
             */
            adjustedByEmployeeId?: number;
            /** @description Reason code or description for why the adjustment was made.
             *     Provides business justification for the cash adjustment. */
            adjustmentReason?: string | null;
            /** @description Additional comments or notes about the register adjustment (optional).
             *     Free-text field for additional details or explanations. */
            comment?: string | null;
        };
        /** @description Represents a comprehensive cash flow summary for a specific register terminal.
         *
         *     This model provides real-time cash reconciliation data including starting balances,
         *     transaction activity, and variance calculations for cash management and balancing
         *     purposes. Used for end-of-shift reconciliation and cash discrepancy identification. */
        RegisterCashSummary: {
            /** @description Name of the register/terminal for which this cash summary applies.
             *     Identifies the specific point-of-sale terminal or register location. */
            terminalName?: string | null;
            /**
             * Format: double
             * @description Starting cash balance for the register at the beginning of the period.
             *     Base amount of cash in the register before any transactions occurred.
             */
            startingBalance?: number;
            /**
             * Format: double
             * @description Ending cash balance for the register at the end of the period.
             *     Final amount of cash in the register after all transactions and adjustments.
             */
            endingBalance?: number;
            /**
             * Format: double
             * @description Total cash sales processed through the register during the period.
             *     Includes all cash payments received for customer transactions.
             */
            sales?: number;
            /**
             * Format: double
             * @description Total cash refunds and returns processed during the period.
             *     Represents cash paid out to customers for returned merchandise.
             */
            returns?: number;
            /**
             * Format: double
             * @description Total cash deposits added to the register during the period.
             *     Includes cash added to the register for operational purposes.
             */
            deposits?: number;
            /**
             * Format: double
             * @description Total register adjustments (positive or negative) made during the period.
             *     Includes manual cash corrections, withdrawals, and balancing entries.
             */
            adjustments?: number;
            /**
             * Format: double
             * @description Cash variance (over or short) compared to expected register balance.
             *     Positive values indicate cash overage, negative values indicate shortage.
             */
            overShort?: number;
        };
        /** @description Represents a comprehensive register transaction record including sales, adjustments, and cash management activities.
         *
         *     This model encompasses all types of register activity including customer sales transactions, cash adjustments,
         *     payment processing, register maintenance, and operational activities. Each transaction maintains complete
         *     audit trails with employee accountability and detailed financial information. */
        RegisterTransaction: {
            /**
             * Format: int32
             * @description Unique identifier for the register transaction record.
             *     Primary key for tracking and referencing specific transaction activities.
             */
            registerTransactionId?: number;
            /** @description Type of register transaction being recorded.
             *     Examples include "Sale", "Adjustment", "Close Out", "Deposit", "Withdrawal", "Return", "Payment". */
            transactionType?: string | null;
            /**
             * Format: double
             * @description Dollar amount of the register transaction (positive or negative).
             *     Represents the financial impact of the transaction on register balances.
             */
            transactionAmount?: number;
            /** @description Name of the employee who processed the register transaction.
             *     Used for accountability and performance tracking. */
            transactionBy?: string | null;
            /**
             * Format: date-time
             * @description Date and time when the register transaction occurred in UTC (optional).
             *     Timestamp for audit trail and financial reconciliation purposes.
             */
            transactionDateUTC?: string | null;
            /**
             * Format: int32
             * @description Reference to the associated business transaction ID (optional).
             *     Links register activity to customer sales transactions when applicable.
             */
            transactionId?: number | null;
            /** @description Name of the register/terminal where the transaction was processed.
             *     Identifies which physical register or point-of-sale terminal handled the transaction. */
            terminalName?: string | null;
            /**
             * Format: int32
             * @description Unique identifier for the register/terminal where the transaction occurred.
             *     Numeric identifier for the specific point-of-sale terminal.
             */
            terminalId?: number;
            /**
             * Format: int32
             * @description Employee ID of the staff member who processed the transaction.
             *     Numeric identifier linking to the employee record for accountability tracking.
             */
            transactionByEmployeeId?: number;
            /** @description Reason code or description for adjustment transactions (optional).
             *     Provides business justification when the transaction is an adjustment or correction. */
            adjustmentReason?: string | null;
            /** @description Additional comments or notes about the register transaction (optional).
             *     Free-text field for additional context or explanations. */
            comment?: string | null;
        };
        /** @description Regulatory category model containing state-mandated product classification information for cannabis compliance and reporting. */
        RegulatoryCategory: {
            /**
             * Format: int32
             * @description Unique identifier for the regulatory category.
             */
            regulatoryCategoryId?: number;
            /** @description Display name of the regulatory category as defined by state cannabis regulations. */
            regulatoryCategoryName?: string | null;
        };
        /** @description Extended discount model with additional reporting and administrative properties for internal operations. */
        ReportingDiscountDetail: {
            /** @description Indicates if discount is available for online/e-commerce ordering. */
            isAvailableOnline?: boolean;
            /** @description Method used to apply the discount in the system. */
            applicationMethod?: string | null;
            /** @description External system identifier for integration mapping. */
            externalId?: string | null;
            /** @description Indicates if discount application requires manager approval. */
            requireManagerApproval?: boolean;
            /** @description Indicates if discount has been marked as deleted. */
            isDeleted?: boolean;
            /** @description Collection of location mappings where this discount applies. */
            appliesToLocations?: components["schemas"]["LocationMapping"][] | null;
            /**
             * Format: int32
             * @description Unique identifier for the discount.
             */
            discountId?: number;
            /** @description Display name of the discount for customer-facing applications. */
            discountName?: string | null;
            /**
             * Format: double
             * @description Monetary discount amount or percentage value.
             */
            discountAmount?: number;
            /** @description Promotional code required to apply the discount (optional). */
            discountCode?: string | null;
            /** @description Type classification of the discount (e.g., percentage, fixed amount). */
            discountType?: string | null;
            /** @description Method used to apply the discount (e.g., automatic, code required). */
            discountMethod?: string | null;
            /** @description Indicates if the discount is currently active and available. */
            isActive?: boolean;
            /**
             * Format: date-time
             * @description Start date and time when discount becomes valid (UTC converted from Eastern Time).
             */
            validFrom?: string | null;
            /**
             * Format: date-time
             * @description End date and time when discount expires (UTC converted from Eastern Time).
             */
            validUntil?: string | null;
            /** @description Type of threshold requirement for discount eligibility (optional). */
            thresholdType?: string | null;
            /**
             * Format: double
             * @description Minimum number of qualifying items required for discount application (optional).
             */
            minimumItemsRequired?: number | null;
            /**
             * Format: double
             * @description Maximum number of items that can receive the discount (optional).
             */
            maximumItemsAllowed?: number | null;
            /**
             * Format: double
             * @description Maximum number of times this discount can be used (optional).
             */
            maximumUsageCount?: number | null;
            /** @description Indicates if discount applies to non-cannabis products. */
            includeNonCannabis?: boolean;
            /** @description Indicates if discount is restricted to first-time customers only. */
            firstTimeCustomerOnly?: boolean;
            /** @description Indicates if discount can be combined with other discounts. */
            stackOnOtherDiscounts?: boolean;
            weeklyRecurrenceInfo?: components["schemas"]["WeeklyRecurrenceInfo"];
            products?: components["schemas"]["DiscountRestriction"];
            productCategories?: components["schemas"]["DiscountRestriction"];
            brands?: components["schemas"]["DiscountRestriction"];
            vendors?: components["schemas"]["DiscountRestriction"];
            strains?: components["schemas"]["DiscountRestriction"];
            tiers?: components["schemas"]["DiscountRestriction"];
            tags?: components["schemas"]["DiscountRestriction"];
            inventoryTags?: components["schemas"]["DiscountRestriction"];
            customerTypes?: components["schemas"]["DiscountRestriction"];
            /** @description Associated discount groups for bundling and organization (loaded conditionally). */
            discountGroups?: components["schemas"]["DiscountGroup"][] | null;
        };
        /** @description Extended inventory item model for financial reporting with cost and allocation data. */
        ReportingInventoryItem: {
            /** @description Unit of measurement for unit weight, always "g" (grams). */
            unitWeightUnit?: string | null;
            /**
             * Format: double
             * @description Unit cost of the inventory item for cost of goods sold calculations (in USD).
             */
            unitCost?: number | null;
            /**
             * Format: double
             * @description Quantity of inventory allocated to orders or transfers but not yet fulfilled.
             */
            allocatedQuantity?: number | null;
            /**
             * Format: int32
             * @description Unique inventory record identifier for this specific inventory item.
             */
            inventoryId?: number;
            /**
             * Format: int32
             * @description Product identifier linking this inventory to the product catalog.
             */
            productId?: number;
            /** @description Stock Keeping Unit (SKU) code for inventory tracking and identification. */
            sku?: string | null;
            /** @description Display name of the product for customer-facing applications. */
            productName?: string | null;
            /** @description Detailed product description including effects, characteristics, and usage information. */
            description?: string | null;
            /**
             * Format: int32
             * @description Category identifier for product classification (optional).
             */
            categoryId?: number | null;
            /** @description Category name for product classification and filtering. */
            category?: string | null;
            /** @description URL path to product image for display purposes. */
            imageUrl?: string | null;
            /**
             * Format: double
             * @description Current available quantity for sale or transfer.
             */
            quantityAvailable?: number;
            /** @description Unit of measurement for the available quantity (e.g., "g", "mg", "ea"). */
            quantityUnits?: string | null;
            /**
             * Format: double
             * @description Weight per unit in grams for dosing and compliance calculations.
             */
            unitWeight?: number;
            /**
             * Format: double
             * @description Flower equivalent amount in grams for compliance tracking.
             */
            flowerEquivalent?: number;
            /**
             * Format: double
             * @description Recreational flower equivalent amount in grams (optional).
             */
            recFlowerEquivalent?: number | null;
            /** @description Unit of measurement for flower equivalent, always "g" (grams). */
            readonly flowerEquivalentUnits?: string | null;
            /**
             * Format: int32
             * @description Batch identifier for lot tracking and quality control.
             */
            batchId?: number;
            /** @description Human-readable batch name or lot number for tracking. */
            batchName?: string | null;
            /** @description Package identifier for compliance tracking and traceability. */
            packageId?: string | null;
            /** @description Current status of the package (e.g., "Active", "Testing", "Quarantine"). */
            packageStatus?: string | null;
            /**
             * Format: double
             * @description Base unit price for retail sales.
             */
            unitPrice?: number;
            /**
             * Format: double
             * @description Medical program pricing (optional, different from retail).
             */
            medUnitPrice?: number | null;
            /**
             * Format: double
             * @description Recreational program pricing (optional, different from medical).
             */
            recUnitPrice?: number | null;
            /**
             * Format: int32
             * @description Strain identifier for cannabis products (optional).
             */
            strainId?: number | null;
            /** @description Strain name for cannabis products. */
            strain?: string | null;
            /** @description Cannabis strain classification (Hybrid, Indica, Sativa, CBD). */
            strainType?: string | null;
            /** @description Product size designation for packaging and dosing information. */
            size?: string | null;
            /** @description Collection of laboratory test results for this batch (included when includeLabResults=true). */
            labResults?: components["schemas"]["LabResult"][] | null;
            /**
             * Format: date-time
             * @description Date when laboratory testing was completed (optional).
             */
            testedDate?: string | null;
            /**
             * Format: date-time
             * @description Date when sample was collected for laboratory testing (optional).
             */
            sampleDate?: string | null;
            /**
             * Format: date-time
             * @description Date when product was packaged for distribution (optional).
             */
            packagedDate?: string | null;
            /**
             * Format: date-time
             * @description Date when product was manufactured or produced (optional).
             */
            manufacturingDate?: string | null;
            /**
             * Format: date-time
             * @description Last modification timestamp in UTC for data synchronization.
             */
            lastModifiedDateUtc?: string | null;
            /** @description Current status of laboratory testing (e.g., "Passed", "Failed", "Pending"). */
            labTestStatus?: string | null;
            /**
             * Format: int32
             * @description Vendor identifier for the supplier of this inventory (optional).
             */
            vendorId?: number | null;
            /** @description Vendor name for the supplier of this inventory. */
            vendor?: string | null;
            /**
             * Format: date-time
             * @description Product expiration date for compliance and quality control (optional).
             */
            expirationDate?: string | null;
            /** @description Quantity breakdown by storage room/location (included when includeRoomQuantities=true). */
            roomQuantities?: components["schemas"]["InventoryRoomQuantity"][] | null;
            /** @description Pricing tier classification for bulk pricing strategies. */
            pricingTierName?: string | null;
            /** @description Alternative product name for display purposes. */
            alternateName?: string | null;
            /** @description Collection of compliance tags associated with this inventory package. */
            tags?: components["schemas"]["InventoryTag"][] | null;
            /**
             * Format: int32
             * @description Brand identifier for branded products (optional).
             */
            brandId?: number | null;
            /** @description Brand name for branded products. */
            brandName?: string | null;
            /** @description Indicates if product is restricted to medical program only. */
            medicalOnly?: boolean;
            /** @description External compliance system ID (METRC or BioTrack) for regulatory tracking. */
            externalPackageId?: string | null;
            /** @description Producer name for cultivation and manufacturing tracking. */
            producer?: string | null;
            /**
             * Format: int32
             * @description Producer identifier for cultivation and manufacturing tracking (optional).
             */
            producerId?: number | null;
            /** @description Package lineage information for traceability and compliance tracking. */
            lineage?: components["schemas"]["PackageLineage"][] | null;
            /** @description Potency classification indicator for dosing guidance. */
            potencyIndicator?: string | null;
            /** @description Master category classification for product grouping. */
            masterCategory?: string | null;
            /**
             * Format: double
             * @description Effective potency in milligrams for dosing calculations (optional).
             */
            effectivePotencyMg?: number | null;
            /** @description Indicates if product contains cannabis or is cannabis-related. */
            isCannabis?: boolean;
            /** @description National Drug Code for pharmaceutical tracking (optional). */
            packageNDC?: string | null;
            /** @description URL to certificate of analysis or lab testing document. */
            labResultUrl?: string | null;
        };
        /** @description Request model for retagging cannabis plants with new serial numbers for compliance and tracking updates. */
        RetagPlantRequest: {
            /**
             * Format: int32
             * @description Plant identifier for the cannabis plant being retagged with a new serial number.
             */
            plantId?: number;
            /** @description New serial number for the plant identification tag replacement. */
            serialNumber?: string | null;
        };
        /** @description Detailed specification for retiring immature plants from cultivation batches with compliance documentation. */
        RetireImmaturePlantsDetails: {
            /**
             * Format: int32
             * @description Batch identifier for the plant batch containing plants to be retired.
             */
            batchId?: number;
            /**
             * Format: int32
             * @description Number of plants to retire from the specified batch.
             */
            countToRetire?: number;
            /** @description Standardized reason code for the plant retirement (e.g., "DISEASE", "PEST", "POOR_HEALTH", "CONTAMINATION"). */
            reasonCode?: string | null;
            /**
             * Format: date-time
             * @description Date when the plants were retired for cultivation timeline documentation.
             */
            retireDate?: string | null;
        };
        /** @description Request model for retiring immature cannabis plants due to loss, contamination, or quality issues. */
        RetireImmaturePlantsRequest: {
            /** @description Collection of plant retirement specifications for batch processing of plant removals. */
            plants?: components["schemas"]["RetireImmaturePlantsDetails"][] | null;
        };
        RetirePlantRequest: {
            plantIds?: number[] | null;
            /** Format: int32 */
            reasonId?: number | null;
            reasonCode?: string | null;
            wasteType?: string | null;
            /** Format: int32 */
            roomId?: number;
            /** Format: double */
            wasteWeight?: number | null;
            comment?: string | null;
            wastePackageId?: string | null;
            /** Format: date-time */
            wasteDate?: string | null;
            /** Format: double */
            plantWeight?: number | null;
            /** Format: int32 */
            plantWeightUnitId?: number | null;
            wasteMaterial?: string | null;
            wasteReason?: string | null;
            wasteMethod?: string | null;
            reasonNote?: string | null;
            emptyCloneGroup?: boolean;
        };
        /** @description Cultivation room model containing facility area configuration information for cannabis operations and facility management. */
        Room: {
            /**
             * Format: int32
             * @description Unique identifier for the cultivation room or facility area.
             *     **Required for updates, null/0 for new room creation.**
             */
            roomId?: number | null;
            /** @description Human-readable name for room identification and cultivation tracking.
             *     **Required for both create and update operations.** */
            roomName?: string | null;
            /** @description Indicates if this room is designated for quarantine operations and compliance isolation. */
            isQuarantineRoom?: boolean;
            /** @description Indicates if this room is designated as a secure vault for valuable inventory storage. */
            isVaultRoom?: boolean;
            /** @description Indicates if this room is designated as a customer waiting area. */
            isWaitingRoom?: boolean;
            /** @description Indicates if this room is designated as the main sales floor for customer transactions. */
            isSalesFloor?: boolean;
            /** @description Indicates if this room is designated for point-of-sale operations and transactions. */
            isPOSRoom?: boolean;
            /** @description Indicates if this room is designated for inventory storage and management. */
            isInventoryRoom?: boolean;
            /** @description Indicates if this room is designated for pre-order fulfillment operations. */
            isPreOrderRoom?: boolean;
            /** @description Indicates if this room is designated for e-commerce order processing and fulfillment. */
            isEcommerceRoom?: boolean;
        };
        /** @description Room-based waste record model for facility waste disposal tracking and compliance documentation. */
        RoomWaste: {
            /**
             * Format: int32
             * @description Unique identifier for the waste record.
             */
            wasteId?: number | null;
            /** @description Reference number for waste tracking and documentation. */
            referenceNo?: string | null;
            /** @description Additional comments or notes about the waste disposal. */
            comments?: string | null;
            /**
             * Format: date-time
             * @description Date when the waste disposal occurred.
             */
            wasteDate?: string | null;
            /** @description Type or category of waste material being disposed. */
            wasteType?: string | null;
            /**
             * Format: int32
             * @description Identifier for the room or facility area where waste originated.
             */
            roomId?: number;
            /**
             * Format: double
             * @description Quantity of waste material being disposed.
             */
            wasteAmount?: number;
            /**
             * Format: int32
             * @description Unit of measurement identifier for the waste amount.
             */
            unitId?: number;
        };
        /** @description Response model for successful inventory receive order creation operations. */
        SavedReceive: {
            /**
             * Format: int32
             * @description Unique identifier for the created receive inventory transaction.
             */
            receiveInventoryHistoryId?: number;
        };
        /** @description Request model for setting a product image through the product image management API. */
        SetImageRequest: {
            /**
             * Format: int32
             * @description The unique identifier of the product to associate the image with.
             */
            productId: number;
            /** @description Base64-encoded string representation of the image file data. */
            base64Image: string;
            /** @description Original filename of the image including file extension for proper handling. */
            fileName: string;
            /**
             * Format: byte
             * @description Computed property that converts the Base64Image string to byte array for processing.
             */
            readonly image?: string | null;
            fileType?: components["schemas"]["UploadFileType"];
        };
        /** @description Response model for successful product image upload operations. */
        SetImageResponse: {
            /**
             * Format: int32
             * @description Unique identifier assigned to the uploaded image for tracking and reference.
             */
            imageId?: number;
            /** @description Public URL where the uploaded image can be accessed and displayed. */
            imageUrl?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        Severity: 0 | 1 | 2;
        /** @description Represents a product size configuration for cannabis products within an organization. */
        Size: {
            /**
             * Format: int32
             * @description Unique identifier for the product size configuration.
             */
            sizeId?: number;
            /** @description Display name for the product size. */
            sizeName?: string | null;
            /** @description Detailed description of the product size and its usage. */
            description?: string | null;
        };
        SplitBatchDetails: {
            newBatchName?: string | null;
            /** Format: int32 */
            batchId?: number;
            location?: string | null;
            strain?: string | null;
            /** Format: int32 */
            quantity?: number;
            /** Format: date-time */
            splitDate?: string | null;
        };
        SplitImmaturePlantResult: {
            batch?: components["schemas"]["SplitImmaturePlantResultDetail"][] | null;
            plant?: components["schemas"]["SplitImmaturePlantResultDetail"][] | null;
        };
        SplitImmaturePlantResultApiResult: {
            result?: boolean;
            message?: string | null;
            data?: components["schemas"]["SplitImmaturePlantResult"];
        };
        SplitImmaturePlantResultDetail: {
            /** Format: int32 */
            batchId?: number;
            /** Format: int32 */
            batchPlantCount?: number;
            /** Format: int32 */
            newBatchId?: number;
            /** Format: int32 */
            newBatchPlantCount?: number;
        };
        /** @description Request model for splitting immature cannabis plant batches and individual plants for cultivation optimization. */
        SplitImmaturePlantsRequest: {
            /** @description Collection of batch split specifications for dividing immature plant batches into smaller groups. */
            batch?: components["schemas"]["SplitBatchDetails"][] | null;
            /** @description Collection of individual plant split specifications for precise cultivation management. */
            plant?: components["schemas"]["SplitPlantDetails"][] | null;
        };
        SplitPlantDetails: {
            /** Format: int32 */
            batchId?: number;
            location?: string | null;
            strain?: string | null;
            /** Format: int32 */
            quantity?: number;
            /** Format: date-time */
            splitDate?: string | null;
        };
        StandardAllergensDetails: {
            milk?: boolean;
            eggs?: boolean;
            fish?: boolean;
            peanuts?: boolean;
            treeNuts?: boolean;
            sesame?: boolean;
            shellfish?: boolean;
            soybeans?: boolean;
            wheat?: boolean;
        };
        /** @description Cannabis strain information with genetic and classification details for product categorization and cultivation tracking. */
        StrainDetail: {
            /**
             * Format: int32
             * @description Unique identifier for the strain
             */
            strainId?: number;
            /** @description Name of the cannabis strain */
            strainName?: string | null;
            /** @description Detailed description of the strain's characteristics and effects */
            strainDescription?: string | null;
            /** @description Short name or code for the strain */
            strainAbbreviation?: string | null;
            /** @description Classification type of the strain. Valid values: `Indica`, `Sativa`, `Hybrid`, `CBD` */
            strainType?: string | null;
            /** @description External system identifier for third-party integration */
            externalId?: string | null;
        };
        StringIEnumerableOptional: unknown[];
        StringOptional: string;
        SuccessResult: {
            result?: boolean;
            message?: string | null;
            data?: Record<string, never> | null;
        };
        Table: {
            /** Format: int32 */
            tableId?: number | null;
            tableName?: string | null;
        };
        Tag: {
            tagName?: string | null;
            /** Format: int32 */
            tagId?: number;
        };
        /** @description Summary tax information aggregated across transaction items for reporting and receipt generation. */
        TaxSummaryInfo: {
            /** @description Name of the tax type being summarized (e.g., "State Excise Tax", "Sales Tax"). */
            rateName?: string | null;
            /**
             * Format: double
             * @description Total tax amount for this tax type across all transaction items (in USD).
             */
            amount?: number;
        };
        /** @description Point-of-sale terminal model containing terminal identification information for retail operations and transaction processing. */
        Terminal: {
            /**
             * Format: int32
             * @description Unique identifier for the point-of-sale terminal.
             */
            terminalId?: number;
            /** @description Human-readable name for terminal identification and assignment. */
            terminalName?: string | null;
        };
        /** @description Complete cannabis retail transaction model representing all aspects of cannabis sales operations. */
        Transaction: {
            /** Format: int32 */
            transactionId?: number;
            /** Format: int32 */
            customerId?: number;
            /** Format: int32 */
            employeeId?: number;
            /** Format: date-time */
            transactionDate?: string;
            /** Format: date-time */
            voidDate?: string | null;
            isVoid?: boolean;
            /** Format: double */
            subtotal?: number;
            /** Format: double */
            totalDiscount?: number;
            /** Format: double */
            readonly totalBeforeTax?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            tipAmount?: number | null;
            /** Format: double */
            total?: number;
            /** Format: double */
            paid?: number;
            /** Format: double */
            changeDue?: number;
            /** Format: int32 */
            totalItems?: number;
            terminalName?: string | null;
            /** Format: date-time */
            checkInDate?: string | null;
            invoiceNumber?: string | null;
            isTaxInclusive?: boolean;
            /** @description Will have one of the following values: Retail, Transfer, WholesaleOrder */
            transactionType?: string | null;
            /**
             * Format: double
             * @description Loyalty points earned on this transaction (can be negative if it's a return)
             */
            loyaltyEarned?: number | null;
            /**
             * Format: double
             * @description Loyalty points spent on this transaction (can be negative if it's a return)
             */
            loyaltySpent?: number | null;
            items?: components["schemas"]["TransactionItem"][] | null;
            readonly discounts?: components["schemas"]["AppliedDiscount"][] | null;
            /** Format: date-time */
            lastModifiedDateUTC?: string;
            /** Format: double */
            cashPaid?: number | null;
            /** Format: double */
            debitPaid?: number | null;
            /** Format: double */
            electronicPaid?: number | null;
            electronicPaymentMethod?: string | null;
            /** Format: double */
            checkPaid?: number | null;
            /** Format: double */
            creditPaid?: number | null;
            /** Format: double */
            giftPaid?: number | null;
            /** Format: double */
            mmapPaid?: number | null;
            /** Format: double */
            prePaymentAmount?: number | null;
            /** Format: double */
            revenueFeesAndDonations?: number | null;
            /** Format: double */
            nonRevenueFeesAndDonations?: number | null;
            feesAndDonations?: components["schemas"]["FeeDonationInfo"][] | null;
            readonly taxSummary?: components["schemas"]["TaxSummaryInfo"][] | null;
            /** Format: int32 */
            returnOnTransactionId?: number | null;
            /** Format: int32 */
            adjustmentForTransactionId?: number | null;
            orderType?: string | null;
            wasPreOrdered?: boolean;
            orderSource?: string | null;
            orderMethod?: string | null;
            invoiceName?: string | null;
            readonly isReturn?: boolean;
            authCode?: string | null;
            /** Format: int32 */
            customerTypeId?: number;
            isMedical?: boolean;
            orderIds?: number[] | null;
            /** Format: double */
            totalCredit?: number;
            completedByUser?: string | null;
            /** Format: int32 */
            responsibleForSaleUserId?: number;
            /** Format: date-time */
            transactionDateLocalTime?: string;
            /** Format: date-time */
            estTimeArrivalLocal?: string | null;
            /** Format: date-time */
            readonly estDeliveryDateLocal?: string | null;
            referenceId?: string | null;
            manualPayments?: components["schemas"]["ManualPayment"][] | null;
            /** Format: double */
            manualPaid?: number | null;
            integratedPayments?: components["schemas"]["IntegratedPayment"][] | null;
            /** Format: double */
            integratedPaid?: number | null;
        };
        /** @description Individual line item within a cannabis retail transaction containing product, pricing, and compliance information. */
        TransactionItem: {
            /**
             * Format: int32
             * @description Parent transaction identifier linking this item to the overall transaction.
             */
            transactionId?: number;
            /**
             * Format: int32
             * @description Product identifier for the purchased cannabis product.
             */
            productId?: number;
            /**
             * Format: double
             * @description Total price for this line item including all taxes and discounts (in USD).
             */
            totalPrice?: number;
            /**
             * Format: double
             * @description Quantity of the product purchased (units based on product type - grams, pieces, etc.).
             */
            quantity?: number;
            /**
             * Format: double
             * @description Unit price per individual item before taxes and discounts (in USD).
             */
            unitPrice?: number;
            /**
             * Format: double
             * @description Cost basis of the product for internal accounting and margin calculations (in USD).
             */
            unitCost?: number | null;
            /** @description State tracking system package identifier for regulatory compliance (seed-to-sale tracking). */
            packageId?: string | null;
            /** @description Original source package identifier for product lineage tracking in state systems. */
            sourcePackageId?: string | null;
            /**
             * Format: double
             * @description Total discount amount applied to this line item (in USD).
             */
            totalDiscount?: number;
            /**
             * Format: int32
             * @description Inventory record identifier for the specific product inventory being sold.
             */
            inventoryId?: number;
            /**
             * Format: int32
             * @description Unit type identifier defining how the product is measured and sold.
             */
            unitId?: number;
            /**
             * Format: double
             * @description Weight of the product unit in grams (calculated for flower products with UnitId = 1).
             */
            readonly unitWeight?: number | null;
            /** @description Unit of measurement for product weight (always "g" for grams). */
            readonly unitWeightUnit?: string | null;
            /**
             * Format: double
             * @description Flower equivalent weight for concentrate products in grams (for regulatory compliance).
             */
            flowerEquivalent?: number | null;
            /** @description Unit of measurement for flower equivalent (always "g" for grams). */
            readonly flowerEquivalentUnit?: string | null;
            /** @description Collection of discounts applied to this transaction item. */
            discounts?: components["schemas"]["AppliedDiscount"][] | null;
            /** @description Collection of taxes applied to this transaction item. */
            taxes?: components["schemas"]["LineItemTaxInfo"][] | null;
            /**
             * Format: date-time
             * @description Date when this item was returned (null if not returned).
             */
            returnDate?: string | null;
            /** @description Indicates whether this transaction item has been returned. */
            readonly isReturned?: boolean;
            /**
             * Format: int32
             * @description Transaction identifier of the return transaction that processed this item's return.
             */
            returnedByTransactionId?: number | null;
            /** @description Reason provided for returning this item (e.g., "Defective", "Customer Dissatisfaction"). */
            returnReason?: string | null;
            /** @description Cultivation batch name for product traceability and regulatory compliance. */
            batchName?: string | null;
            /**
             * Format: int32
             * @description Reference identifier to tie child items to parent items within a transaction.
             *     Not guaranteed to be unique outside of a single transaction.
             */
            readonly transactionItemId?: number;
            /** @description Vendor or supplier name for the product. */
            vendor?: string | null;
            /** @description Indicates whether this item represents a coupon or promotional discount rather than a physical product. */
            isCoupon?: boolean;
        };
        /** @description Measurement unit model for cannabis product tracking and inventory management. */
        Unit: {
            /**
             * Format: int32
             * @description Unique identifier for the measurement unit.
             */
            unitId?: number;
            /** @description Full name of the measurement unit (e.g., "Grams", "Ounces", "Pounds"). */
            unitName?: string | null;
            /** @description Short abbreviation for the unit (e.g., "g", "oz", "lb"). */
            abbreviation?: string | null;
            /**
             * Format: int32
             * @description Unit type classification identifier linking to measurement category.
             */
            unitTypeId?: number;
        };
        /** @description Unit type classification model for organizing measurement units by category. */
        UnitType: {
            /**
             * Format: int32
             * @description Unique identifier for the unit type category.
             */
            unitTypeId?: number;
            /** @description Display name of the unit type category (e.g., "Weight", "Volume", "Quantity"). */
            unitTypeName?: string | null;
            /** @description Short abbreviation for the unit type (e.g., "Wgt", "Vol", "Qty"). */
            unitTypeAbbreivation?: string | null;
        };
        /** @description Request model for updating laboratory test results for a specific batch by batch name. */
        UpdateBatchLabResultsRequest: {
            /** @description Name of the batch to update with laboratory test results (required). */
            batchName: string;
            /**
             * Format: double
             * @description Weight of the laboratory sample used for testing (in grams).
             */
            sampleWeight?: number | null;
            /** @description Collection of laboratory test results including cannabinoids and terpenes. */
            labResults?: components["schemas"]["CannabinoidTerpeneValue"][] | null;
        };
        UpdateBatchRequest: {
            batchName?: string | null;
            /** Format: int32 */
            roomId?: number | null;
            /** Format: int32 */
            strainId?: number | null;
        };
        /** @description Request model for updating delivery route details including vehicle assignments, driver assignments, and delivery status. */
        UpdateDeliveryRouteDetailRequest: {
            /**
             * Format: int32
             * @description Delivery transaction identifier to update (required).
             */
            transactionId?: number;
            /**
             * Format: int32
             * @description Primary driver identifier for delivery assignment (optional).
             */
            driverId?: number | null;
            /**
             * Format: int32
             * @description Secondary driver identifier for delivery assignment (optional).
             */
            driverId2?: number | null;
            /**
             * Format: int32
             * @description Vehicle identifier for delivery assignment (optional).
             */
            vehicleId?: number | null;
            /** @description Route information or delivery notes (optional). */
            route?: string | null;
            /** @description Delivery status update (optional). */
            status?: string | null;
        };
        /** @description Request model for updating existing customer journal entries with modified content and details. */
        UpdateJournalEntryRequest: {
            /**
             * Format: int32
             * @description The ID of the existing journal entry to update.
             */
            journalEntryId: number;
            /** @description Updated title or summary for the journal entry. */
            subject: string;
            /** @description Updated detailed content and notes for the journal entry. */
            body: string;
            /**
             * Format: date-time
             * @description Updated date and time when the journal entry should be dated.
             */
            date: string;
        };
        UpdatePackageTagsRequest: {
            packageIds?: components["schemas"]["StringIEnumerableOptional"];
            inventoryIds?: components["schemas"]["Int32IEnumerableOptional"];
            /** @description Required collection of tags to apply to the specified packages (required). */
            tags: string[];
        };
        UpdatePlantDetails: {
            /** Format: int32 */
            plantId?: number;
            serialNumber?: components["schemas"]["StringOptional"];
            dateCreated?: components["schemas"]["DateTimeNullableOptional"];
            bornDate?: components["schemas"]["DateTimeNullableOptional"];
            isMother?: components["schemas"]["BooleanNullableOptional"];
            strainId?: components["schemas"]["Int32NullableOptional"];
            roomId?: components["schemas"]["Int32NullableOptional"];
            tableId?: components["schemas"]["Int32NullableOptional"];
            batchId?: components["schemas"]["Int32NullableOptional"];
        };
        UpdatePlantsRequest: {
            plants?: components["schemas"]["UpdatePlantDetails"][] | null;
        };
        UpdatePreOrderRequest: {
            /** Format: int32 */
            orderId?: number;
            items?: components["schemas"]["PreOrderItem"][] | null;
            isDelivery?: boolean;
            /** @deprecated */
            orderSource?: string | null;
            deliveryStreet?: string | null;
            deliveryCity?: string | null;
            deliveryState?: string | null;
            deliveryPostalCode?: string | null;
            deliveryScheduleId?: components["schemas"]["DeliveryScheduleType"];
            notes?: string | null;
            redemptions?: components["schemas"]["PreOrderRedemptionIEnumerableOptional"];
            /** Format: int32 */
            customerId?: number;
            deliveryStreet2?: string | null;
            /** Format: date-time */
            timeWindowStartDateUtc?: string | null;
            /** Format: date-time */
            timeWindowEndDateUtc?: string | null;
        };
        /** @description Request model for creating or updating cannabis strain information.
         *
         *     **Create vs Update Behavior:**
         *     - **CREATE**: When `StrainId` is null, 0, or omitted, a new strain record will be created
         *     - **UPDATE**: When `StrainId` is provided with a valid strain ID, the existing strain will be updated
         *
         *     **Sparse Update Behavior:**
         *     - **Provided fields**: Will overwrite existing values with provided data
         *     - **Omitted fields**: Will preserve existing values (no data loss for updates)
         *     - **Special handling**: `StrainDescription` is always required and cannot be null */
        UpdateStrain: {
            /**
             * Format: int32
             * @description Unique identifier for strain updates.
             *     - **For CREATE**: Omit this field, set to null, or set to 0
             *     - **For UPDATE**: Provide the existing strain's ID
             */
            strainId?: number | null;
            /** @description Name of the cannabis strain (required for creation) */
            strainName: string;
            /** @description Detailed description of the strain's characteristics and effects.
             *     **REQUIRED** - Cannot be null or empty for both create and update operations. */
            strainDescription: string;
            /** @description Short name or code for the strain (optional) */
            abbreviation?: string | null;
            /** @description Classification type of the strain (optional).
             *     **Must be one of**: `Indica`, `Sativa`, `Hybrid`, `CBD`
             *     If provided, value will be validated against allowed strain types. */
            strainType?: string | null;
            /** @description External system identifier for third-party integration (optional).
             *     Useful for synchronizing with cultivation management systems. */
            externalId?: string | null;
            broadcast?: components["schemas"]["BooleanOptional"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        UploadFileType: 0 | 1 | 2 | 3 | 4 | 5;
        ValidationFailure: {
            propertyName?: string | null;
            errorMessage?: string | null;
            attemptedValue?: Record<string, never> | null;
            customState?: Record<string, never> | null;
            severity?: components["schemas"]["Severity"];
            errorCode?: string | null;
            formattedMessagePlaceholderValues?: {
                [key: string]: Record<string, never> | null;
            } | null;
        };
        ValidationResult: {
            readonly isValid?: boolean;
            errors?: components["schemas"]["ValidationFailure"][] | null;
            ruleSetsExecuted?: string[] | null;
        };
        VehicleDetail: {
            /** Format: int32 */
            vehicleId?: number;
            make?: string | null;
            model?: string | null;
            modelYear?: string | null;
            color?: string | null;
            licensePlate?: string | null;
            vin?: string | null;
        };
        /** @description Vendor information model for cannabis supply chain and compliance management. */
        Vendor: {
            /**
             * Format: int32
             * @description Unique identifier for the vendor in the system (null for new vendor creation).
             */
            vendorId?: number | null;
            /** @description Official business name of the vendor as registered with regulatory authorities. */
            vendorName?: string | null;
            /** @description Street address of the vendor's business location. */
            address?: string | null;
            /** @description City where the vendor's business is located. */
            city?: string | null;
            /** @description State or province where the vendor's business is located. */
            state?: string | null;
            /** @description Postal or ZIP code for the vendor's business address. */
            postalCode?: string | null;
            /** @description Cannabis business license number issued by state regulatory authorities. */
            licenseNumber?: string | null;
            /** @description Name of the primary business contact for this vendor. */
            contactName?: string | null;
            /** @description Email address for business communications with the vendor. */
            contactEmail?: string | null;
            /** @description Phone number for business communications with the vendor. */
            contactPhone?: string | null;
        };
        /** @description Comprehensive waste summary model containing all waste types for facility waste management and regulatory reporting. */
        WasteSummary: {
            /** @description Collection of room-based waste disposal records. */
            roomWaste?: components["schemas"]["RoomWaste"][] | null;
            /** @description Collection of harvest-based waste disposal records. */
            harvestWaste?: components["schemas"]["ObjectWaste"][] | null;
            /** @description Collection of plant-based waste disposal records. */
            plantWaste?: components["schemas"]["ObjectWaste"][] | null;
        };
        /** @description Weekly recurring schedule model defining time-based availability patterns for discount application. */
        WeeklyRecurrenceInfo: {
            /**
             * Format: date-span
             * @description Daily start time when discount becomes available (optional).
             */
            startTime?: string | null;
            /**
             * Format: date-span
             * @description Daily end time when discount expires (optional).
             */
            endTime?: string | null;
            /** @description Indicates if discount is available on Mondays. */
            appliesOnMonday?: boolean;
            /** @description Indicates if discount is available on Tuesdays. */
            appliesOnTuesday?: boolean;
            /** @description Indicates if discount is available on Wednesdays. */
            appliesOnWednesday?: boolean;
            /** @description Indicates if discount is available on Thursdays. */
            appliesOnThursday?: boolean;
            /** @description Indicates if discount is available on Fridays. */
            appliesOnFriday?: boolean;
            /** @description Indicates if discount is available on Saturdays. */
            appliesOnSaturday?: boolean;
            /** @description Indicates if discount is available on Sundays. */
            appliesOnSunday?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "BatchLab-resultsPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Batch lab results update request with batch name and lab data - UpdateBatchLabResultsRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdateBatchLabResultsRequest"];
                "application/json": components["schemas"]["UpdateBatchLabResultsRequest"];
                "text/json": components["schemas"]["UpdateBatchLabResultsRequest"];
                "application/*+json": components["schemas"]["UpdateBatchLabResultsRequest"];
            };
        };
        responses: {
            /** @description Success - Lab results successfully created or updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - String error message (parse response body as plain text) OR `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - Batch with specified name does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BrandGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of brand objects: `[{ Brand }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for brand access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BrandPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Brand information to create or update - BrandEditRequest object with brand details */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["BrandEditRequest"];
                "application/json": components["schemas"]["BrandEditRequest"];
                "text/json": components["schemas"]["BrandEditRequest"];
                "application/*+json": components["schemas"]["BrandEditRequest"];
            };
        };
        responses: {
            /** @description Success - Returns brand object: `{ Brand }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerCustomersGet: {
        parameters: {
            query?: {
                /** @description Optional date filter to return customers modified after this timestamp - Used for incremental sync */
                fromLastModifiedDateUTC?: string;
                /** @description Optional date filter to return customers modified before this timestamp - Used for date range filtering */
                toLastModifiedDateUTC?: string;
                /** @description Optional customer ID to return a specific customer by internal ID */
                customerID?: number;
                /** @description Include/exclude anonymous customers in results - Default: true */
                includeAnonymous?: boolean;
                /** @description Optional unique ID to return a specific customer by unique identifier - Must be valid long integer when provided */
                uniqueId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of customer objects: `[{ Customer }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"][];
                };
            };
            /** @description Bad Request - Invalid date range or uniqueId format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for customer data operations */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - Customer not found when searching by customerID or uniqueId */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CustomerCustomers-paginatedGet": {
        parameters: {
            query?: {
                /** @description Optional date filter to return customers modified after this timestamp */
                fromLastModifiedDateUTC?: string;
                /** @description Optional date filter to return customers modified before this timestamp */
                toLastModifiedDateUTC?: string;
                /** @description Page number for sequential pagination (integer, starts at 0) - Default: 0 */
                PageNumber?: number;
                /** @description Number of items per page (integer) - Default: 1000, Maximum: 10000 */
                PageSize?: number;
                /** @description Include/exclude anonymous customers in results - Default: true */
                includeAnonymous?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"][];
                };
            };
            /** @description Bad Request - PageSize exceeds maximum limit of 10,000 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CustomerCustomer-typesGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerType"][];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CustomerReferral-sourcesGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerCustomerPost: {
        parameters: {
            query?: {
                /** @description Skip duplicate detection and force creation of new customer record - Default: false */
                bypassDeduplication?: boolean;
            };
            header?: {
                /** @description Optional GUID for idempotency checks. When provided with IdempotencyKey in request body, prevents duplicate customer creation */
                ConsumerKey?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Customer information to create or update - EcomCustomerEdit object with customer details */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["EcomCustomerEdit"];
                "application/json": components["schemas"]["EcomCustomerEdit"];
                "text/json": components["schemas"]["EcomCustomerEdit"];
                "application/*+json": components["schemas"]["EcomCustomerEdit"];
            };
        };
        responses: {
            /** @description Success - Returns complete Customer object with assigned ID and loyalty status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for customer management */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - Customer ID provided for update but customer does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Internal Server Error - Server error occurred during customer processing */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerCustomerLookupPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["EcomCustomerEdit"];
                "application/json": components["schemas"]["EcomCustomerEdit"];
                "text/json": components["schemas"]["EcomCustomerEdit"];
                "application/*+json": components["schemas"]["EcomCustomerEdit"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerSearchPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Customer search request with search criteria - CustomerSearchRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CustomerSearchRequest"];
                "application/json": components["schemas"]["CustomerSearchRequest"];
                "text/json": components["schemas"]["CustomerSearchRequest"];
                "application/*+json": components["schemas"]["CustomerSearchRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSearchResult"][];
                };
            };
            /** @description Bad Request - Validation errors or no search criteria provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CustomerBy-external-idGet": {
        parameters: {
            query?: {
                externalId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerSearchResult"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Customer-journalGet": {
        parameters: {
            query?: {
                /** @description Internal customer ID to retrieve journal entries for - Must exist and be accessible to your location */
                customerId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of journal entry objects: `[{ JournalEntry }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"][];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for customer access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Customer-journalUpdatePost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Journal entry update request with required fields to update - UpdateJournalEntryRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdateJournalEntryRequest"];
                "application/json": components["schemas"]["UpdateJournalEntryRequest"];
                "text/json": components["schemas"]["UpdateJournalEntryRequest"];
                "application/*+json": components["schemas"]["UpdateJournalEntryRequest"];
            };
        };
        responses: {
            /** @description Success - Returns journal entry object: `{ JournalEntry }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"];
                };
            };
            /** @description Bad Request - Validation errors or invalid journal entry ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for customer access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Customer-journalCreatePost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Journal entry creation request with customer ID and entry details - CreateJournalEntryRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CreateJournalEntryRequest"];
                "application/json": components["schemas"]["CreateJournalEntryRequest"];
                "text/json": components["schemas"]["CreateJournalEntryRequest"];
                "application/*+json": components["schemas"]["CreateJournalEntryRequest"];
            };
        };
        responses: {
            /** @description Success - Returns journal entry object: `{ JournalEntry }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntry"];
                };
            };
            /** @description Bad Request - Validation errors or invalid customer ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for customer access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DeliveriesGet: {
        parameters: {
            query?: {
                /** @description Pre-order ID to get delivery status for - Optional, mutually exclusive with other filters */
                PreOrderId?: number;
                /** @description Transaction ID to get delivery status for - Optional, mutually exclusive with other filters */
                TransactionId?: number;
                /** @description Array of transaction IDs to get delivery status for - Optional, mutually exclusive with other filters */
                transactionIds?: number[];
                /** @description Include detailed line item data in response - Default: false */
                includeLineItems?: boolean;
                /** @description Filter deliveries by status - Optional, mutually exclusive with other filters */
                deliveryStatus?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of delivery objects: `[{ DeliveryOrderStatus }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryOrderStatus"][];
                };
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for delivery access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "DeliveriesSet-route-detailPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Delivery route detail update request with transaction ID and delivery information - UpdateDeliveryRouteDetailRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdateDeliveryRouteDetailRequest"];
                "application/json": components["schemas"]["UpdateDeliveryRouteDetailRequest"];
                "text/json": components["schemas"]["UpdateDeliveryRouteDetailRequest"];
                "application/*+json": components["schemas"]["UpdateDeliveryRouteDetailRequest"];
            };
        };
        responses: {
            /** @description Success - Route details successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for delivery access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DiscountsGet: {
        parameters: {
            query?: {
                /** @description Include deleted or inactive discounts in results - Default: false */
                includeInactive?: boolean;
                /** @description Include detailed product/category restriction data - Default: false */
                includeInclusionExclusionData?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of basic discount information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["PublishedDiscount"][];
                    "application/json": components["schemas"]["PublishedDiscount"][];
                    "text/json": components["schemas"]["PublishedDiscount"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DiscountsV2ListGet: {
        parameters: {
            query?: {
                /** @description Include deleted or inactive discounts in results - Default: false */
                includeInactive?: boolean;
                /** @description Include detailed product/category restriction data - Default: false */
                includeInclusionExclusionData?: boolean;
                /** @description Include credit card and payment method restrictions - Default: false */
                includePaymentRestrictions?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of comprehensive discount configuration objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["DiscountApiResponse"][];
                    "application/json": components["schemas"]["DiscountApiResponse"][];
                    "text/json": components["schemas"]["DiscountApiResponse"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DriversGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of driver objects: `[{ DriverDetail }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DriverDetail"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for driver access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DriversPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Driver information to create or update - DriverDetail object with driver details */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["DriverDetail"];
                "application/json": components["schemas"]["DriverDetail"];
                "text/json": components["schemas"]["DriverDetail"];
                "application/*+json": components["schemas"]["DriverDetail"];
            };
        };
        responses: {
            /** @description Success - Driver successfully created or updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for driver access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of Employee objects: `[{ Employee }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for employee access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GuestlistGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of guest objects: `[{ GuestListEntry }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestListEntry"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for customer access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HarvestGet: {
        parameters: {
            query?: {
                /** @description Filter harvests modified after this date for incremental sync - Optional */
                fromLastModifiedDateUTC?: string;
                /** @description Filter harvests modified before this date for date range filtering - Optional */
                toLastModifiedDateUTC?: string;
                /** @description Filter by harvest status: true=active, false=completed, null=completed only - Default: null (completed only) */
                activeHarvests?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of harvest objects: `[{ Harvest }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Harvest"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for cultivation or inventory access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HarvestPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Harvest information to create or update - CreateOrUpdateHarvest object with harvest details */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CreateOrUpdateHarvest"];
                "application/json": components["schemas"]["CreateOrUpdateHarvest"];
                "text/json": components["schemas"]["CreateOrUpdateHarvest"];
                "application/*+json": components["schemas"]["CreateOrUpdateHarvest"];
            };
        };
        responses: {
            /** @description Success - Returns harvest ID for created or updated harvest: `integer` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for cultivation write access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HarvestBulkPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Bulk harvest request with array of harvest operations - BulkCreateOrUpdateHarvest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["BulkCreateOrUpdateHarvest"];
                "application/json": components["schemas"]["BulkCreateOrUpdateHarvest"];
                "text/json": components["schemas"]["BulkCreateOrUpdateHarvest"];
                "application/*+json": components["schemas"]["BulkCreateOrUpdateHarvest"];
            };
        };
        responses: {
            /** @description Success - Returns bulk harvest response object: `{ BulkCreateOrUpdateHarvestResponse }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkCreateOrUpdateHarvestResponse"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for cultivation write access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OkcomputerGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Service is healthy and responsive */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["SuccessResult"];
                    "application/json": components["schemas"]["SuccessResult"];
                    "text/json": components["schemas"]["SuccessResult"];
                };
            };
            /** @description Internal Server Error - Service is experiencing issues */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "IntegrationIntegration-reconGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryIntegrationReconResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryGet: {
        parameters: {
            query?: {
                /** @description Include detailed lab testing data and cannabinoid profiles - Default: false */
                includeLabResults?: boolean;
                /** @description Include quantity breakdown by storage room/location - Default: false */
                includeRoomQuantities?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of inventory items with product and stock details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryItem"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for inventory access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryLabresultsGet: {
        parameters: {
            query?: {
                BatchName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabResult"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventorySnapshotGet: {
        parameters: {
            query?: {
                fromDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventorySnapshot"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReceivedinventoryGet: {
        parameters: {
            query?: {
                receiveInventoryHistoryId?: number;
                startDate?: string;
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivedInventory"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryInventorytransactionGet: {
        parameters: {
            query?: {
                startDate?: string;
                endDate?: string;
                transactionType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryTransaction"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryReceiveinventoryPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Receive inventory order details including vendor, delivery, and item information */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["ReceiveInventorySave"];
                "application/json": components["schemas"]["ReceiveInventorySave"];
                "text/json": components["schemas"]["ReceiveInventorySave"];
                "application/*+json": components["schemas"]["ReceiveInventorySave"];
            };
        };
        responses: {
            /** @description Success - Returns SavedReceive object with transaction details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedReceive"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) OR String error message (parse response body as plain text) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for inventory access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LineagesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of lineage objects: `[{ Lineage }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lineage"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PackageSet-tagsPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Package tag update request with package identifiers and replacement tags - UpdatePackageTagsRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdatePackageTagsRequest"];
                "application/json": components["schemas"]["UpdatePackageTagsRequest"];
                "text/json": components["schemas"]["UpdatePackageTagsRequest"];
                "application/*+json": components["schemas"]["UpdatePackageTagsRequest"];
            };
        };
        responses: {
            /** @description Success - Tags successfully set on specified packages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PackageAdd-tagsPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Package tag update request with package identifiers and additional tags - UpdatePackageTagsRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdatePackageTagsRequest"];
                "application/json": components["schemas"]["UpdatePackageTagsRequest"];
                "text/json": components["schemas"]["UpdatePackageTagsRequest"];
                "application/*+json": components["schemas"]["UpdatePackageTagsRequest"];
            };
        };
        responses: {
            /** @description Success - Tags successfully added to specified packages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PackageRemove-tagsPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Package tag update request with package identifiers and tags to remove - UpdatePackageTagsRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdatePackageTagsRequest"];
                "application/json": components["schemas"]["UpdatePackageTagsRequest"];
                "text/json": components["schemas"]["UpdatePackageTagsRequest"];
                "application/*+json": components["schemas"]["UpdatePackageTagsRequest"];
            };
        };
        responses: {
            /** @description Success - Tags successfully removed from specified packages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantGet: {
        parameters: {
            query?: {
                /** @description Dutchie internal plant ID for specific plant lookup - Optional */
                plantId?: number;
                /** @description Plant serial number for tracking system integration - Optional */
                serialNumber?: string;
                /** @description Plant status filter: Active, Harvesting, Harvested, Retired - Optional */
                status?: string;
                /** @description Filter plants modified after this date for incremental sync - Optional */
                lastModifiedDateStart?: string;
                /** @description Filter plants modified before this date for date range filtering - Optional */
                lastModifiedDateEnd?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Plant"][];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plant creation request with identification and group details - see `CreatePlantRequest` model for complete field documentation */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CreatePlantRequest"];
                "application/json": components["schemas"]["CreatePlantRequest"];
                "text/json": components["schemas"]["CreatePlantRequest"];
                "application/*+json": components["schemas"]["CreatePlantRequest"];
            };
        };
        responses: {
            /** @description Success - Returns newly created plant ID as integer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request - Validation errors or duplicate serial number */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantHarvestPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plant harvest request with plant identifiers and optional weight data - HarvestPlantRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["HarvestPlantRequest"];
                "application/json": components["schemas"]["HarvestPlantRequest"];
                "text/json": components["schemas"]["HarvestPlantRequest"];
                "application/*+json": components["schemas"]["HarvestPlantRequest"];
            };
        };
        responses: {
            /** @description Success - Plants successfully moved to harvest status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantMovePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plant movement request with plant IDs and target room information - see `MovePlantRequest` model for complete field documentation */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["MovePlantRequest"];
                "application/json": components["schemas"]["MovePlantRequest"];
                "text/json": components["schemas"]["MovePlantRequest"];
                "application/*+json": components["schemas"]["MovePlantRequest"];
            };
        };
        responses: {
            /** @description Success - Plants successfully moved to target room */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PlantChange-phasePost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Growth phase change request with plant IDs and target phase information - see `ChangeGrowthPhaseRequest` model for complete field documentation */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["ChangeGrowthPhaseRequest"];
                "application/json": components["schemas"]["ChangeGrowthPhaseRequest"];
                "text/json": components["schemas"]["ChangeGrowthPhaseRequest"];
                "application/*+json": components["schemas"]["ChangeGrowthPhaseRequest"];
            };
        };
        responses: {
            /** @description Success - Plants successfully updated to new growth phase */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantRetirePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plant retirement request with plant IDs, reason codes, and waste tracking details - see `RetirePlantRequest` model for complete field documentation */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["RetirePlantRequest"];
                "application/json": components["schemas"]["RetirePlantRequest"];
                "text/json": components["schemas"]["RetirePlantRequest"];
                "application/*+json": components["schemas"]["RetirePlantRequest"];
            };
        };
        responses: {
            /** @description Success - Plants successfully retired from cultivation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Invalid reason ID/code or validation errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PlantGet-reason-codesGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of reason code strings: `[string, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PlantAssign-plants-to-groupPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plant group assignment request with group name and plant serial numbers - see `AssignPlantsToGroupRequest` model for complete field documentation */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["AssignPlantsToGroupRequest"];
                "application/json": components["schemas"]["AssignPlantsToGroupRequest"];
                "text/json": components["schemas"]["AssignPlantsToGroupRequest"];
                "application/*+json": components["schemas"]["AssignPlantsToGroupRequest"];
            };
        };
        responses: {
            /** @description Success - Plants successfully assigned to target group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Validation errors or invalid plant serial numbers */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsUpdatePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plant update request with PlantId and field updates - UpdatePlantsRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdatePlantsRequest"];
                "application/json": components["schemas"]["UpdatePlantsRequest"];
                "text/json": components["schemas"]["UpdatePlantsRequest"];
                "application/*+json": components["schemas"]["UpdatePlantsRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResult"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsBatchImmatureplantsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Immature plant batch request with plant details - PostImmatureBatchRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["PostImmatureBatchRequest"];
                "application/json": components["schemas"]["PostImmatureBatchRequest"];
                "text/json": components["schemas"]["PostImmatureBatchRequest"];
                "application/*+json": components["schemas"]["PostImmatureBatchRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateImmaturePlantBatchResponseApiResult"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsBatchConvertImmatureplantsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Immature batch conversion request with conversion details - ConvertImmatureBatchRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["ConvertImmatureBatchRequest"];
                "application/json": components["schemas"]["ConvertImmatureBatchRequest"];
                "text/json": components["schemas"]["ConvertImmatureBatchRequest"];
                "application/*+json": components["schemas"]["ConvertImmatureBatchRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConvertImmaturePlantResponseApiResult"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsBatchMatureplantsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Mature plant batch request with plant details - CreateMatureBatchRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CreateMatureBatchRequest"];
                "application/json": components["schemas"]["CreateMatureBatchRequest"];
                "text/json": components["schemas"]["CreateMatureBatchRequest"];
                "application/*+json": components["schemas"]["CreateMatureBatchRequest"];
            };
        };
        responses: {
            /** @description Success - Returns ApiResult<CreateMaturePlantsResponse> with created plant IDs: `{ "data": { "createdPlants": [plantId1, plantId2, ...] }, "message": "Successfully created mature plants from batches.", "success": true }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateMaturePlantsResponseApiResult"];
                };
            };
            /** @description Bad Request - Validation failed or invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for mature plant creation or feature flag disabled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsRetagPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plant retagging request with plant and new tag details - RetagPlantRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["RetagPlantRequest"];
                "application/json": components["schemas"]["RetagPlantRequest"];
                "text/json": components["schemas"]["RetagPlantRequest"];
                "application/*+json": components["schemas"]["RetagPlantRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsBatchRetirePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Immature plant retirement request with plant details - RetireImmaturePlantsRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["RetireImmaturePlantsRequest"];
                "application/json": components["schemas"]["RetireImmaturePlantsRequest"];
                "text/json": components["schemas"]["RetireImmaturePlantsRequest"];
                "application/*+json": components["schemas"]["RetireImmaturePlantsRequest"];
            };
        };
        responses: {
            /** @description Success - No response body, operation completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Validation failed or invalid plant data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for plant retirement */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PlantNonstsBatchFinish-harvestPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Harvest batch finish/unfinish request with batch details - FinishHarvestBatchRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["FinishOrUnfinishBatchDetails"][];
                "application/json": components["schemas"]["FinishOrUnfinishBatchDetails"][];
                "text/json": components["schemas"]["FinishOrUnfinishBatchDetails"][];
                "application/*+json": components["schemas"]["FinishOrUnfinishBatchDetails"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsSplitPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Immature plant batch split request with batch and split details - SplitImmaturePlantsRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["SplitImmaturePlantsRequest"];
                "application/json": components["schemas"]["SplitImmaturePlantsRequest"];
                "text/json": components["schemas"]["SplitImmaturePlantsRequest"];
                "application/*+json": components["schemas"]["SplitImmaturePlantsRequest"];
            };
        };
        responses: {
            /** @description Success - Returns ApiResult<SplitImmaturePlantResult> with split batch details: `{ "data": { "originalBatch": {...}, "newBatch": {...} }, "message": "Successfully split immature batches of plants.", "success": true }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitImmaturePlantResultApiResult"];
                };
            };
            /** @description Bad Request - Validation failed or invalid batch data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for batch splitting */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PlantNonstsBatchPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Batch update request with batch identification and field updates - UpdateBatchRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdateBatchRequest"];
                "application/json": components["schemas"]["UpdateBatchRequest"];
                "text/json": components["schemas"]["UpdateBatchRequest"];
                "application/*+json": components["schemas"]["UpdateBatchRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PreorderSubmitPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Pre-order details including customer, cart items, and fulfillment information - CreatePreOrderRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CreatePreOrderRequest"];
                "application/json": components["schemas"]["CreatePreOrderRequest"];
                "text/json": components["schemas"]["CreatePreOrderRequest"];
                "application/*+json": components["schemas"]["CreatePreOrderRequest"];
            };
        };
        responses: {
            /** @description Success - Returns orderId and transactionId for the created pre-order */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PreorderUpdatePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Update details including OrderId and fields to be modified */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdatePreOrderRequest"];
                "application/json": components["schemas"]["UpdatePreOrderRequest"];
                "text/json": components["schemas"]["UpdatePreOrderRequest"];
                "application/*+json": components["schemas"]["UpdatePreOrderRequest"];
            };
        };
        responses: {
            /** @description Success - Order updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - Empty response body (handle via HTTP status code only) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - Order ID does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PreorderCancelPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Cancellation request containing the OrderId to cancel */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CancelPreorderRequest"];
                "application/json": components["schemas"]["CancelPreorderRequest"];
                "text/json": components["schemas"]["CancelPreorderRequest"];
                "application/*+json": components["schemas"]["CancelPreorderRequest"];
            };
        };
        responses: {
            /** @description Success - Order cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request - Empty response body (handle via HTTP status code only) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - Order ID does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    PreorderStatusGet: {
        parameters: {
            query?: {
                /** @description Specific order ID to retrieve status for (optional - omit for all open orders) */
                PreOrderId?: number;
                /** @description Include detailed product line item information (requires PreOrderId) */
                includeLineItems?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns PreOrderStatus object(s) with current order information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PreOrderStatus"];
                };
            };
            /** @description Bad Request - Empty response body (handle via HTTP status code only) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "PreorderPrice-cartPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Pricing request containing customer information, cart items, and delivery preferences */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["PriceCartRequest"];
                "application/json": components["schemas"]["PriceCartRequest"];
                "text/json": components["schemas"]["PriceCartRequest"];
                "application/*+json": components["schemas"]["PriceCartRequest"];
            };
        };
        responses: {
            /** @description Success - Returns detailed pricing breakdown for the cart */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartPrice"];
                };
            };
            /** @description Bad Request - String error message (parse response body as plain text) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Internal Server Error - Server error occurred during pricing calculation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Pricing-tiersGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of pricing tier objects: `[{ PricingTier }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricingTier"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProducersGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of producer objects: `[{ Producer }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Producer"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ProductsLocation-overridesGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationProductOverride"][];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ProductsLocation-overridesPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Array of location product override requests with ProductId and override values - LocationProductOverrideRequest objects */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["LocationProductOverrideRequest"][];
                "application/json": components["schemas"]["LocationProductOverrideRequest"][];
                "text/json": components["schemas"]["LocationProductOverrideRequest"][];
                "application/*+json": components["schemas"]["LocationProductOverrideRequest"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. One or more overrides may have been saved */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsGet: {
        parameters: {
            query?: {
                /** @description Optional date filter to return only products modified after this timestamp - Used for incremental sync */
                fromLastModifiedDateUTC?: string;
                /** @description Optional status filter - true for active products only, false for inactive only, null for all products */
                isActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of product objects: `[{ ProductDetail }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDetail"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for inventory access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsProductPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product information to create or update - ProductDetailUpload object with product details */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["ProductDetailUpload"];
                "application/json": components["schemas"]["ProductDetailUpload"];
                "text/json": components["schemas"]["ProductDetailUpload"];
                "application/*+json": components["schemas"]["ProductDetailUpload"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDetail"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsProductsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Array of product information to create or update - IEnumerable<ProductDetailUpload> objects */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["ProductDetailUpload"][];
                "application/json": components["schemas"]["ProductDetailUpload"][];
                "text/json": components["schemas"]["ProductDetailUpload"][];
                "application/*+json": components["schemas"]["ProductDetailUpload"][];
            };
        };
        responses: {
            /** @description Success - Products processed with individual success/error results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) OR `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ProductsSet-imagePost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Image upload request with ProductId and base64 image data - SetImageRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["SetImageRequest"];
                "application/json": components["schemas"]["SetImageRequest"];
                "text/json": components["schemas"]["SetImageRequest"];
                "application/*+json": components["schemas"]["SetImageRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetImageResponse"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ProductsRemove-imagePost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Image deletion request with ProductId and ImageId - DeleteImageRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["DeleteImageRequest"];
                "application/json": components["schemas"]["DeleteImageRequest"];
                "text/json": components["schemas"]["DeleteImageRequest"];
                "application/*+json": components["schemas"]["DeleteImageRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResult"];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsStrainsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrainDetail"][];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ProductsExternal-categoriesGet": {
        parameters: {
            query?: {
                /** @description User ID for traceability system access context (highly recommended) - Optional but prevents system failures */
                userId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Bad Request - String error message (parse response body as plain text) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Product-categoryGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of product category objects: `[{ ProductCategory }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductCategory"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Purchase-orderGet": {
        parameters: {
            query?: {
                /** @description Start date filter for purchase orders created after this date (optional). */
                FromDateCreated?: string;
                /** @description End date filter for purchase orders created before this date (optional). */
                ToDateCreated?: string;
                /** @description Specific purchase order identifier for single order retrieval (optional). */
                PurchaseOrderId?: number;
                /** @description Whether to include detailed line item information in the response (default: false). */
                IncludeItemDetails?: boolean;
                /** @description Page number for pagination control (default: 0). */
                PageNumber?: number;
                /** @description Number of results per page for pagination (default: 1000). */
                PageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrderData"][];
                };
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Purchase-orderPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Purchase order creation/update request with order details - CreateUpdatePurchaseOrdersRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CreateUpdatePurchaseOrdersRequest"];
                "application/json": components["schemas"]["CreateUpdatePurchaseOrdersRequest"];
                "text/json": components["schemas"]["CreateUpdatePurchaseOrdersRequest"];
                "application/*+json": components["schemas"]["CreateUpdatePurchaseOrdersRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateUpdatePurchaseOrderResponse"];
                };
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReferenceUnitsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of unit objects: `[{ Unit }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unit"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReferenceUnit-typesGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of unit type objects: `[{ UnitType }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitType"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReferenceLab-result-unitsGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of lab result unit objects: `[{ LabResultUnitData }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabResultUnitData"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReferenceLab-results-namesGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of strings with lab result names: `["string", ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Regulatory-categoryGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of regulatory category objects: `[{ RegulatoryCategory }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegulatoryCategory"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportingInventoryGet: {
        parameters: {
            query?: {
                includeLabResults?: boolean;
                includeRoomQuantities?: boolean;
                includeAllocated?: boolean;
                includeLineage?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportingInventoryItem"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportingTransactionsGet: {
        parameters: {
            query?: {
                /** @description Specific transaction identifier for single transaction lookup. */
                TransactionId?: number;
                /** @description Start date for filtering transactions by last modified date (UTC) for incremental sync. */
                FromLastModifiedDateUTC?: string;
                /** @description End date for filtering transactions by last modified date (UTC) for incremental sync. */
                ToLastModifiedDateUTC?: string;
                /** @description Start date for filtering transactions by transaction date (UTC) for periodic reports. */
                FromDateUTC?: string;
                /** @description End date for filtering transactions by transaction date (UTC) for periodic reports. */
                ToDateUTC?: string;
                /** @description Flag to include detailed transaction item information for comprehensive reporting. */
                IncludeDetail?: boolean;
                /** @description Flag to include tax information for financial compliance reporting. */
                IncludeTaxes?: boolean;
                /** @description Flag to include order identifiers for order fulfillment tracking. */
                IncludeOrderIds?: boolean;
                /** @description Flag to include fees and donations for complete financial analysis. */
                IncludeFeesAndDonations?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"][];
                };
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Temporarily disabled (kill switch). */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportingCustomersGet: {
        parameters: {
            query?: {
                /** @description Filter customers modified after this UTC date - Used for incremental sync */
                fromLastModifiedDateUTC?: string;
                /** @description Filter customers modified before this UTC date - Used for date range filtering */
                toLastModifiedDateUTC?: string;
                /** @description Include anonymous customers in results - Default: true */
                includeAnonymous?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of customer objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReportingCustomers-paginatedGet": {
        parameters: {
            query?: {
                /** @description Filter customers modified after this UTC date for incremental sync - Optional */
                fromLastModifiedDateUTC?: string;
                /** @description Filter customers modified before this UTC date for date range filtering - Optional */
                toLastModifiedDateUTC?: string;
                /** @description Page number for sequential pagination (integer, starts at 0) - Default: 0 */
                PageNumber?: number;
                /** @description Number of items per page (integer) - Default: 1000, Maximum: 10000 */
                PageSize?: number;
                /** @description Include anonymous customers in results - Default: true */
                includeAnonymous?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of customer objects for the requested page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"][];
                };
            };
            /** @description Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReportingRegister-adjustmentsGet": {
        parameters: {
            query?: {
                /** @description Filter adjustments modified after this date for incremental sync - Optional */
                fromLastModifiedDateUTC?: string;
                /** @description Filter adjustments modified before this date for date range filtering - Optional */
                toLastModifiedDateUTC?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of register adjustment objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterAdjustment"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReportingRegister-transactionsGet": {
        parameters: {
            query?: {
                /** @description Filter transactions modified after this date for incremental sync - Optional */
                fromLastModifiedDateUTC?: string;
                /** @description Filter transactions modified before this date for date range filtering - Optional */
                toLastModifiedDateUTC?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of RegisterTransaction objects with comprehensive transaction data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterTransaction"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReportingCash-summaryGet": {
        parameters: {
            query?: {
                /** @description Filter activity after this date (must be within last 7 days) - Optional */
                fromLastModifiedDateUTC?: string;
                /** @description Filter activity before this date for date range filtering - Optional */
                toLastModifiedDateUTC?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of register cash summary objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterCashSummary"][];
                };
            };
            /** @description Bad Request - String error message (parse response body as plain text) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReportingLoyalty-snapshotGet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of loyalty balance snapshot objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoyaltySnapshot"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportingProductsGet: {
        parameters: {
            query?: {
                /** @description Filter products modified after this date for incremental sync - Optional */
                fromLastModifiedDateUTC?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductDetail"][];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ReportingClosing-reportGet": {
        parameters: {
            query?: {
                /** @description Start date for the report period (required) - Must be UTC datetime */
                fromDateUTC?: string;
                /** @description End date for the report period (required) - Must be UTC datetime */
                toDateUTC?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns comprehensive closing report object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClosingReportV2"];
                };
            };
            /** @description Bad Request - String error message (parse response body as plain text) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportingDiscountsGet: {
        parameters: {
            query?: {
                /** @description Include deleted/archived discounts in results - Default: false */
                includeDeleted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of comprehensive discount configuration objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportingDiscountDetail"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for reporting access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomRoomsGet: {
        parameters: {
            query?: {
                /** @description Optional room ID for specific room lookup - integer */
                roomId?: number;
                /** @description Optional room name for searching rooms by name - string */
                roomName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of room objects: `[{ Room }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Room"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for room access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Room information to create or update - Room object with RoomId, RoomName, and room type flags */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Room"];
                "application/json": components["schemas"]["Room"];
                "text/json": components["schemas"]["Room"];
                "application/*+json": components["schemas"]["Room"];
            };
        };
        responses: {
            /** @description Success - Returns single room object: `{ Room }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Room"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for room modification */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SizesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of size objects: `[{ Size }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Size"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StrainsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of strain objects: `[{ StrainDetail }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrainDetail"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for inventory access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StrainsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["UpdateStrain"];
                "application/json": components["schemas"]["UpdateStrain"];
                "text/json": components["schemas"]["UpdateStrain"];
                "application/*+json": components["schemas"]["UpdateStrain"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StrainDetail"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StrainsTypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of strings with strain type names: `["Indica", "Sativa", "Hybrid", "CBD"]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for inventory access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TableTablesGet: {
        parameters: {
            query?: {
                /** @description Optional table ID for specific table lookup - integer */
                tableId?: number;
                /** @description Optional table name for searching tables by name - string */
                tableName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of table objects: `[{ Table }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Table"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for table access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TablePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Table information to create or update - Table object with TableId and TableName fields */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Table"];
                "application/json": components["schemas"]["Table"];
                "text/json": components["schemas"]["Table"];
                "application/*+json": components["schemas"]["Table"];
            };
        };
        responses: {
            /** @description Success - Returns single table object: `{ Table }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Table"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for table modification */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of tag objects: `[{ Tag }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for inventory access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TerminalsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of terminal objects: `[{ Terminal }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Terminal"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "TransactionCreate-anonymousPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Anonymous transaction request with optional transaction reference - CreateAnonymousTransactionRequest object */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["CreateAnonymousTransactionRequest"];
                "application/json": components["schemas"]["CreateAnonymousTransactionRequest"];
                "text/json": components["schemas"]["CreateAnonymousTransactionRequest"];
                "application/*+json": components["schemas"]["CreateAnonymousTransactionRequest"];
            };
        };
        responses: {
            /** @description Success - Returns anonymous transaction object: `{ AnonymousTransaction }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnonymousTransaction"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for transaction creation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred during transaction creation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UtilAuthorizationHeaderByApiKeyGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key to convert into authorization header format - string */
                apiKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns formatted authorization header string: "Basic {base64-encoded-key}" */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    VehiclesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of vehicle objects: `[{ VehicleDetail }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleDetail"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for vehicle access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    VehiclesPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Vehicle information to create or update - VehicleDetail object with fleet details */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["VehicleDetail"];
                "application/json": components["schemas"]["VehicleDetail"];
                "text/json": components["schemas"]["VehicleDetail"];
                "application/*+json": components["schemas"]["VehicleDetail"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResult"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    VendorVendorsGet: {
        parameters: {
            query?: {
                /** @description Optional vendor ID to filter by specific vendor - Returns exact match */
                vendorId?: number;
                /** @description Optional vendor name to filter by - Supports partial matching for flexible search */
                vendorName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns array of vendor objects: `[{ Vendor }, ...]` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vendor"][];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for vendor access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    VendorPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Vendor information to create or update - Vendor object with supplier details */
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["Vendor"];
                "application/json": components["schemas"]["Vendor"];
                "text/json": components["schemas"]["Vendor"];
                "application/*+json": components["schemas"]["Vendor"];
            };
        };
        responses: {
            /** @description Success - Returns vendor object: `{ Vendor }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vendor"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Account not authorized for vendor management */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred during vendor operation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WasteGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WasteSummary"];
                };
            };
            /** @description Invalid API Key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not authorized */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Something went wrong. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WasteHarvestWastePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["HarvestWasteDetailWaste"];
                "application/json": components["schemas"]["HarvestWasteDetailWaste"];
                "text/json": components["schemas"]["HarvestWasteDetailWaste"];
                "application/*+json": components["schemas"]["HarvestWasteDetailWaste"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WastePlantWastePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json-patch+json": components["schemas"]["PlantWasteDetailWaste"];
                "application/json": components["schemas"]["PlantWasteDetailWaste"];
                "text/json": components["schemas"]["PlantWasteDetailWaste"];
                "application/*+json": components["schemas"]["PlantWasteDetailWaste"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WhoamiGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns location identity object: `{ LocationIdentity }` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationIdentity"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - API key doesn't have access to this location */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found - Location not found for the authenticated API key */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error - Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}

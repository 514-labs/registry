{
  "$schema": "https://schemas.connector-factory.dev/scaffold.schema.json",
  "scaffold": "typescript",
  "version": "0.5.0",
  "description": "TypeScript implementation scaffold with support for an implementation layer under the language directory.",
  "variables": {
    "connector": {
      "description": "Connector name (kebab-case).",
      "example": "stripe",
      "pattern": "^[a-z0-9][a-z0-9-]*$"
    },
    "version": {
      "description": "Source version identifier (not necessarily semver). Examples: v4, ga4, 2020-08-27, api-2020.08.27",
      "example": "v4",
      "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$"
    },
    "author": {
      "description": "GitHub organization or user handle (kebab-case). Used for linking and avatars.",
      "example": "514-labs",
      "pattern": "^[a-z0-9](?:[a-z0-9-]{0,37}[a-z0-9])?$"
    },
    "implementation": {
      "description": "Implementation name nested under the language folder (kebab-case). Use 'default' if you don't want an extra folder.",
      "example": "data-api",
      "pattern": "^[a-z0-9][a-z0-9-]*$"
    },
    "packageName": {
      "description": "npm package name for the connector (use @workspace/ prefix if publishing in this monorepo).",
      "example": "@workspace/connector-stripe",
      "pattern": "^(@[a-z0-9-~][a-z0-9-._~]*)?/[a-z0-9-~][a-z0-9-._~]*$|^[a-z0-9-~][a-z0-9-._~]*$"
    }
  },
  "structure": [
    {
      "type": "dir",
      "name": "{connector}",
      "children": [
        {
          "type": "dir",
          "name": "{version}",
          "children": [
            {
              "type": "dir",
              "name": "{author}",
              "children": [
                {
                  "type": "dir",
                  "name": "typescript",
              "children": [
                { "type": "dir", "name": "{implementation}", "children": [
                { "type": "file", "name": ".gitignore", "template": "node_modules/\ndist/\n.env\n" },
                { "type": "file", "name": ".env.example", "template": "API_KEY=\n" },
                { "type": "file", "name": "README.md", "template": "# {connector} (TypeScript)\n\nTypeScript implementation for `{connector}` by `{author}`.\n\nSchemas: see `schemas/index.json` for machine-readable definitions and accompanying Markdown docs.\n" },
                {
                  "type": "file",
                  "name": "package.json",
                  "template": "{\n  \"name\": \"{packageName}\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsup src/index.ts --dts --format esm,cjs\",\n    \"test\": \"vitest run\"\n  },\n  \"engines\": {\"node\": \">=20\"},\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"tsup\": \"^8.0.0\",\n    \"typescript\": \"^5.4.0\",\n    \"vitest\": \"^1.6.0\"\n  }\n}\n"
                },
                { "type": "file", "name": "tsconfig.json", "template": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"outDir\": \"dist\",\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"src\"]\n}\n" },
                { "type": "file", "name": "vitest.config.ts", "template": "import { defineConfig } from 'vitest/config'\nexport default defineConfig({ test: { environment: 'node' } })\n" },
                { "type": "dir", "name": "docs", "children": [
                  { "type": "file", "name": "getting-started.md", "template": "# Getting started\n\nThis is a placeholder. Document how to configure and run the connector in TypeScript.\n" },
                  { "type": "file", "name": "configuration.md", "template": "# Configuration\n\nDocument configuration options (auth, scopes, IDs).\n" },
                  { "type": "file", "name": "schema.md", "template": "# Schema\n\nRefer to `schemas/index.json` and related files.\n" },
                  { "type": "file", "name": "limits.md", "template": "# Limits\n\nDescribe API limits, quotas, and rate limiting behavior.\n" }
                ] },
                { "type": "dir", "name": "schemas", "children": [
                  { "type": "file", "name": "index.json", "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": []\n}\n" },
                  { "type": "dir", "name": "raw", "children": [
                    { "type": "dir", "name": "json", "children": [
                      { "type": "file", "name": "events.schema.json", "template": "{\\n  \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n  \\\"title\\\": \\\"Raw Event\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"additionalProperties\\\": true\\n}\\n" },
                      { "type": "file", "name": "events.md", "template": "# Raw events (JSON)\n\nDescribe the upstream event payload.\n" }
                    ] },
                    { "type": "dir", "name": "relational", "children": [
                      { "type": "file", "name": "tables.json", "template": "{\\n  \\\"tables\\\": []\\n}\\n" },
                      { "type": "file", "name": "tables.sql", "template": "-- DDL placeholders for raw tables\n" },
                      { "type": "file", "name": "README.md", "template": "# Raw relational schema\n\nDescribe tables and relationships.\n" }
                    ] }
                  ] },
                  { "type": "dir", "name": "extracted", "children": [
                    { "type": "dir", "name": "json", "children": [
                      { "type": "file", "name": "events.schema.json", "template": "{\\n  \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n  \\\"title\\\": \\\"Extracted Event\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"additionalProperties\\\": false,\\n  \\\"properties\\\": {}\\n}\\n" },
                      { "type": "file", "name": "events.md", "template": "# Extracted events (JSON)\n\nDescribe the normalized event shape.\n" }
                    ] },
                    { "type": "dir", "name": "relational", "children": [
                      { "type": "file", "name": "tables.json", "template": "{\\n  \\\"tables\\\": []\\n}\\n" },
                      { "type": "file", "name": "tables.sql", "template": "-- DDL placeholders for extracted tables\n" },
                      { "type": "file", "name": "README.md", "template": "# Extracted relational schema\n\nDescribe normalized tables and relationships.\n" }
                    ] }
                  ] }
                ] },
                {
                  "type": "dir",
                  "name": "src",
                  "children": [
                    { "type": "file", "name": "index.ts", "template": "export * from './client'\nexport * from './config'\n" },
                    { "type": "file", "name": "client.ts", "template": "export class Client {\n  constructor(public config: Record<string, unknown>) {}\n  ping(): boolean { return true }\n}\n" },
                    { "type": "file", "name": "config.ts", "template": "export type ConnectorConfig = { apiKey: string }\n" },
                    { "type": "dir", "name": "auth", "children": [ { "type": "file", "name": "base.ts", "template": "export interface AuthStrategy { apply(headers: Record<string,string>): Record<string,string> }\n" }, { "type": "file", "name": "apiKey.ts", "template": "import type { AuthStrategy } from './base'\nexport class ApiKeyAuth implements AuthStrategy {\n  constructor(private apiKey: string) {}\n  apply(headers: Record<string,string>) { return { ...headers, Authorization: `Bearer ${this.apiKey}` } }\n}\n" }, { "type": "file", "name": "oauth2.ts", "template": "export {}\n" } ] },
                    { "type": "dir", "name": "extract", "children": [ { "type": "file", "name": "baseExtractor.ts", "template": "export abstract class BaseExtractor { abstract run(): Promise<void> }\n" } ] },
                    { "type": "dir", "name": "transform", "children": [ { "type": "file", "name": "baseTransformer.ts", "template": "export class BaseTransformer<T = unknown> { transform(record: T): T { return record } }\n" } ] },
                    { "type": "dir", "name": "load", "children": [ { "type": "file", "name": "baseLoader.ts", "template": "export class BaseLoader<T = unknown> { async load(records: T[]): Promise<void> {} }\n" } ] }
                  ]
                },
                { "type": "dir", "name": "tests", "children": [ { "type": "file", "name": "client.test.ts", "template": "import { describe, it, expect } from 'vitest'\nimport { Client } from '../src/client'\n\ndescribe('client', () => {\n  it('ping', () => {\n    expect(new Client({}).ping()).toBe(true)\n  })\n})\n" } ] },
                { "type": "dir", "name": "examples", "children": [ { "type": "file", "name": "basic-usage.ts", "template": "import { Client } from './src/client'\nconsole.log(new Client({}).ping())\n" } ] }
              ]
            }
            }
              ]
            }
          ]
        }
      ]
    }
  ]
}

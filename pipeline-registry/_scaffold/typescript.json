{
  "$schema": "https://schemas.connector-factory.dev/scaffold.schema.json",
  "scaffold": "typescript",
  "version": "1.1.0",
  "description": "TypeScript implementation scaffold for a pipeline with _meta folder at implementation level.",
  "variables": {
    "pipeline": {
      "description": "Pipeline name (kebab-case).",
      "example": "ga-to-clickhouse",
      "pattern": "^[a-z0-9][a-z0-9-]*$"
    },
    "version": {
      "description": "Pipeline version identifier (not necessarily semver). Examples: v1, 2024-10-01",
      "example": "v1",
      "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$"
    },
    "author": {
      "description": "GitHub organization or user handle (kebab-case). Used for linking and avatars.",
      "example": "514-labs",
      "pattern": "^[a-z0-9](?:[a-z0-9-]{0,37}[a-z0-9])?$"
    },
    "implementation": {
      "description": "Implementation name nested under the language folder (kebab-case). Defaults to 'default'.",
      "example": "default",
      "pattern": "^[a-z0-9][a-z0-9-]*$",
      "default": "default"
    },
    "packageName": {
      "description": "npm package name for the pipeline helpers (use @workspace/ prefix if publishing in this monorepo).",
      "example": "@workspace/pipeline-ga-to-clickhouse",
      "pattern": "^(@[a-z0-9-~][a-z0-9-._~]*)?/[a-z0-9-~][a-z0-9-._~]*$|^[a-z0-9-~][a-z0-9-._~]*$"
    },
    "resource": {
      "description": "Default REST resource path segment (kebab-case).",
      "example": "contacts",
      "pattern": "^[a-z0-9][a-z0-9-]*$",
      "default": "resource"
    }
  },
  "structure": [
    {
      "type": "dir",
      "name": "{pipeline}",
      "children": [
        {
          "type": "dir",
          "name": "{version}",
          "children": [
            {
              "type": "dir",
              "name": "{author}",
              "children": [
                {
                  "type": "dir",
                  "name": "typescript",
                  "children": [
                    {
                      "type": "dir",
                      "name": "{implementation}",
                      "children": [
                        {
                          "type": "dir",
                          "name": "_meta",
                          "children": [
                            {
                              "type": "file",
                              "name": "pipeline.json",
                              "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/pipeline.schema.json\",\n  \"identifier\": \"{pipeline}\",\n  \"name\": \"{pipeline}\",\n  \"author\": \"{author}\",\n  \"authorType\": \"organization\",\n  \"version\": \"{version}\",\n  \"language\": \"typescript\",\n  \"implementation\": \"{implementation}\",\n  \"description\": \"\",\n  \"tags\": [],\n  \"schedule\": { \"cron\": \"0 * * * *\", \"timezone\": \"UTC\" },\n  \"source\": { \"type\": \"connector\", \"connector\": { \"name\": \"\", \"version\": \"\", \"author\": \"\" }, \"stream\": \"\" },\n  \"systems\": [],\n  \"transformations\": [],\n  \"destination\": { \"system\": \"clickhouse\", \"database\": \"\", \"table\": \"\" },\n  \"lineage\": { \"nodes\": [], \"edges\": [] },\n  \"maintainers\": [],\n  \"registryUrl\": \"https://github.com/514-labs/registry/tree/main/pipeline-registry/{pipeline}/{version}/{author}/typescript/{implementation}\"\n}\n"
                            },
                            {
                              "type": "file",
                              "name": "README.md",
                              "template": "# {pipeline}\n\n> Maintained by {author}\n\nPipeline metadata and assets for the TypeScript {implementation} implementation.\n"
                            },
                            {
                              "type": "file",
                              "name": "CHANGELOG.md",
                              "template": "# Changelog\n\nAll notable changes to `{pipeline}` TypeScript {implementation} implementation by `{author}`.\n\n## [0.1.0] - Initial Release\n\n- Initial pipeline implementation\n"
                            },
                            { "type": "file", "name": "LICENSE", "template": "MIT\n" },
                            { 
                              "type": "dir", 
                              "name": "assets",
                              "children": [
                                {
                                  "type": "dir",
                                  "name": "from",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "Place the source system logo here as 'logo.png' (or .svg/.jpg/.jpeg/.webp).\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "to",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "Place the destination system logo here as 'logo.png' (or .svg/.jpg/.jpeg/.webp).\n"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "name": ".gitignore",
                          "template": "node_modules/\ndist/\n.env\n"
                        },
                        {
                          "type": "file",
                          "name": "ENV.EXAMPLE",
                          "template": "# Example environment variables for the pipeline implementation\nAPI_KEY=\n"
                        },
                        {
                          "type": "file",
                          "name": "README.md",
                          "template": "# {pipeline} (TypeScript)\n\nTypeScript helpers for the `{pipeline}` pipeline by `{author}`.\n\n- See `schemas/index.json` for optional machine-readable dataset definitions and accompanying Markdown docs.\n- Maintain lineage in `moose/lineage.manifest.json` and optionally under `lineage/schemas`.\n"
                        },
                        {
                          "type": "file",
                          "name": "install.config.toml",
                          "template": "language = \"typescript\"\ndescription = \"TypeScript pipeline for {pipeline}\"\npost_install_print = \"\"\"\n🚀 Next steps to get your {pipeline} pipeline running:\n\n📂 Go to your pipeline directory:\n    $ cd {destination_dir}\n\n📦 Install dependencies:\n    $ npm install\n\n🔧 Build the pipeline:\n    $ npm run build\n\n🧪 Run tests:\n    $ npm test\n\n🗄️ Configure your pipeline:\n    • Update app/config.ts with your source connector details\n    • Configure your destination in the pipeline metadata\n    • Set up any required authentication credentials\n\n🔗 Pipeline integration:\n    • Use with Moose: Place in your Moose project's pipelines directory\n    • Standalone: Run with your preferred orchestration tool\n    • Check examples/basic-usage.ts for implementation patterns\n\n📖 Documentation:\n    • Review docs/getting-started.md for setup instructions\n    • See docs/configuration.md for detailed config options\n    • Check docs/outputs.md for data schema information\n\"\"\"\n"
                        },
                        {
                          "type": "file",
                          "name": "package.json",
                          "template": "{\n  \"name\": \"{packageName}\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"cd app/{resource}; pnpm run build; cd ../..\",\n    \"test\": \"vitest run\",\n    \"dev\": \"moose-cli dev\",\n    \"moose\": \"moose-cli\"\n  },\n  \"engines\": {\"node\": \">=20\"},\n  \"dependencies\": {\n    \"@514labs/moose-lib\": \"latest\",\n    \"dotenv\": \"^16.4.5\",\n    \"typia\": \"^9.6.1\"\n  },\n  \"devDependencies\": {\n    \"@514labs/moose-cli\": \"latest\",\n    \"tsup\": \"^8.0.0\",\n    \"typescript\": \"^5.4.0\",\n    \"vitest\": \"^3.2.4\"\n  }\n}\n"
                        },
                        {
                          "type": "file",
                          "name": "tsconfig.json",
                          "template": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"outDir\": \"dist\",\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"src\"]\n}\n"
                        },
                        {
                          "type": "file",
                          "name": "vitest.config.ts",
                          "template": "import { defineConfig } from 'vitest/config'\nexport default defineConfig({ test: { environment: 'node' } })\n"
                        },
                        {
                          "type": "dir",
                          "name": "docs",
                          "children": [
                            {
                              "type": "file",
                              "name": "getting-started.md",
                              "template": "# Getting started\n\nDocument how to configure and operate this pipeline implementation.\n"
                            },
                            {
                              "type": "file",
                              "name": "configuration.md",
                              "template": "# Configuration\n\nDocument configuration options (auth, scopes, IDs, destinations).\n"
                            },
                            {
                              "type": "file",
                              "name": "outputs.md",
                              "template": "# Outputs\n\nDescribe pipeline outputs (datasets/tables) and link to `schemas/index.json` if used.\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "schemas",
                          "children": [
                            {
                              "type": "file",
                              "name": "index.json",
                              "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [],\n  \"_examples\": {\n    \"_comment\": \"Examples for organizing dataset schemas if your pipeline produces tables/files.\"\n  }\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "moose",
                          "children": [
                            {
                              "type": "file",
                              "name": "lineage.manifest.json",
                              "template": "{\n  \"version\": \"1.0\",\n  \"namespace\": \"moose\",\n  \"nodes\": [\n    {\n      \"id\": \"conn.source\",\n      \"type\": \"connector\",\n      \"name\": \"Source Connector\",\n      \"namespace\": \"{pipeline}\",\n      \"version\": \"1\",\n      \"attrs\": {\n        \"mode\": \"etl\",\n        \"schema_hash\": \"sha256:<hash>\",\n        \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\", \"language\": \"<language>\", \"implementation\": \"<implementation>\" },\n        \"identifier\": \"<external-identifier>\",\n        \"schema_path\": \"<path/to/repo-relative/schema.json>\"\n      }\n    }\n  ],\n  \"edges\": []\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "lineage",
                          "children": [
                            {
                              "type": "dir",
                              "name": "schemas",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "index.json",
                                  "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [\n    {\n      \"name\": \"source-connector\",\n      \"kind\": \"pointer\",\n      \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\" }\n    },\n    {\n      \"name\": \"transformed.tables\",\n      \"stage\": \"extracted\",\n      \"kind\": \"tables\",\n      \"path\": \"relational/tables.json\"\n    },\n    {\n      \"name\": \"outputs.files\",\n      \"stage\": \"extracted\",\n      \"kind\": \"files\",\n      \"path\": \"files/manifest.json\"\n    }\n  ]\n}\n"
                                },
                                {
                                  "type": "dir",
                                  "name": "relational",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "tables.json",
                                      "template": "{\n  \"tables\": [\n    { \"name\": \"events\", \"columns\": [ { \"name\": \"event_id\", \"type\": \"string\" } ] }\n  ]\n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Relational Schemas\n\nTables produced by the pipeline after transformations.\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "files",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "manifest.json",
                                      "template": "{ \n  \"files\": [ ] \n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Files\n\nFile outputs from the pipeline (CSV/JSON/Parquet/etc).\n"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "app",
                          "children": [
                            {
                              "type": "file",
                              "name": "index.ts",
                              "template": "export * from './runner'\nexport * from './config'\n"
                            },
                            {
                              "type": "file",
                              "name": "runner.ts",
                              "template": "export class PipelineRunner {\n  constructor(public config: Record<string, unknown>) {}\n  ping(): boolean { return true }\n}\n"
                            },
                            {
                              "type": "file",
                              "name": "config.ts",
                              "template": "export type PipelineConfig = { schedule?: { cron: string; timezone?: string } }\n"
                            },
                            {
                              "type": "dir",
                              "name": "extract",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "baseExtractor.ts",
                                  "template": "export abstract class BaseExtractor {\n  abstract run(): Promise<void>\n}\n"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "transform",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "baseTransformer.ts",
                                  "template": "export abstract class BaseTransformer {\n  abstract run(): Promise<void>\n}\n"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "load",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "baseLoader.ts",
                                  "template": "export abstract class BaseLoader {\n  abstract run(): Promise<void>\n}\n"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "ingest",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "{resource}Models.ts",
                                  "template": "// Data models for {resource} ingest\nexport interface {resource}Record {\n  id: string\n  timestamp: number\n}\n"
                                },
                                {
                                  "type": "file",
                                  "name": "{resource}Transforms.ts",
                                  "template": "// Transform functions for {resource} data\nexport function transform{resource}Data(data: any) {\n  return data\n}\n"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "apis",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "{resource}Workflow.ts",
                                  "template": "// Workflow definitions for {resource} processing\nexport const {resource}WorkflowTrigger = {\n  // trigger logic\n}\n"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "file",
                          "name": "aurora.config.toml",
                          "template": "# Aurora configuration for {pipeline} pipeline\n[aurora]\nname = \"{pipeline}\"\nversion = \"{version}\"\n"
                        },
                        {
                          "type": "file",
                          "name": "moose.config.toml",
                          "template": "# Moose configuration for {pipeline} pipeline\n[moose]\nname = \"{pipeline}\"\nversion = \"{version}\"\n"
                        },
                        {
                          "type": "dir",
                          "name": "tests",
                          "children": [
                            {
                              "type": "file",
                              "name": "runner.test.ts",
                              "template": "import { describe, it, expect } from 'vitest'\nimport { PipelineRunner } from '../app/runner'\n\ndescribe('PipelineRunner', () => {\n  it('ping', () => {\n    expect(new PipelineRunner({}).ping()).toBe(true)\n  })\n})\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "scripts",
                          "children": [
                            {
                              "type": "file",
                              "name": "initial-setup.sh",
                              "template": "#!/bin/bash\n# Initial setup script for {pipeline} pipeline\necho \"Setting up {pipeline} pipeline...\"\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "examples",
                          "children": [
                            {
                              "type": "file",
                              "name": "basic-usage.ts",
                              "template": "import { PipelineRunner } from './src/runner'\nconsole.log(new PipelineRunner({}).ping())\n"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
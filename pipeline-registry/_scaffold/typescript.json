{
  "$schema": "https://schemas.connector-factory.dev/scaffold.schema.json",
  "scaffold": "typescript",
  "version": "1.0.0",
  "description": "TypeScript implementation scaffold for a pipeline.",
  "variables": {
    "pipeline": {
      "description": "Pipeline name (kebab-case).",
      "example": "ga-to-clickhouse",
      "pattern": "^[a-z0-9][a-z0-9-]*$"
    },
    "version": {
      "description": "Pipeline version identifier (not necessarily semver). Examples: v1, 2024-10-01",
      "example": "v1",
      "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$"
    },
    "author": {
      "description": "GitHub organization or user handle (kebab-case). Used for linking and avatars.",
      "example": "514-labs",
      "pattern": "^[a-z0-9](?:[a-z0-9-]{0,37}[a-z0-9])?$"
    },
    "implementation": {
      "description": "Implementation name nested under the language folder (kebab-case). Defaults to 'default'.",
      "example": "default",
      "pattern": "^[a-z0-9][a-z0-9-]*$",
      "default": "default"
    },
    "packageName": {
      "description": "npm package name for the pipeline helpers (use @workspace/ prefix if publishing in this monorepo).",
      "example": "@workspace/pipeline-ga-to-clickhouse",
      "pattern": "^(@[a-z0-9-~][a-z0-9-._~]*)?/[a-z0-9-~][a-z0-9-._~]*$|^[a-z0-9-~][a-z0-9-._~]*$"
    },
    "resource": {
      "description": "Default REST resource path segment (kebab-case).",
      "example": "contacts",
      "pattern": "^[a-z0-9][a-z0-9-]*$",
      "default": "resource"
    }
  },
  "structure": [
    {
      "type": "dir",
      "name": "{pipeline}",
      "children": [
        {
          "type": "dir",
          "name": "{version}",
          "children": [
            {
              "type": "dir",
              "name": "{author}",
              "children": [
                {
                  "type": "dir",
                  "name": "typescript",
                  "children": [
                    {
                      "type": "dir",
                      "name": "{implementation}",
                      "children": [
                        {
                          "type": "file",
                          "name": ".gitignore",
                          "template": "node_modules/\ndist/\n.env\n"
                        },
                        {
                          "type": "file",
                          "name": ".env.example",
                          "template": "# Example environment variables for the pipeline implementation\nAPI_KEY=\n"
                        },
                        {
                          "type": "file",
                          "name": "README.md",
                          "template": "# {pipeline} (TypeScript)\n\nTypeScript helpers for the `{pipeline}` pipeline by `{author}`.\n\n- See `schemas/index.json` for optional machine-readable dataset definitions and accompanying Markdown docs.\n- Maintain lineage in `moose/lineage.manifest.json` and optionally under `lineage/schemas`.\n"
                        },
                        {
                          "type": "file",
                          "name": "package.json",
                          "template": "{\n  \"name\": \"{packageName}\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsup src/index.ts --dts --format esm,cjs\",\n    \"test\": \"vitest run\"\n  },\n  \"engines\": {\"node\": \">=20\"},\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"tsup\": \"^8.0.0\",\n    \"typescript\": \"^5.4.0\",\n    \"vitest\": \"^1.6.0\"\n  }\n}\n"
                        },
                        {
                          "type": "file",
                          "name": "tsconfig.json",
                          "template": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"outDir\": \"dist\",\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"src\"]\n}\n"
                        },
                        {
                          "type": "file",
                          "name": "vitest.config.ts",
                          "template": "import { defineConfig } from 'vitest/config'\nexport default defineConfig({ test: { environment: 'node' } })\n"
                        },
                        {
                          "type": "dir",
                          "name": "docs",
                          "children": [
                            {
                              "type": "file",
                              "name": "getting-started.md",
                              "template": "# Getting started\n\nDocument how to configure and operate this pipeline implementation.\n"
                            },
                            {
                              "type": "file",
                              "name": "configuration.md",
                              "template": "# Configuration\n\nDocument configuration options (auth, scopes, IDs, destinations).\n"
                            },
                            {
                              "type": "file",
                              "name": "outputs.md",
                              "template": "# Outputs\n\nDescribe pipeline outputs (datasets/tables) and link to `schemas/index.json` if used.\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "schemas",
                          "children": [
                            {
                              "type": "file",
                              "name": "index.json",
                              "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [],\n  \"_examples\": {\n    \"_comment\": \"Examples for organizing dataset schemas if your pipeline produces tables/files.\"\n  }\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "moose",
                          "children": [
                            {
                              "type": "file",
                              "name": "lineage.manifest.json",
                              "template": "{\n  \"version\": \"1.0\",\n  \"namespace\": \"moose\",\n  \"nodes\": [\n    {\n      \"id\": \"conn.source\",\n      \"type\": \"connector\",\n      \"name\": \"Source Connector\",\n      \"namespace\": \"{pipeline}\",\n      \"version\": \"1\",\n      \"attrs\": {\n        \"mode\": \"etl\",\n        \"schema_hash\": \"sha256:<hash>\",\n        \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\", \"language\": \"<language>\", \"implementation\": \"<implementation>\" },\n        \"identifier\": \"<external-identifier>\",\n        \"schema_path\": \"<path/to/repo-relative/schema.json>\"\n      }\n    }\n  ],\n  \"edges\": []\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "lineage",
                          "children": [
                            {
                              "type": "dir",
                              "name": "schemas",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "index.json",
                                  "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [\n    {\n      \"name\": \"source-connector\",\n      \"kind\": \"pointer\",\n      \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\" }\n    },\n    {\n      \"name\": \"transformed.tables\",\n      \"stage\": \"extracted\",\n      \"kind\": \"tables\",\n      \"path\": \"relational/tables.json\"\n    },\n    {\n      \"name\": \"outputs.files\",\n      \"stage\": \"extracted\",\n      \"kind\": \"files\",\n      \"path\": \"files/manifest.json\"\n    }\n  ]\n}\n"
                                },
                                {
                                  "type": "dir",
                                  "name": "relational",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "tables.json",
                                      "template": "{\n  \"tables\": [\n    { \"name\": \"events\", \"columns\": [ { \"name\": \"event_id\", \"type\": \"string\" } ] }\n  ]\n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Relational Schemas\n\nTables produced by the pipeline after transformations.\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "files",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "manifest.json",
                                      "template": "{ \n  \"files\": [ ] \n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Files\n\nFile outputs from the pipeline (CSV/JSON/Parquet/etc).\n"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "src",
                          "children": [
                            {
                              "type": "file",
                              "name": "index.ts",
                              "template": "export * from './runner'\nexport * from './config'\n"
                            },
                            {
                              "type": "file",
                              "name": "runner.ts",
                              "template": "export class PipelineRunner {\n  constructor(public config: Record<string, unknown>) {}\n  ping(): boolean { return true }\n}\n"
                            },
                            {
                              "type": "file",
                              "name": "config.ts",
                              "template": "export type PipelineConfig = { schedule?: { cron: string; timezone?: string } }\n"
                            },
                            {
                              "type": "dir",
                              "name": "lib",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "paginate.ts",
                                  "template": "export type HttpResponseEnvelope<T> = { data: T }\n\nexport type SendFn = <T = any>(args: {\n  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  path: string;\n  query?: Record<string, any>;\n  headers?: Record<string, string>;\n  body?: unknown;\n  operation?: string;\n}) => Promise<HttpResponseEnvelope<T>>\n\nexport async function* paginateCursor<T = any>(params: {\n  send: SendFn;\n  path: string;\n  query?: Record<string, any>;\n  pageSize?: number;\n  extractItems?: (res: any) => T[];\n  extractNextCursor?: (res: any) => string | undefined;\n}) {\n  const extractItems = params.extractItems ?? ((res: any) => (res?.results ?? []) as T[])\n  const extractNext = params.extractNextCursor ?? ((res: any) => res?.paging?.next?.after as string | undefined)\n  let after: string | undefined = params.query?.after as string | undefined\n  const limit = params.pageSize ?? (params.query?.limit as number | undefined) ?? 100\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const res = await params.send<any>({ method: 'GET', path: params.path, query: { ...(params.query ?? {}), limit, after }, operation: 'paginate' })\n    const items = extractItems(res.data)\n    yield items\n    const next = extractNext(res.data)\n    if (!next) break\n    after = next\n  }\n}\n"
                                },
                                {
                                  "type": "file",
                                  "name": "make-resource.ts",
                                  "template": "import { paginateCursor, type SendFn } from './paginate'\n\n/**\n * makeCrudResource\n * Creates a CRUD surface for a REST resource at `objectPath`.\n */\nexport function makeCrudResource<TItem, TListResponse, TSingleResponse>(objectPath: string, send: SendFn) {\n  const api = {\n    list: (params?: { properties?: string[]; limit?: number; after?: string }) => {\n      const query: Record<string, any> = {}\n      if (params?.properties?.length) query.properties = params.properties.join(',')\n      if (params?.limit) query.limit = params.limit\n      if (params?.after) query.after = params.after\n      return send<TListResponse>({ method: 'GET', path: objectPath, query })\n    },\n    get: (params: { id: string; properties?: string[] }) => {\n      const query: Record<string, any> = {}\n      if (params?.properties?.length) query.properties = params.properties.join(',')\n      return send<TSingleResponse>({ method: 'GET', path: `${objectPath}/${params.id}`, query })\n    },\n    streamAll: async function* (params?: { properties?: string[]; pageSize?: number }) {\n      const query: Record<string, any> = {}\n      if (params?.properties?.length) query.properties = params.properties.join(',')\n      for await (const items of paginateCursor<TItem>({ send, path: objectPath, query, pageSize: params?.pageSize })) {\n        for (const item of items) yield item\n      }\n    },\n    getAll: async (params?: { properties?: string[]; pageSize?: number; maxItems?: number }) => {\n      const results: TItem[] = []\n      for await (const item of api.streamAll({ properties: params?.properties, pageSize: params?.pageSize })) {\n        results.push(item)\n        if (params?.maxItems && results.length >= params.maxItems) break\n      }\n      return results\n    },\n  }\n  return api\n}\n"
                                },
                                {
                                  "type": "file",
                                  "name": "hooks.ts",
                                  "template": "export type RequestOptions = {\n  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n  path: string\n  query?: Record<string, any>\n  headers?: Record<string, string>\n  body?: unknown\n  timeoutMs?: number\n  operation?: string\n}\n\nexport type ResponseMeta = {\n  timestamp: number\n  durationMs: number\n  retryCount: number\n  requestId?: string\n}\n\nexport type ResponseEnvelope<T> = {\n  data: T\n  status?: number\n  headers?: Record<string, string>\n  meta?: ResponseMeta\n}\n\nexport type HookContext = {\n  type: 'beforeRequest' | 'afterResponse' | 'onError' | 'onRetry'\n  request?: RequestOptions\n  response?: ResponseEnvelope<any>\n  error?: unknown\n  metadata?: Record<string, any>\n  attempt?: number\n}\n\nexport type Hook = (ctx: HookContext) => void | Promise<void>\n\nexport type Hooks = {\n  beforeRequest?: Hook[]\n  afterResponse?: Hook[]\n  onError?: Hook[]\n  onRetry?: Hook[]\n}\n\nexport async function runHooks(hooks: Hook[] | undefined, ctx: HookContext): Promise<void> {\n  for (const hook of hooks ?? []) {\n    // eslint-disable-next-line no-await-in-loop\n    await hook(ctx)\n  }\n}\n"
                                },
                                {
                                  "type": "file",
                                  "name": "send.ts",
                                  "template": "import type { Hooks, RequestOptions, ResponseEnvelope } from './hooks'\nimport { runHooks } from './hooks'\n\nexport type DoRequest = <T = any>(req: RequestOptions) => Promise<ResponseEnvelope<T>>\n\nexport type RetryConfig = {\n  maxAttempts?: number\n  initialDelayMs?: number\n  maxDelayMs?: number\n  backoffMultiplier?: number\n  retryableStatusCodes?: number[]\n  respectRetryAfter?: boolean\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction calcDelay(attempt: number, cfg: Required<Pick<RetryConfig, 'initialDelayMs' | 'maxDelayMs' | 'backoffMultiplier'>>): number {\n  const exp = cfg.initialDelayMs * Math.pow(cfg.backoffMultiplier, attempt - 1)\n  const bounded = Math.min(exp, cfg.maxDelayMs)\n  const jitter = bounded * (0.5 + Math.random() * 0.5)\n  return Math.floor(jitter)\n}\n\nexport function createSend({ doRequest, hooks, retry }: { doRequest: DoRequest; hooks?: Hooks; retry?: RetryConfig }) {\n  const retryCfg: Required<RetryConfig> = {\n    maxAttempts: retry?.maxAttempts ?? 3,\n    initialDelayMs: retry?.initialDelayMs ?? 1000,\n    maxDelayMs: retry?.maxDelayMs ?? 30000,\n    backoffMultiplier: retry?.backoffMultiplier ?? 2,\n    retryableStatusCodes: retry?.retryableStatusCodes ?? [408, 425, 429, 500, 502, 503, 504],\n    respectRetryAfter: retry?.respectRetryAfter ?? true,\n  } as Required<RetryConfig>\n\n  async function send<T = any>(req: RequestOptions): Promise<ResponseEnvelope<T>> {\n    const startedAt = Date.now()\n    let lastError: unknown\n    for (let attempt = 1; attempt <= retryCfg.maxAttempts; attempt++) {\n      try {\n        await runHooks(hooks?.beforeRequest, { type: 'beforeRequest', request: req, attempt })\n        const res = await doRequest<T>(req)\n        await runHooks(hooks?.afterResponse, { type: 'afterResponse', request: req, response: res, attempt })\n        const status = res.status ?? 200\n        if (!retryCfg.retryableStatusCodes.includes(status)) {\n          res.meta = { ...(res.meta ?? {}), timestamp: Date.now(), durationMs: Date.now() - startedAt, retryCount: attempt - 1 }\n          return res\n        }\n        lastError = new Error(`Retryable status: ${status}`)\n      } catch (err) {\n        lastError = err\n        await runHooks(hooks?.onError, { type: 'onError', request: req, error: err, attempt })\n      }\n      if (attempt < retryCfg.maxAttempts) {\n        await runHooks(hooks?.onRetry, { type: 'onRetry', request: req, error: lastError, attempt })\n        const delay = calcDelay(attempt, { initialDelayMs: retryCfg.initialDelayMs, maxDelayMs: retryCfg.maxDelayMs, backoffMultiplier: retryCfg.backoffMultiplier })\n        await sleep(delay)\n        continue\n      }\n      break\n    }\n    throw lastError ?? new Error('Request failed')\n  }\n\n  return send\n}\n"
                                }
                              ]
                            },
                            {
                              "type": "dir",
                              "name": "{resource}",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "index.ts",
                                  "template": "import { makeCrudResource } from '../lib/make-resource'\nimport type { SendFn } from '../lib/paginate'\nimport type { Model } from './model'\n\nexport const createResource = (send: SendFn) => makeCrudResource<Model, any, any>('/{resource}', send)\n"
                                },
                                {
                                  "type": "file",
                                  "name": "model.ts",
                                  "template": "export interface Model {\n  // Define your resource model fields\n  [key: string]: unknown\n}\n"
                                }
                              ]
                            }
                          ]
                        },

                        {
                          "type": "dir",
                          "name": "tests",
                          "children": [
                            {
                              "type": "file",
                              "name": "runner.test.ts",
                              "template": "import { describe, it, expect } from 'vitest'\nimport { PipelineRunner } from '../src/runner'\n\ndescribe('PipelineRunner', () => {\n  it('ping', () => {\n    expect(new PipelineRunner({}).ping()).toBe(true)\n  })\n})\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "examples",
                          "children": [
                            {
                              "type": "file",
                              "name": "basic-usage.ts",
                              "template": "import { PipelineRunner } from './src/runner'\nconsole.log(new PipelineRunner({}).ping())\n"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}

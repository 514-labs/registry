{
  "$schema": "https://schemas.connector-factory.dev/scaffold.schema.json",
  "scaffold": "python",
  "version": "1.0.0",
  "description": "Python implementation scaffold for a pipeline. Places a Python package under pipeline/version/author/python/{implementation} with conventional src/tests layout.",
  "variables": {
    "pipeline": {
      "description": "Pipeline name (kebab-case).",
      "example": "ga-to-clickhouse",
      "pattern": "^[a-z0-9][a-z0-9-]*$"
    },
    "version": {
      "description": "Pipeline version identifier (not necessarily semver). Examples: v1, 2024-10-01",
      "example": "v1",
      "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$"
    },
    "author": {
      "description": "GitHub organization or user handle (kebab-case). Used for linking and avatars.",
      "example": "514-labs",
      "pattern": "^[a-z0-9](?:[a-z0-9-]{0,37}[a-z0-9])?$"
    },
    "implementation": {
      "description": "Implementation name nested under the language folder (kebab-case). Defaults to 'default'.",
      "example": "default",
      "pattern": "^[a-z0-9][a-z0-9-]*$",
      "default": "default"
    },
    "packageName": {
      "description": "Python package name (snake_case).",
      "example": "pipeline_ga_to_clickhouse",
      "pattern": "^[a-z_][a-z0-9_]*$"
    }
  },
  "structure": [
    {
      "type": "dir",
      "name": "{pipeline}",
      "children": [
        {
          "type": "dir",
          "name": "{version}",
          "children": [
            {
              "type": "dir",
              "name": "{author}",
              "children": [
                {
                  "type": "dir",
                  "name": "python",
                  "children": [
                    {
                      "type": "dir",
                      "name": "{implementation}",
                      "children": [
                        {
                          "type": "file",
                          "name": ".gitignore",
                          "template": "__pycache__/\n.venv/\n.env\n.dist/\n"
                        },
                        {
                          "type": "file",
                          "name": ".env.example",
                          "template": "# Example environment variables for the pipeline implementation\nAPI_KEY=\n"
                        },
                        {
                          "type": "file",
                          "name": "README.md",
                          "template": "# {pipeline} (Python)\n\nPython helpers for the `{pipeline}` pipeline by `{author}`.\n"
                        },
                        {
                          "type": "file",
                          "name": "pyproject.toml",
                          "template": "[project]\nname = \"{packageName}\"\nversion = \"0.1.0\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = {text = \"MIT\"}\nauthors = [ { name = \"{author}\" } ]\ndependencies = [ ]\n\n[tool.ruff]\nline-length = 100\n\n[build-system]\nrequires = [\"setuptools>=68\",\"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n"
                        },
                        {
                          "type": "dir",
                          "name": "docs",
                          "children": [
                            {
                              "type": "file",
                              "name": "getting-started.md",
                              "template": "# Getting started\n\nDocument how to configure and operate this pipeline implementation.\n"
                            },
                            {
                              "type": "file",
                              "name": "configuration.md",
                              "template": "# Configuration\n\nDocument configuration options (auth, scopes, IDs, destinations).\n"
                            },
                            {
                              "type": "file",
                              "name": "outputs.md",
                              "template": "# Outputs\n\nDescribe pipeline outputs (datasets/tables) and link to `schemas/index.json` if used.\n"
                            }
                          ]
                        },

                        {
                          "type": "dir",
                          "name": "schemas",
                          "children": [
                            {
                              "type": "file",
                              "name": "index.json",
                              "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [],\n  \"_examples\": {\n    \"_comment\": \"Examples for organizing dataset schemas if your pipeline produces tables/files.\"\n  }\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "lineage",
                          "children": [
                            {
                              "type": "dir",
                              "name": "schemas",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "index.json",
                                  "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [\n    {\n      \"name\": \"source-connector\",\n      \"kind\": \"pointer\",\n      \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\" }\n    },\n    {\n      \"name\": \"transformed.tables\",\n      \"stage\": \"extracted\",\n      \"kind\": \"tables\",\n      \"path\": \"relational/tables.json\"\n    },\n    {\n      \"name\": \"outputs.files\",\n      \"stage\": \"extracted\",\n      \"kind\": \"files\",\n      \"path\": \"files/manifest.json\"\n    }\n  ]\n}\n"
                                },
                                {
                                  "type": "dir",
                                  "name": "relational",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "tables.json",
                                      "template": "{\n  \"tables\": [\n    { \"name\": \"events\", \"columns\": [ { \"name\": \"event_id\", \"type\": \"string\" } ] }\n  ]\n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Relational Schemas\n\nTables produced by the pipeline after transformations.\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "files",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "manifest.json",
                                      "template": "{ \n  \"files\": [ ] \n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Files\n\nFile outputs from the pipeline (CSV/JSON/Parquet/etc).\n"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "moose",
                          "children": [
                            {
                              "type": "file",
                              "name": "lineage.manifest.json",
                              "template": "{\n  \"version\": \"1.0\",\n  \"namespace\": \"moose\",\n  \"nodes\": [\n    {\n      \"id\": \"conn.source\",\n      \"type\": \"connector\",\n      \"name\": \"Source Connector\",\n      \"namespace\": \"{pipeline}\",\n      \"version\": \"1\",\n      \"attrs\": {\n        \"mode\": \"etl\",\n        \"schema_hash\": \"sha256:<hash>\",\n        \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\", \"language\": \"<language>\", \"implementation\": \"<implementation>\" },\n        \"identifier\": \"<external-identifier>\",\n        \"schema_path\": \"<path/to/repo-relative/schema.json>\"\n      }\n    }\n  ],\n  \"edges\": []\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "src",
                          "children": [
                            {
                              "type": "dir",
                              "name": "{packageName}",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "__init__.py",
                                  "template": "__version__ = \"0.1.0\"\n"
                                },
                                {
                                  "type": "file",
                                  "name": "runner.py",
                                  "template": "class PipelineRunner:\n    def __init__(self, config: dict):\n        self.config = config\n\n    def ping(self) -> bool:\n        return True\n"
                                },
                                {
                                  "type": "file",
                                  "name": "config.py",
                                  "template": "from dataclasses import dataclass\n\n@dataclass\nclass PipelineConfig:\n    cron: str | None = None\n    timezone: str | None = None\n"
                                },
                                {
                                  "type": "dir",
                                  "name": "extract",
                                  "children": [
                                    { "type": "file", "name": "__init__.py" },
                                    {
                                      "type": "file",
                                      "name": "base_extractor.py",
                                      "template": "class BaseExtractor:\n    def run(self):\n        raise NotImplementedError\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "transform",
                                  "children": [
                                    { "type": "file", "name": "__init__.py" },
                                    {
                                      "type": "file",
                                      "name": "base_transformer.py",
                                      "template": "class BaseTransformer:\n    def transform(self, record):\n        return record\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "load",
                                  "children": [
                                    { "type": "file", "name": "__init__.py" },
                                    {
                                      "type": "file",
                                      "name": "base_loader.py",
                                      "template": "class BaseLoader:\n    def load(self, records):\n        pass\n"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "tests",
                          "children": [
                            {
                              "type": "file",
                              "name": "test_runner.py",
                              "template": "def test_ping():\n    from {packageName}.runner import PipelineRunner\n    assert PipelineRunner({}).ping() is True\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "examples",
                          "children": [
                            {
                              "type": "file",
                              "name": "basic_usage.py",
                              "template": "from {packageName}.runner import PipelineRunner\n\nrunner = PipelineRunner({})\nprint(runner.ping())\n"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}

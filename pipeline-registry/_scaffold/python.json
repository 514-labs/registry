{
  "$schema": "https://schemas.connector-factory.dev/scaffold.schema.json",
  "scaffold": "python",
  "version": "1.0.0",
  "description": "Python implementation scaffold for a pipeline. Places a Python package under pipeline/version/author/python/{implementation} with conventional src/tests layout.",
  "variables": {
    "pipeline": {
      "description": "Pipeline name (kebab-case).",
      "example": "ga-to-clickhouse",
      "pattern": "^[a-z0-9][a-z0-9-]*$"
    },
    "version": {
      "description": "Pipeline version identifier (not necessarily semver). Examples: v1, 2024-10-01",
      "example": "v1",
      "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$"
    },
    "author": {
      "description": "GitHub organization or user handle (kebab-case). Used for linking and avatars.",
      "example": "514-labs",
      "pattern": "^[a-z0-9](?:[a-z0-9-]{0,37}[a-z0-9])?$"
    },
    "implementation": {
      "description": "Implementation name nested under the language folder (kebab-case). Defaults to 'default'.",
      "example": "default",
      "pattern": "^[a-z0-9][a-z0-9-]*$",
      "default": "default"
    },
    "packageName": {
      "description": "Python package name (snake_case).",
      "example": "pipeline_ga_to_clickhouse",
      "pattern": "^[a-z_][a-z0-9_]*$"
    }
  },
  "structure": [
    {
      "type": "dir",
      "name": "{pipeline}",
      "children": [
        {
          "type": "dir",
          "name": "{version}",
          "children": [
            {
              "type": "dir",
              "name": "{author}",
              "children": [
                {
                  "type": "dir",
                  "name": "python",
                  "children": [
                    {
                      "type": "dir",
                      "name": "{implementation}",
                      "children": [
                        {
                          "type": "file",
                          "name": ".gitignore",
                          "template": "__pycache__/\n.venv/\n.env\n.dist/\n"
                        },
                        {
                          "type": "file",
                          "name": ".env.example",
                          "template": "# Example environment variables for the pipeline implementation\nAPI_KEY=\n"
                        },
                        {
                          "type": "file",
                          "name": "README.md",
                          "template": "# {pipeline} (Python)\n\nPython helpers for the `{pipeline}` pipeline by `{author}`.\n"
                        },
                        {
                          "type": "file",
                          "name": "pyproject.toml",
                          "template": "[project]\nname = \"{packageName}\"\nversion = \"0.1.0\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = {text = \"MIT\"}\nauthors = [ { name = \"{author}\" } ]\ndependencies = [ ]\n\n[tool.ruff]\nline-length = 100\n\n[build-system]\nrequires = [\"setuptools>=68\",\"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n"
                        },
                        {
                          "type": "dir",
                          "name": "docs",
                          "children": [
                            {
                              "type": "file",
                              "name": "getting-started.md",
                              "template": "# Getting started\n\nDocument how to configure and operate this pipeline implementation.\n"
                            },
                            {
                              "type": "file",
                              "name": "configuration.md",
                              "template": "# Configuration\n\nDocument configuration options (auth, scopes, IDs, destinations).\n"
                            },
                            {
                              "type": "file",
                              "name": "outputs.md",
                              "template": "# Outputs\n\nDescribe pipeline outputs (datasets/tables) and link to `schemas/index.json` if used.\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "scripts",
                          "children": [
                            {
                              "type": "file",
                              "name": "lineage.py",
                              "template": "from __future__ import annotations\nimport json\nimport os\nimport sys\nfrom pathlib import Path\nimport subprocess\n\nthis_dir = Path(__file__).resolve().parent\nprovider_meta_dir = (this_dir / '..' / '..' / '..' / '_meta').resolve()\nassets_dir = provider_meta_dir / 'assets'\npipeline_json_path = provider_meta_dir / 'pipeline.json'\nmmd_path = assets_dir / 'lineage.mmd'\nsvg_path = assets_dir / 'lineage.svg'\n\nSHAPES = {\n    'source': '([%LABEL%])',\n    'transform': '{{%LABEL%}}',\n    'system': '[(%LABEL%)]',\n    'destination': '[(%LABEL%)]',\n}\n\n\ndef shape_for(kind: str) -> str:\n    return SHAPES.get(kind, '[(%LABEL%)]')\n\n\ndef label_for_destination(dest: dict | None) -> str:\n    if not dest:\n        return 'Destination'\n    parts = [dest.get('system') or 'dest']\n    if dest.get('database'):\n        parts.append(dest['database'])\n    if dest.get('table'):\n        parts[-1] = f'{parts[-1]}.{dest['table']}'\n    return ' '.join(parts)\n\n\ndef derive_from_spec(spec: dict) -> dict:\n    nodes = []\n    edges = []\n    source_id = 'source'\n    source_label = (\n        spec.get('source', {}).get('connector', {}).get('name')\n        or spec.get('source', {}).get('type')\n        or 'source'\n    )\n    nodes.append({'id': source_id, 'kind': 'source', 'label': source_label})\n\n    system_ids = []\n    for i, sys in enumerate(spec.get('systems') or []):\n        _id = sys.get('id') or f'system_{i+1}'\n        nodes.append({'id': _id, 'kind': 'system', 'label': sys.get('label') or sys.get('type') or _id})\n        system_ids.append(_id)\n\n    transform_ids = []\n    for i, t in enumerate(spec.get('transformations') or []):\n        _id = t.get('id') or f'transform_{i+1}'\n        nodes.append({'id': _id, 'kind': 'transform', 'label': t.get('label') or t.get('type') or _id})\n        transform_ids.append(_id)\n\n    dest_id = 'dest'\n    nodes.append({'id': dest_id, 'kind': 'destination', 'label': label_for_destination(spec.get('destination'))})\n\n    prev = source_id\n    for nxt in [*system_ids, *transform_ids, dest_id]:\n        edges.append({'from': prev, 'to': nxt})\n        prev = nxt\n\n    return {'nodes': nodes, 'edges': edges}\n\n\ndef to_mermaid(lineage: dict) -> str:\n    lines = ['flowchart TD']\n    for n in lineage.get('nodes', []):\n        shape = shape_for(n.get('kind'))\n        label = (n.get('label') or n.get('id')).replace('\n', ' ')\n        lines.append(f'  {n[\"id\"]}{shape.replace(\"%LABEL%\", label)}')\n    for e in lineage.get('edges', []):\n        lbl = f'|{e.get(\"label\")}| ' if e.get('label') else ''\n        lines.append(f'  {e[\"from\"]} -->{lbl} {e[\"to\"]}')\n    return '\n'.join(lines) + '\n'\n\n\ndef main() -> None:\n    assets_dir.mkdir(parents=True, exist_ok=True)\n    spec = json.loads(pipeline_json_path.read_text('utf-8'))\n    lineage = spec.get('lineage') if (spec.get('lineage') or {}).get('nodes') else derive_from_spec(spec)\n    mermaid = to_mermaid(lineage)\n    mmd_path.write_text(mermaid, 'utf-8')\n    if '--svg' in sys.argv:\n        try:\n            subprocess.run(['npx', '-y', '-p', '@mermaid-js/mermaid-cli', 'mmdc', '-i', str(mmd_path), '-o', str(svg_path)], check=False)\n        except Exception:\n            pass\n    print('Wrote', mmd_path, 'and SVG' if svg_path.exists() else '')\n\n\nif __name__ == '__main__':\n    main()\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "schemas",
                          "children": [
                            {
                              "type": "file",
                              "name": "index.json",
                              "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [],\n  \"_examples\": {\n    \"_comment\": \"Examples for organizing dataset schemas if your pipeline produces tables/files.\"\n  }\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "lineage",
                          "children": [
                            {
                              "type": "dir",
                              "name": "schemas",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "index.json",
                                  "template": "{\n  \"$schema\": \"https://schemas.connector-factory.dev/schema-index.schema.json\",\n  \"version\": \"0.1.0\",\n  \"datasets\": [\n    {\n      \"name\": \"source-connector\",\n      \"kind\": \"pointer\",\n      \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\" }\n    },\n    {\n      \"name\": \"transformed.tables\",\n      \"stage\": \"extracted\",\n      \"kind\": \"tables\",\n      \"path\": \"relational/tables.json\"\n    },\n    {\n      \"name\": \"outputs.files\",\n      \"stage\": \"extracted\",\n      \"kind\": \"files\",\n      \"path\": \"files/manifest.json\"\n    }\n  ]\n}\n"
                                },
                                {
                                  "type": "dir",
                                  "name": "relational",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "tables.json",
                                      "template": "{\n  \"tables\": [\n    { \"name\": \"events\", \"columns\": [ { \"name\": \"event_id\", \"type\": \"string\" } ] }\n  ]\n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Relational Schemas\n\nTables produced by the pipeline after transformations.\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "files",
                                  "children": [
                                    {
                                      "type": "file",
                                      "name": "manifest.json",
                                      "template": "{ \n  \"files\": [ ] \n}\n"
                                    },
                                    {
                                      "type": "file",
                                      "name": "README.md",
                                      "template": "# Lineage Files\n\nFile outputs from the pipeline (CSV/JSON/Parquet/etc).\n"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "moose",
                          "children": [
                            {
                              "type": "file",
                              "name": "lineage.manifest.json",
                              "template": "{\n  \"version\": \"1.0\",\n  \"namespace\": \"moose\",\n  \"nodes\": [\n    {\n      \"id\": \"conn.source\",\n      \"type\": \"connector\",\n      \"name\": \"Source Connector\",\n      \"namespace\": \"{pipeline}\",\n      \"version\": \"1\",\n      \"attrs\": {\n        \"mode\": \"etl\",\n        \"schema_hash\": \"sha256:<hash>\",\n        \"connector\": { \"name\": \"<connector-id>\", \"version\": \"<vX>\", \"author\": \"<author>\", \"language\": \"<language>\", \"implementation\": \"<implementation>\" },\n        \"identifier\": \"<external-identifier>\",\n        \"schema_path\": \"<path/to/repo-relative/schema.json>\"\n      }\n    }\n  ],\n  \"edges\": []\n}\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "src",
                          "children": [
                            {
                              "type": "dir",
                              "name": "{packageName}",
                              "children": [
                                {
                                  "type": "file",
                                  "name": "__init__.py",
                                  "template": "__version__ = \"0.1.0\"\n"
                                },
                                {
                                  "type": "file",
                                  "name": "runner.py",
                                  "template": "class PipelineRunner:\n    def __init__(self, config: dict):\n        self.config = config\n\n    def ping(self) -> bool:\n        return True\n"
                                },
                                {
                                  "type": "file",
                                  "name": "config.py",
                                  "template": "from dataclasses import dataclass\n\n@dataclass\nclass PipelineConfig:\n    cron: str | None = None\n    timezone: str | None = None\n"
                                },
                                {
                                  "type": "dir",
                                  "name": "extract",
                                  "children": [
                                    { "type": "file", "name": "__init__.py" },
                                    {
                                      "type": "file",
                                      "name": "base_extractor.py",
                                      "template": "class BaseExtractor:\n    def run(self):\n        raise NotImplementedError\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "transform",
                                  "children": [
                                    { "type": "file", "name": "__init__.py" },
                                    {
                                      "type": "file",
                                      "name": "base_transformer.py",
                                      "template": "class BaseTransformer:\n    def transform(self, record):\n        return record\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "dir",
                                  "name": "load",
                                  "children": [
                                    { "type": "file", "name": "__init__.py" },
                                    {
                                      "type": "file",
                                      "name": "base_loader.py",
                                      "template": "class BaseLoader:\n    def load(self, records):\n        pass\n"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "tests",
                          "children": [
                            {
                              "type": "file",
                              "name": "test_runner.py",
                              "template": "def test_ping():\n    from {packageName}.runner import PipelineRunner\n    assert PipelineRunner({}).ping() is True\n"
                            }
                          ]
                        },
                        {
                          "type": "dir",
                          "name": "examples",
                          "children": [
                            {
                              "type": "file",
                              "name": "basic_usage.py",
                              "template": "from {packageName}.runner import PipelineRunner\n\nrunner = PipelineRunner({})\nprint(runner.ping())\n"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
